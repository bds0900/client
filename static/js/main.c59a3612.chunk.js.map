{"version":3,"sources":["component/signup/Home.tsx","component/signup/Login.tsx","component/Query.ts","component/common/SelectProgram.tsx","component/signup/Signup.tsx","component/programs/Program.tsx","component/programs/ProgramList.tsx","component/programs/UpdateProgram.tsx","component/programs/ProgramDetail.tsx","component/courses/CourseList.tsx","component/courses/UpdateCourse.tsx","component/courses/Course.tsx","component/students/StudentList.tsx","component/common/SelectCourses.tsx","component/enrollment/CreateEnrollment.tsx","component/students/UpdateStudent.tsx","component/students/Student.tsx","component/programs/CreateProgram.tsx","component/courses/CreateCourse.tsx","component/faculties/FacultyList.tsx","component/faculties/UpdateFaculty.tsx","component/faculties/Faculty.tsx","component/faculties/CreateFaculty.tsx","Routes.tsx","Client.js","App.tsx","index.js"],"names":["Home","state","Component","emailRegex","Login","props","useState","setLoading","redirect","email","setEmail","password","setPassword","emailValid","setEmailValid","passwordValid","setPasswrodValid","onLogin","event","a","preventDefault","to","className","TextField","placeholder","label","value","onChange","target","test","toLowerCase","type","length","Button","color","variant","onClick","disabled","GET_STUDENTS","gql","GET_STUDENT","CREATE_STUDENT","UPDATE_STUDENT","GET_ATTENDANCE","GET_PROGRAMS","GET_PROGRAM","CREATE_PROGRAM","UPDATE_PROGRAM","CREATE_COURSE","GET_COURSES","GET_COURSES_BY_PROGRAM_ID","GET_COURSE","UPDATE_COURSE","CREATE_ENROLLMENT","GET_FACULTIES","SelectProgram","programs","program","setProgram","InputLabel","Select","e","onProgramClick","map","MenuItem","key","id","name","Signup","firstName","setFirstName","lastName","setLastName","setID","result","useQuery","useMutation","variables","program_id","saveStudent","error","data","genID","min","max","user_id","String","Math","floor","random","console","log","genEmail","substring","message","createStudent","Typography","gutterBottom","LastName","status","useStyles","makeStyles","theme","createStyles","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Program","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","href","ExpansionPanelDetails","List","courses","course","ListItem","ProgramList","loading","UpdateProgram","setName","saveProgram","updateProgram","update","setUpdate","match","params","faculties","faculty","students","student","CourseList","UpdateCourse","numOfStudent","NOS","setNOS","saveCourse","updateCourse","Number","Course","coure_id","enrollments","enrollment","StudentList","SelectCourses","setCourse","React","onCourseClick","CreateEnrollment","student_id","course_id","saveEnrollment","addCourse","updateStudent","Student","refetch","useSubscription","open","setOpen","button","Collapse","in","timeout","unmountOnExit","attendances","att","time","CreateProgram","createProgram","createCourse","FacultyList","saveFaculty","updateFaculty","faculty_id","instructings","instructing","CreateFaculty","createFaculty","Routes","childProps","path","process","exact","render","component","CreateCourse","ProgramDetail","Faculty","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","App","userHasAuthenticated","authenticated","setState","isAuthenticated","handleLogout","history","push","handleChange","newValue","showLoggedInBar","Breadcrumbs","aria-label","showLoggedOutBar","isAuthenticating","document","title","this","ReactDOM","StrictMode","getElementById"],"mappings":"8VASqBA,E,4MACjBC,MAAQ,G,uDAGJ,OACI,4C,GALsBC,a,yBCD5BC,EAAa,0JAgBJ,SAASC,EAAMC,GAA+C,IAAD,EAE7CC,oBAAS,GAFoC,mBAEzDC,GAFyD,aAGzCD,oBAAS,GAHgC,mBAGjEE,EAHiE,aAI9CF,mBAAS,KAJqC,mBAIjEG,EAJiE,KAI1DC,EAJ0D,OAKxCJ,mBAAS,IAL+B,mBAKjEK,EALiE,KAKvDC,EALuD,OAMpCN,qBANoC,mBAMjEO,EANiE,KAMrDC,EANqD,OAOhCR,qBAPgC,mBAOjES,EAPiE,KAOnDC,EAPmD,KAuBpEC,EAAO,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACdD,EAAME,iBACNb,GAAY,GAFE,2CAAH,sDAeX,OACE,6BACCC,EAED,kBAAC,IAAD,CAAUa,GAAG,MAEb,yBAAKC,UAAU,SACb,6BACG,kBAACC,EAAA,EAAD,CACEC,YAAY,sBACZC,MAAM,WACNC,MAAOjB,EACPkB,SAxCW,SAACT,GACrB,IAAMU,EAASV,EAAMU,OACrBlB,EAASkB,EAAOF,OAChBZ,EAAcX,EAAW0B,KAAKD,EAAOF,MAAMI,eAAiB,UAAY,YAuCjE,6BACC,kBAACP,EAAA,EAAD,CACAQ,KAAK,WACLP,YAAY,sBACZC,MAAM,WACNC,MAAOf,EACPgB,SA1Ce,SAACT,GACxB,IAAMU,EAASV,EAAMU,OACrBhB,EAAYgB,EAAOF,OACnBV,EAAiBY,EAAOF,MAAMM,OAAS,EAAI,QAAU,cAyC9C,6BACC,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAASnB,EAChDoB,SAA4B,YAAlBtB,GAA8C,YAAfF,GADzC,a,+jMCnFL,IAAMyB,EAAeC,IAAH,KASZC,EAAYD,IAAD,KA0BXE,EAAeF,IAAD,KA0BdG,EAAeH,IAAD,KA4BdI,EAAeJ,IAAD,KAwBdK,EAAeL,IAAH,KAYZM,EAAcN,IAAH,KAaXO,GAAeP,IAAD,KAadQ,GAAeR,IAAD,KAedS,GAAcT,IAAD,KAqBbU,GAAcV,IAAH,KASXW,GAA4BX,IAAH,KAczBY,GAAaZ,IAAH,KAsBVa,GAAcb,IAAD,KAqBbc,GAAkBd,IAAD,KA4BjBe,GAAcf,IAAD,K,IASAA,IAAD,K,4BC3RV,SAASgB,GAAclD,GAElC,IAAMmD,EAASnD,EAAMmD,SAFyC,EAGnClD,qBAHmC,mBAGvDmD,EAHuD,KAG/CC,EAH+C,KAO9D,OACI,6BACA,kBAACC,GAAA,EAAD,gBACA,kBAACC,GAAA,EAAD,CAAQlC,MAAO+B,EAAS9B,SAAU,SAAAkC,GAC9BH,EAAWG,EAAEjC,OAAOF,OACpBrB,EAAMyD,eAAeD,EAAEjC,OAAOF,SAFlC,OAKI8B,QALJ,IAKIA,OALJ,EAKIA,EAAUO,KAAI,SAAAN,GAAO,OACjB,kBAACO,GAAA,EAAD,CAAWC,IAAKR,EAAQS,GAAIxC,MAAO+B,EAAQS,IACtCT,EAAQU,WCAd,SAASC,GAAT,GAA0C,IAAD,uBAClB9D,mBAAS,IADS,mBAC7C+D,EAD6C,KAClCC,EADkC,OAEpBhE,mBAAS,IAFW,mBAE7CiE,EAF6C,KAEnCC,EAFmC,OAGtBlE,mBAAS,IAHa,mBAG7CmD,EAH6C,KAGpCC,EAHoC,OAIpBpD,mBAAS,IAJW,mBAI7CK,EAJ6C,KAInCC,EAJmC,OAKhCN,mBAAS,IALuB,mBAK7C4D,EAL6C,KAKzCO,EALyC,OAM1BnE,mBAAS,IANiB,mBAM7CG,EAN6C,KAMtCC,EANsC,KAYpD,IAAMgE,EAASC,YAA0C/B,GAZL,EAepDgC,YACInC,EACA,CAACoC,UAAU,CACPX,GAAGA,EACHG,UAAUA,EACVE,SAASA,EACT5D,SAASA,EACTF,MAAMA,EACNqE,WAAWrB,KAvBiC,mBAc7CsB,EAd6C,YAc9BC,EAd8B,EAc9BA,MAAOC,EAduB,EAcvBA,KAavBC,EAAM,SAACC,EAAWC,GACpB,IAAMC,EAAQ,MAAMC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,IAAQA,GAIrE,OAFAV,EAAMY,GACNK,QAAQC,IAAIN,GACLA,GAGLO,EAAS,SAACvB,EAAiBE,EAAgBL,GAE7C,IAAMzD,EAAO4D,EAAU,GACfE,EACAL,EAAG2B,UAAU,GACb,oBAGR,OAFAnF,EAASD,GACTiF,QAAQC,IAAIlF,GACLA,GAEX,OACI,6BACA,uCACKuE,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAKc,cAEd,6BACA,qCACA,kBAACC,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,eACiBhB,GAAQA,EAAKc,cAAc7B,IAE5C,kBAAC8B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,iBACmBhB,GAAQA,EAAKc,cAAc1B,UAD9C,IAC0DY,EAAKc,cAAcG,UAE7E,kBAACF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,kBACoBhB,GAAQA,EAAKc,cAActF,OAE/C,kBAACuF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,WACahB,GAAQA,EAAKc,cAAcI,SAIxC,6BACI,8BACA,kBAAC5E,EAAA,EAAD,CACIC,YAAY,wBACZC,MAAM,aACNC,MAAO2C,EACP1C,SAAU,SAAAkC,GACNS,EAAaT,EAAEjC,OAAOF,OACtBkE,EAASvB,EAAUE,EAASW,EAAM,KAAK,UAG/C,6BACA,kBAAC3D,EAAA,EAAD,CACAC,YAAY,uBACZC,MAAM,YACNC,MAAO6C,EACP5C,SAAU,SAAAkC,GACNW,EAAYX,EAAEjC,OAAOF,OACrBkE,EAASvB,EAAUE,EAASW,EAAM,KAAK,UAG3C,6BACA,kBAAC3D,EAAA,EAAD,CACAC,YAAY,sBACZO,KAAK,WACLN,MAAM,WACNC,MAAOf,EACPgB,SAAU,SAAAkC,GACNjD,EAAYiD,EAAEjC,OAAOF,OACrBkE,EAASvB,EAAUE,EAASW,EAAM,KAAK,UAG3C,6BACA,kBAAC3B,GAAD,CAAeC,SAAQ,UAAEkB,EAAOO,YAAT,aAAE,EAAazB,SAAUM,eA5F5D,SAAwBgB,GACpBpB,EAAWoB,MA4FH,6BACA,kBAAC7C,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAE5C8B,GAAMG,GAAaE,GAAY9D,GAASgD,GAAWsB,MAFvD,c,8FC1GVqB,I,MAAYC,cAAW,SAACC,GAAD,OAC3BC,aAAa,CACXC,KAAM,CACJC,MAAO,QAETC,QAAS,CACPC,SAAUL,EAAMM,WAAWC,QAAQ,IACnCC,WAAYR,EAAMM,WAAWG,yBAMpB,SAASC,GAAQ3G,GAA6B,IAAD,EAEpD4G,EAAUb,KAF0C,EAGlC9F,oBAAS,GAHyB,6BAO1D,OACE,yBAAKgB,UAAW2F,EAAQT,MACxB,kBAACU,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdnD,GAAI7D,EAAMoD,QAAQS,IAElB,kBAAC8B,EAAA,EAAD,CAAY1E,UAAW2F,EAAQP,SAAUrG,EAAMoD,QAAQU,MACvD,kBAAClC,EAAA,EAAD,CAAQqF,KAAM,YAAYjH,EAAMoD,QAAQS,IAAxC,WAEF,kBAACqD,GAAA,EAAD,KACA,kBAACC,GAAA,EAAD,eAEGnH,EAAMoD,QAAQgE,eAFjB,aAEG,EAAuB1D,KAAI,SAAA2D,GAAM,OAChC,kBAACC,GAAA,EAAD,CAAU1D,IAAKyD,EAAOxD,IACpB,kBAAC,IAAD,CAAS7C,GAAI,WAAWqG,EAAOxD,IAC/B,kBAAC8B,EAAA,EAAD,KAAa0B,EAAOvD,eCxCjB,SAASyD,GAAT,GAA+C,qBAEhCjD,YAA0C/B,GAA5DiF,EAFiD,EAEjDA,QAAS5C,EAFwC,EAExCA,KAEjB,OACI,kBAAC,WAAD,KACC4C,EACG,0CAEA,kBAAC,WAAD,KACA,kBAACL,GAAA,EAAD,KACCvC,GAAQA,EAAKzB,SAASO,KAAI,SAAAN,GAAO,OAC9B,kBAACkE,GAAA,EAAD,CAAU1D,IAAKR,EAAQS,GAAI5C,UAAU,gBAArC,IAAqD,kBAAC0F,GAAD,CAASvD,QAASA,IAAvE,WCJD,SAASqE,GAAczH,GAA6B,IAAD,EAGxCC,mBAASD,EAAMoD,QAAQU,MAHiB,mBAGzDA,EAHyD,KAGnD4D,EAHmD,OAI5CzH,mBAASD,EAAMoD,QAAQS,IAJqB,mBAIzDA,EAJyD,KAIrDO,EAJqD,OAMzBG,YACrC7B,GACA,CAAC8B,UAAU,CAACX,GAAGA,EAAGC,KAAKA,KARuC,mBAMzD6D,EANyD,YAM1ChD,EAN0C,EAM1CA,MAAOC,EANmC,EAMnCA,KAK7B,OACE,6BACA,gDACKD,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAKgD,cACV,qCAGR,yBAAK3G,UAAU,iBACf,kBAACC,EAAA,EAAD,CACAC,YAAY,yBACZC,MAAM,eACNC,MAAOyC,EACPxC,SAAU,SAAAkC,GAAC,OAAEkE,EAAQlE,EAAEjC,OAAOF,UAE9B,6BACA,kBAACH,EAAA,EAAD,CAAWc,UAAQ,EACnBb,YAAY,mBACZC,MAAM,aACNC,MAAOwC,EACPvC,SAAU,SAAAkC,GAAC,OAAEY,EAAMZ,EAAEjC,OAAOF,UAE5B,6BACA,kBAACO,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAAM8B,GAAMC,GAAS6D,MAArE,oBClCW,SAAShB,GAAQ3G,GAA6B,IAAD,QAGlCC,oBAAS,GAHyB,gCAI9BA,oBAAS,IAJqB,mBAInD4H,EAJmD,KAI3CC,EAJ2C,OAKhCxD,YACxB9B,EACA,CAAEgC,UAAW,CAAEX,GAAI7D,EAAM+H,MAAMC,OAAOnE,MAFvBe,GALyC,EAKlD4C,QALkD,EAKzC5C,MAUjB,OACE,6BACCiD,EACC,6BACCjD,GAAM,kBAAC6C,GAAD,CAAerE,QAASwB,EAAKxB,WAIpC,6BACF,kBAACuC,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,eACahB,IAAI,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMxB,QAAQS,KAEnC,kBAAC8B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,iBACehB,IAAI,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMxB,QAAQU,OAGrC,kBAAClC,EAAA,EAAD,CAAQG,QAAS,kBAAI+F,GAAWD,KAAhC,UAEA,kBAAChB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdnD,GAAG,kBAEH,kBAAC8B,EAAA,EAAD,YAAcf,QAAd,IAAcA,OAAd,EAAcA,EAAMxB,QAAQU,KAA5B,iBAEF,kBAACoD,GAAA,EAAD,KACA,kBAACC,GAAA,EAAD,YACGvC,QADH,IACGA,GADH,UACGA,EAAMxB,QAAQgE,eADjB,aACG,EAAuB1D,KAAI,SAAA2D,GAAM,OAChC,kBAACC,GAAA,EAAD,CAAU1D,IAAKyD,EAAOxD,IACpB,kBAAC,IAAD,CAAS7C,GAAI,WAAWqG,EAAOxD,IAC/B,kBAAC8B,EAAA,EAAD,KAAa0B,EAAOvD,cAO5B,kBAAC+C,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdnD,GAAG,kBAEH,kBAAC8B,EAAA,EAAD,YAAcf,QAAd,IAAcA,OAAd,EAAcA,EAAMxB,QAAQU,KAA5B,kBAEF,kBAACoD,GAAA,EAAD,KACA,kBAACC,GAAA,EAAD,YACGvC,QADH,IACGA,GADH,UACGA,EAAMxB,QAAQ6E,iBADjB,aACG,EAAyBvE,KAAI,SAAAwE,GAAO,OACnC,kBAACZ,GAAA,EAAD,CAAU1D,IAAKsE,EAAQrE,IACrB,kBAAC,IAAD,CAAS7C,GAAI,YAAYkH,EAAQrE,IACjC,kBAAC8B,EAAA,EAAD,KAAauC,EAAQlE,UAArB,IAAiCkE,EAAQrC,kBAOjD,kBAACgB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdnD,GAAG,kBAEH,kBAAC8B,EAAA,EAAD,YAAcf,QAAd,IAAcA,OAAd,EAAcA,EAAMxB,QAAQU,KAA5B,kBAEF,kBAACoD,GAAA,EAAD,KACA,kBAACC,GAAA,EAAD,YACGvC,QADH,IACGA,GADH,UACGA,EAAMxB,QAAQ+E,gBADjB,aACG,EAAwBzE,KAAI,SAAA0E,GAAO,OAClC,kBAACd,GAAA,EAAD,CAAU1D,IAAKwE,EAAQvE,IACrB,kBAAC,IAAD,CAAS7C,GAAI,YAAYoH,EAAQvE,IACjC,kBAAC8B,EAAA,EAAD,KAAayC,EAAQpE,UAArB,IAAiCoE,EAAQvC,oBC7FtC,SAASwC,GAAWrI,GAA6B,IAAD,EACtCsE,YAAwC1B,IAAvD4E,EADqD,EACrDA,QAAQ5C,EAD6C,EAC7CA,KACd,OACI,6BACC4C,EACG,0CAEA,kBAAC,WAAD,mBAEA,kBAACL,GAAA,EAAD,KACGvC,GAAQA,EAAKwC,QAAQ1D,KAAI,SAAA2D,GAAM,OAC9B,kBAACC,GAAA,EAAD,CAAU1D,IAAKyD,EAAOxD,GAAI5C,UAAU,eAClC,kBAAC,IAAD,CAASD,GAAI,WAAWqG,EAAOxD,IAA/B,IAAqCwD,EAAOvD,aCG/C,SAASwE,GAAatI,GAA6B,IAAD,EAEzDqH,EAAOrH,EAAMqH,OAF4C,EAGvCpH,mBAASoH,EAAOvD,MAHuB,mBAGxDA,EAHwD,KAGlD4D,EAHkD,OAI3CzH,mBAASoH,EAAOxD,IAJ2B,mBAIxDA,EAJwD,KAIpDO,EAJoD,OAKpCnE,mBAASoH,EAAOjE,QAAQU,MALY,mBAKxDV,EALwD,KAKhDC,EALgD,OAMzCpD,mBAASoH,EAAOkB,cANyB,mBAMxDC,EANwD,KAMnDC,EANmD,KAQzDpE,EAAOC,YAAkC/B,GARgB,EASzBgC,YACpCxB,GACA,CAACyB,UAAU,CAACX,GAAGA,EAAGC,KAAKA,EAAKyE,aAAaC,EAAKpF,QAAQA,KAXO,mBASxDsF,EATwD,YAS1C/D,EAT0C,EAS1CA,MAAOC,EATmC,EASnCA,KAK5B,OACE,6BACA,+CACCD,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAK+D,aAEd,qCAGA,yBAAK1H,UAAU,gBACf,kBAACC,EAAA,EAAD,CACAC,YAAY,wBACZC,MAAM,cACNC,MAAOyC,EACPxC,SAAU,SAAAkC,GAAC,OAAEkE,EAAQlE,EAAEjC,OAAOF,UAE9B,6BACA,kBAACH,EAAA,EAAD,CAAWc,UAAQ,EACnBb,YAAY,kBACZC,MAAM,YACNC,MAAOwC,EACPvC,SAAU,SAAAkC,GAAC,OAAEY,EAAMZ,EAAEjC,OAAOF,UAE5B,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,0BACZC,MAAM,oBACNC,MAAOmH,EACPlH,SAAU,SAAAkC,GAAC,OAAEiF,EAAOG,OAAOpF,EAAEjC,OAAOF,WAEpC,6BArBA,sBAsBoBrB,EAAMqH,OAAOjE,QAAQU,KAEzC,kBAACR,GAAA,EAAD,gBACI,kBAACC,GAAA,EAAD,CAAQlC,MAAO+B,EAAS9B,SAAU,SAACkC,GAAD,OAAKH,EAAWG,EAAEjC,OAAOF,SAC1DgD,EAAOmD,QACA,kBAAC7D,GAAA,EAAD,CAAW3B,UAAQ,GAAnB,eADP,UAGGqC,EAAOO,YAHV,aAGG,EAAazB,SAASO,KAAI,SAAAN,GAAO,OAC7B,kBAACO,GAAA,EAAD,CAAWC,IAAKR,EAAQS,GAAIxC,MAAO+B,EAAQS,IACtCT,EAAQU,UAOzB,6BACA,kBAAClC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAAM8B,GAAMC,GAAQ0E,GAAOpF,GAAWsF,MAAtF,mBC5EW,SAASG,GAAO7I,GAC3BqF,QAAQC,IAAItF,EAAM+H,MAAMC,OAAOnE,IADwB,MAE3B5D,oBAAS,GAFkB,mBAEhD4H,EAFgD,KAExCC,EAFwC,OAG7BxD,YACtBxB,GACA,CAAE0B,UAAW,CAAEsE,SAAU9I,EAAM+H,MAAMC,OAAOnE,MAF/Be,GAHsC,EAG/C4C,QAH+C,EAGtC5C,MAMjB,OACI,kBAAC,WAAD,KACCiD,EACCjD,GAAQ,kBAAC0D,GAAD,CAAcjB,OAAQzC,EAAKyC,SAEnC,kBAAC,WAAD,KAEA,kBAAC1B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,cACchB,GAAQA,EAAKyC,OAAOxD,IAElC,kBAAC8B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,iBACiBhB,GAAQA,EAAKyC,OAAOjE,QAAQU,MAE7C,kBAAC6B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,gBACgBhB,GAAQA,EAAKyC,OAAOvD,MAEpC,kBAAC6B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,aACahB,GAAQA,EAAKyC,OAAOkB,cAZjC,eAgBC3D,GAAQA,EAAKyC,OAAO0B,YAAYrF,KAAI,SAAAsF,GAAU,OAC7C,kBAAC,IAAD,CAAShI,GAAI,YAAYgI,EAAWZ,QAAQvE,IAC5C,kBAACyD,GAAA,EAAD,CAAU1D,IAAKoF,EAAWZ,QAAQvE,IAC/BmF,EAAWZ,QAAQpE,UADtB,IACkCgF,EAAWZ,QAAQvC,cAMvD,kBAACjE,EAAA,EAAD,CAAQG,QAAS,kBAAI+F,GAAWD,KAAhC,YCxCK,SAASoB,GAAYjJ,GAA6B,IAAD,EACvCsE,YACjBrC,GADEuF,EADsD,EACtDA,QAAQ5C,EAD8C,EAC9CA,KAGd,OACI,4CAEK4C,EACG,0CAEA,kBAAC,WAAD,KACC5C,GAAQA,EAAKuD,SAASzE,KAAI,SAAA0E,GAAO,OAC9B,kBAACjB,GAAA,EAAD,CAAMvD,IAAKwE,EAAQvE,GAAI5C,UAAU,gBACjC,kBAAC,IAAD,CAASD,GAAI,YAAYoH,EAAQvE,IAAjC,IAAuCuE,EAAQpE,UAA/C,IAA2DoE,EAAQvC,gB,0BCTxE,SAASqD,GAAclJ,GAA6B,IAAD,MAEhCC,mBAAiB,IAFe,mBAEvDwE,EAFuD,KAE5CpB,EAF4C,OAGrCpD,qBAHqC,mBAGvDoH,EAHuD,KAGhD8B,EAHgD,OAMvC7E,YAA0C/B,GAA1DiF,EANuD,EAMvDA,QAAQ5C,EAN+C,EAM/CA,KAGTP,EAASC,YACXzB,GACA,CAAC2B,UAAU,CAACC,WAAWA,KAXmC,MAsBpC2E,IAAMnJ,SAAS,IAtBqB,6BAqC9D,OACI,6BACCuH,EAED,4CAEA,kBAACtE,GAAD,CAAeC,SAAQ,OAAEyB,QAAF,IAAEA,OAAF,EAAEA,EAAMzB,SAAUM,eA9B7C,SAAwBgB,GACpBpB,EAAWoB,GACXzE,EAAMyD,eAAegB,MAgCrB,6BACA,kBAAClB,GAAA,EAAD,CAAQlC,MAAOgG,EAAQ/F,SAAU,SAAAkC,GAC7B2F,EAAU3F,EAAEjC,OAAOF,OACnBrB,EAAMqJ,cAAc7F,EAAEjC,OAAOF,SAFjC,UAKIgD,EAAOO,YALX,iBAKI,EAAawC,eALjB,aAKI,EAAsB1D,KAAI,SAAA2D,GAAM,OAC5B,kBAAC1D,GAAA,EAAD,CAAWC,IAAKyD,EAAOxD,GAAIxC,MAAOgG,EAAOxD,IACpCwD,EAAOvD,WCzDb,SAASwF,GAAiBtJ,GAA6B,IAAD,EAI7CC,mBAASD,EAAMuJ,YAJ8B,mBAI1D1F,EAJ0D,aAKnC5D,mBAAS,KAL0B,mBAKjDoD,GALiD,aAMrCpD,mBAAS,IAN4B,mBAM1DoH,EAN0D,KAMlD8B,EANkD,KAchE9D,QAAQC,IAAIzB,GAdoD,MAgBzBU,YACpCvB,GACA,CACIwB,UAAU,CAAC+E,WAAWvJ,EAAMuJ,WAAWC,UAAUnC,KAnBQ,mBAgB1DoC,EAhB0D,YAgBxC9E,EAhBwC,EAgBxCA,MAAOC,EAhBiC,EAgBjCA,KAOhC,OACI,6BACA,4CACCD,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAKoE,WAEd,qCAEA,6BACA,kBAACE,GAAD,CAAezF,eAxBnB,SAAwBgB,GACpBpB,EAAWoB,IAuBoC4E,cArBnD,SAAuBG,GACnBL,EAAUK,MAqBV,kBAAC5H,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAC5C8B,GAAMwD,GAAWoC,MADrB,iBCnBO,SAAS1F,GAAO/D,GAC3B,IAAMoI,EAAQpI,EAAMoI,QADmC,EAErBnI,mBAASmI,EAAQpE,WAFI,mBAEhDA,EAFgD,KAErCC,EAFqC,OAGvBhE,mBAASmI,EAAQvC,UAHM,mBAGhD3B,EAHgD,KAGtCC,EAHsC,OAIzBlE,mBAASmI,EAAQhF,QAAQS,IAJA,mBAIhDT,EAJgD,aAKvBnD,mBAASmI,EAAQ9H,WALM,mBAKhDA,EALgD,KAKtCC,EALsC,OAMnCN,mBAASmI,EAAQvE,IANkB,mBAMhDA,EANgD,aAO7B5D,mBAASmI,EAAQhI,QAPY,mBAOhDA,EAPgD,aAQ3BH,oBAAS,IARkB,mBAQhDyJ,EARgD,KAQtCP,EARsC,QAUxC7E,YAA0C/B,GAGzDgC,YACIlC,EACA,CAACmC,UAAU,CACPX,GAAGA,EACHG,UAAUA,EACVE,SAASA,EACT5D,SAASA,EACTmE,WAAWrB,MApBoC,mBAYhDsB,EAZgD,YAYjCC,EAZiC,EAYjCA,MAAOC,EAZ0B,EAY1BA,KAa7B,OACI,6BACA,2CACK8E,EAAU,kBAACJ,GAAD,CAAkBC,WAAY1F,IACzC,6BACKc,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAK+E,cAEd,6BACA,qCACA,kBAAChE,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,eACiBhB,GAAQA,EAAK+E,cAAc9F,IAE5C,kBAAC8B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,iBACmBhB,GAAQA,EAAK+E,cAAc3F,UAD9C,IAC0DY,EAAK+E,cAAc9D,UAE7E,kBAACF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,kBACoBhB,GAAQA,EAAK+E,cAAcvJ,OAE/C,kBAACuF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,WACahB,GAAQA,EAAK+E,cAAc7D,SAIxC,6BAEA,kBAAClE,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAC5CoH,GAAU,KADd,eAIA,6BAEI,kBAACjI,EAAA,EAAD,CACAc,UAAQ,EACRb,YAAY,gBACZC,MAAM,KACNC,MAAOwC,IAEP,6BACA,kBAAC3C,EAAA,EAAD,CACAC,YAAY,wBACZC,MAAM,aACNC,MAAO2C,EACP1C,SAAU,SAAAkC,GACNS,EAAaT,EAAEjC,OAAOF,UAI1B,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,uBACZC,MAAM,YACNC,MAAO6C,EACP5C,SAAU,SAAAkC,GACNW,EAAYX,EAAEjC,OAAOF,UAIzB,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,sBACZO,KAAK,WACLN,MAAM,WACNC,MAAOf,EACPgB,SAAU,SAAAkC,GACNjD,EAAYiD,EAAEjC,OAAOF,UAIzB,6BACA,kBAACH,EAAA,EAAD,CACAc,UAAQ,EACRb,YAAY,mBACZC,MAAM,QACNC,MAAOjB,IAEP,6BAEA,kBAACwB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAC5C8B,GAAMG,GAAaE,GAAY5D,GAAY8C,GAAWsB,MAD1D,kBCjHL,SAASkF,GAAQ5J,GAC5BqF,QAAQC,IAAItF,EAAM+H,MAAMC,OAAOnE,IADyB,MAE5BS,YACxBnC,EACA,CAACqC,UAAU,CAAC+E,WAAWvJ,EAAM+H,MAAMC,OAAOnE,MAFhCe,GAF0C,EAElD4C,QAFkD,EAE1C5C,MAAKiF,EAFqC,EAErCA,QAITC,YAAyBxH,GAC3BkF,SAASqC,IAPuC,MAQhC5J,oBAAS,GARuB,mBAQjD8J,EARiD,KAQ3CC,EAR2C,OAS/B/J,oBAAS,GATsB,mBASjD4H,EATiD,KAS1CC,EAT0C,KAWxD,OACI,6BAEAD,EAECjD,GAAQ,kBAAC,GAAD,CAAewD,QAASxD,EAAKwD,UAGlC,kBAAC,WAAD,KACC/C,QAAQC,IAAIV,GACb,kBAACe,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAChChB,GAAQA,EAAKwD,QAAQpE,UAD1B,IACsCY,GAAQA,EAAKwD,QAAQvC,UAE3D,kBAACF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAChChB,GAAQA,EAAKwD,QAAQhI,OAGzBwE,GAAQA,EAAKwD,QAAQW,YAAYrF,KAAI,SAAAsF,GAAU,OAE5C,kBAAC7B,GAAA,EAAD,KAEI,kBAACG,GAAA,EAAD,CAAU2C,QAAM,EAAClI,QAAS,kBAAKiI,GAASD,KACnCf,EAAW3B,OAAOvD,MAEvB,kBAACoG,GAAA,EAAD,CAAUC,GAAIJ,EAAMK,QAAQ,OAAOC,eAAa,GAC5C,kBAAClD,GAAA,EAAD,KACC6B,EAAW3B,OAAOiD,YAAY5G,KAAI,SAAA6G,GAAG,OAClC,kBAACjD,GAAA,EAAD,KAAYiD,EAAIC,eAShC,kBAAC5I,EAAA,EAAD,CAAQG,QAAS,kBAAI+F,GAAWD,KAAhC,YCrDG,SAAS4C,GAAT,GAAiD,qBACpCxK,mBAAS,IAD0B,mBACpD6D,EADoD,KAC9C4D,EAD8C,OAEvCzH,mBAAS,IAF8B,mBAEpD4D,EAFoD,KAEhDO,EAFgD,OAMpBG,YACnC9B,GACA,CAAC+B,UAAU,CAACX,GAAGA,EAAGC,KAAKA,KARgC,mBAMpD6D,EANoD,YAMrChD,EANqC,EAMrCA,MAAOC,EAN8B,EAM9BA,KAM7B,OACI,6BACA,6CACKD,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAK8F,cACd,qCAEA,yBAAKzJ,UAAU,iBACf,kBAACC,EAAA,EAAD,CACAC,YAAY,yBACZC,MAAM,eACNC,MAAOyC,EACPxC,SAAU,SAAAkC,GAAC,OAAEkE,EAAQlE,EAAEjC,OAAOF,UAE9B,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,mBACZC,MAAM,aACNC,MAAOwC,EACPvC,SAAU,SAAAkC,GAAC,OAAEY,EAAMZ,EAAEjC,OAAOF,UAE5B,6BACA,kBAACO,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAAM8B,GAAMC,GAAS6D,MAArE,oBCvBG,SAAS8C,GAAT,GAAiD,IAAD,uBAEnCxK,mBAAS,IAF0B,mBAEpD6D,EAFoD,KAE9C4D,EAF8C,OAGvCzH,mBAAS,IAH8B,mBAGpD4D,EAHoD,KAGhDO,EAHgD,OAI5BnE,mBAAS,IAJmB,mBAIpDsI,EAJoD,KAItCE,EAJsC,OAK7BxI,mBAAS,IALoB,mBAKpDmD,EALoD,KAK3CC,EAL2C,WAUrBkB,YAClC5B,GACA,CAAC6B,UAAU,CAACX,GAAGA,EAAGC,KAAKA,EAAK0E,IAAII,OAAOL,GAAc9D,WAAWrB,KAZT,mBAUpDsF,EAVoD,YAUtC/D,EAVsC,EAUtCA,MAAOC,EAV+B,EAU/BA,KAKtBP,EAASC,YAA0C/B,GAEzD,OACI,6BACA,4CACCoC,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAK+F,aAEd,qCAEA,8BACA,yBAAK1J,UAAU,gBACf,kBAACC,EAAA,EAAD,CACAC,YAAY,wBACZC,MAAM,cACNC,MAAOyC,EACPxC,SAAU,SAAAkC,GAAC,OAAEkE,EAAQlE,EAAEjC,OAAOF,UAE9B,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,kBACZC,MAAM,YACNC,MAAOwC,EACPvC,SAAU,SAAAkC,GAAC,OAAEY,EAAMZ,EAAEjC,OAAOF,UAE5B,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,0BACZC,MAAM,oBACNC,MAAOkH,EACPjH,SAAU,SAAAkC,GAAC,OAAEiF,EAAOjF,EAAEjC,OAAOF,UAE7B,6BAEA,kBAAC6B,GAAD,CAAeC,SAAQ,UAAEkB,EAAOO,YAAT,aAAE,EAAazB,SAAUM,eA1CpD,SAAwBgB,GACpBpB,EAAWoB,MA2CX,6BACA,kBAAC7C,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAAM8B,GAAMC,GAAQyE,GAAgBnF,GAAWsF,MAA/F,oBC/DO,SAASkC,GAAY5K,GAA6B,IAAD,EACvCsE,YACjBrB,IADEuE,EADsD,EACtDA,QAAQ5C,EAD8C,EAC9CA,KAGd,OACI,4CAEK4C,EACG,0CAEA,kBAAC,WAAD,KACC5C,GAAQA,EAAKqD,UAAUvE,KAAI,SAAAwE,GAAO,OAC/B,kBAACf,GAAA,EAAD,CAAMvD,IAAKsE,EAAQrE,GAAI5C,UAAU,gBACjC,kBAAC,IAAD,CAASD,GAAI,YAAYkH,EAAQrE,IAAjC,IAAuCqE,EAAQlE,UAA/C,IAA2DkE,EAAQrC,gBCGxE,SAAS9B,GAAO/D,GAC3B,IAAMkI,EAAQlI,EAAMkI,QADmC,EAErBjI,mBAASiI,EAAQlE,WAFI,mBAEhDA,EAFgD,KAErCC,EAFqC,OAGvBhE,mBAASiI,EAAQrC,UAHM,mBAGhD3B,EAHgD,KAGtCC,EAHsC,OAIzBlE,mBAASiI,EAAQ9E,QAAQS,IAJA,mBAIhDT,EAJgD,aAKvBnD,mBAASiI,EAAQ5H,WALM,mBAKhDA,EALgD,KAKtCC,EALsC,OAMnCN,mBAASiI,EAAQrE,IANkB,mBAMhDA,EANgD,aAO7B5D,mBAASiI,EAAQ9H,QAPY,mBAOhDA,EAPgD,aAQ3BH,oBAAS,IARkB,mBAQhDyJ,EARgD,KAQtCP,EARsC,QAUxC7E,YAA0C/B,GAGzDgC,YACIlC,EACA,CAACmC,UAAU,CACPX,GAAGA,EACHG,UAAUA,EACVE,SAASA,EACT5D,SAASA,EACTmE,WAAWrB,MApBoC,mBAYhDyH,EAZgD,YAYjClG,EAZiC,EAYjCA,MAAOC,EAZ0B,EAY1BA,KAa7B,OACI,6BACA,2CACK8E,EAAU,kBAACJ,GAAD,CAAkBC,WAAY1F,IACzC,6BACKc,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAKkG,cAEd,6BACA,qCACA,kBAACnF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,eACiBhB,GAAQA,EAAKkG,cAAcjH,IAE5C,kBAAC8B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,iBACmBhB,GAAQA,EAAKkG,cAAc9G,UAD9C,IAC0DY,EAAKkG,cAAcjF,UAE7E,kBAACF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,kBACoBhB,GAAQA,EAAKkG,cAAc1K,OAE/C,kBAACuF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,WACahB,GAAQA,EAAKkG,cAAchF,SAIxC,6BAEA,kBAAClE,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAC5CoH,GAAU,KADd,eAIA,6BAEI,kBAACjI,EAAA,EAAD,CACAc,UAAQ,EACRb,YAAY,gBACZC,MAAM,KACNC,MAAOwC,IAEP,6BACA,kBAAC3C,EAAA,EAAD,CACAC,YAAY,wBACZC,MAAM,aACNC,MAAO2C,EACP1C,SAAU,SAAAkC,GACNS,EAAaT,EAAEjC,OAAOF,UAI1B,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,uBACZC,MAAM,YACNC,MAAO6C,EACP5C,SAAU,SAAAkC,GACNW,EAAYX,EAAEjC,OAAOF,UAIzB,6BACA,kBAACH,EAAA,EAAD,CACAC,YAAY,sBACZO,KAAK,WACLN,MAAM,WACNC,MAAOf,EACPgB,SAAU,SAAAkC,GACNjD,EAAYiD,EAAEjC,OAAOF,UAIzB,6BACA,kBAACH,EAAA,EAAD,CACAc,UAAQ,EACRb,YAAY,mBACZC,MAAM,QACNC,MAAOjB,IAEP,6BAEA,kBAACwB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAC5C8B,GAAMG,GAAaE,GAAY5D,GAAY8C,GAAWyH,MAD1D,kBCjHL,SAASjB,GAAQ5J,GAC5BqF,QAAQC,IAAItF,EAAM+H,MAAMC,OAAOnE,IADyB,MAE5BS,YACxBnC,EACA,CAACqC,UAAU,CAACuG,WAAW/K,EAAM+H,MAAMC,OAAOnE,MAFhCe,GAF0C,EAElD4C,QAFkD,EAE1C5C,MAAKiF,EAFqC,EAErCA,QAITC,YAAyBxH,GAC3BkF,SAASqC,IAPuC,MAQhC5J,oBAAS,GARuB,mBAQjD8J,EARiD,KAQ3CC,EAR2C,OAS/B/J,oBAAS,GATsB,mBASjD4H,EATiD,KAS1CC,EAT0C,KAWxD,OACI,6BAEAD,EAECjD,GAAQ,kBAAC,GAAD,CAAesD,QAAStD,EAAKsD,UAGlC,kBAAC,WAAD,KACC7C,QAAQC,IAAIV,GACb,kBAACe,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAChChB,GAAQA,EAAKsD,QAAQlE,UAD1B,IACsCY,GAAQA,EAAKsD,QAAQrC,UAE3D,kBAACF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAChChB,GAAQA,EAAKsD,QAAQ9H,OAGzBwE,GAAQA,EAAKsD,QAAQ8C,aAAatH,KAAI,SAAAuH,GAAW,OAE9C,kBAAC9D,GAAA,EAAD,KAEI,kBAACG,GAAA,EAAD,CAAU2C,QAAM,EAAClI,QAAS,kBAAKiI,GAASD,KACnCkB,EAAY5D,OAAOvD,MAExB,kBAACoG,GAAA,EAAD,CAAUC,GAAIJ,EAAMK,QAAQ,OAAOC,eAAa,GAC5C,kBAAClD,GAAA,EAAD,KACC8D,EAAY5D,OAAOiD,YAAY5G,KAAI,SAAA6G,GAAG,OACnC,kBAACjD,GAAA,EAAD,KAAYiD,EAAIC,eAShC,kBAAC5I,EAAA,EAAD,CAAQG,QAAS,kBAAI+F,GAAWD,KAAhC,YCjDG,SAASqD,GAAT,GAAiD,IAAD,uBACzBjL,mBAAS,IADgB,mBACpD+D,EADoD,KACzCC,EADyC,OAE3BhE,mBAAS,IAFkB,mBAEpDiE,EAFoD,KAE1CC,EAF0C,OAG7BlE,mBAAS,IAHoB,mBAGpDmD,EAHoD,KAG3CC,EAH2C,OAI3BpD,mBAAS,IAJkB,mBAIpDK,EAJoD,KAI1CC,EAJ0C,OAKvCN,mBAAS,IAL8B,mBAKpD4D,EALoD,KAKhDO,EALgD,OAMjCnE,mBAAS,IANwB,mBAMpDG,EANoD,KAM7CC,EAN6C,KAY3D,IAAMgE,EAASC,YAA0C/B,GAZE,EAe3DgC,YACInC,EACA,CAACoC,UAAU,CACPX,GAAGA,EACHG,UAAUA,EACVE,SAASA,EACT5D,SAASA,EACTF,MAAMA,EACNqE,WAAWrB,KAvBwC,mBAcpDyH,EAdoD,YAcrClG,EAdqC,EAcrCA,MAAOC,EAd8B,EAc9BA,KAavBC,EAAM,SAACC,EAAWC,GACpB,IAAMC,EAAQ,MAAMC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,IAAQA,GAIrE,OAFAV,EAAMY,GACNK,QAAQC,IAAIN,GACLA,GAGLO,EAAS,SAACvB,EAAiBE,EAAgBL,GAE7C,IAAMzD,EAAO4D,EAAU,GACfE,EACAL,EAAG2B,UAAU,GACb,oBAGR,OAFAnF,EAASD,GACTiF,QAAQC,IAAIlF,GACLA,GAEX,OACI,6BACA,2CACKuE,EAAQ,qCAAWA,EAAMc,SAAe,KACxCb,GAAQA,EAAKuG,cAEd,6BACA,qCACA,kBAACxF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,eACiBhB,GAAQA,EAAKuG,cAActH,IAE5C,kBAAC8B,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,iBACmBhB,GAAQA,EAAKuG,cAAcnH,UAD9C,IAC0DY,EAAKuG,cAActF,UAE7E,kBAACF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,kBACoBhB,GAAQA,EAAKuG,cAAc/K,OAE/C,kBAACuF,EAAA,EAAD,CAAY7D,QAAQ,KAAK8D,cAAY,GAArC,WACahB,GAAQA,EAAKuG,cAAcrF,SAIxC,6BACI,8BACA,kBAAC5E,EAAA,EAAD,CACIC,YAAY,wBACZC,MAAM,aACNC,MAAO2C,EACP1C,SAAU,SAAAkC,GACNS,EAAaT,EAAEjC,OAAOF,OACtBkE,EAASvB,EAAUE,EAASW,EAAM,KAAK,UAG/C,6BACA,kBAAC3D,EAAA,EAAD,CACAC,YAAY,uBACZC,MAAM,YACNC,MAAO6C,EACP5C,SAAU,SAAAkC,GACNW,EAAYX,EAAEjC,OAAOF,OACrBkE,EAASvB,EAAUE,EAASW,EAAM,KAAK,UAG3C,6BACA,kBAAC3D,EAAA,EAAD,CACAC,YAAY,sBACZO,KAAK,WACLN,MAAM,WACNC,MAAOf,EACPgB,SAAU,SAAAkC,GACNjD,EAAYiD,EAAEjC,OAAOF,OACrBkE,EAASvB,EAAUE,EAASW,EAAM,KAAK,UAG3C,6BACA,kBAAC3B,GAAD,CAAeC,SAAQ,UAAEkB,EAAOO,YAAT,aAAE,EAAazB,SAAUM,eA5F5D,SAAwBgB,GACpBpB,EAAWoB,MA4FH,6BACA,kBAAC7C,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,OAAOC,QAAS,kBAC5C8B,GAAMG,GAAaE,GAAY9D,GAASgD,GAAWyH,MADvD,UCvGT,IAAMO,GAA8C,SAACC,GAAD,OACzD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAI,UAAKC,UAAL,KAAgCC,OAAK,EAACC,OAAQ,SAACzL,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAWqL,OACzF,kBAAC,IAAD,CAAOC,KAAI,UAAKC,UAAL,WAAsCC,OAAK,EAACC,OAAQ,SAACzL,GAAD,OAAW,kBAAC+D,GAAD,iBAAY/D,EAAWqL,OACjG,kBAAC,IAAD,CAAOC,KAAI,UAAKC,UAAL,UAAqCC,OAAK,EAACC,OAAQ,SAACzL,GAAD,OAAW,kBAACD,EAAD,iBAAWC,EAAWqL,OAE/F,kBAAC,IAAD,CAAOC,KAAI,UAAKC,UAAL,mBAA8CC,OAAK,EAACE,UAAWjB,KAC1E,kBAAC,IAAD,CAAOa,KAAI,UAAKC,UAAL,kBAA6CC,OAAK,EAACE,UAAWC,KACzE,kBAAC,IAAD,CAAOL,KAAI,UAAKC,UAAL,mBAA8CC,OAAK,EAACE,UAAWR,KAC1E,kBAAC,IAAD,CAAOI,KAAI,UAAKC,UAAL,mBAA8CC,OAAK,EAACE,UAAW3H,KAE1E,kBAAC,IAAD,CAAOuH,KAAI,UAAKC,UAAL,aAAwCC,OAAK,EAACE,UAAWnE,KACpE,kBAAC,IAAD,CAAO+D,KAAI,UAAKC,UAAL,YAAuCC,OAAK,EAACE,UAAWrD,KACnE,kBAAC,IAAD,CAAOiD,KAAI,UAAKC,UAAL,cAAyCC,OAAK,EAACE,UAAWd,KACrE,kBAAC,IAAD,CAAOU,KAAI,UAAKC,UAAL,aAAwCC,OAAK,EAACE,UAAWzC,KAEpE,kBAAC,IAAD,CAAOqC,KAAI,UAAKC,UAAL,gBAA2CC,OAAK,EAACE,UAAWE,KACvE,kBAAC,IAAD,CAAON,KAAI,UAAKC,UAAL,eAA0CC,OAAK,EAACE,UAAW7C,KACtE,kBAAC,IAAD,CAAOyC,KAAI,UAAKC,UAAL,gBAA2CC,OAAK,EAACE,UAAWG,KACvE,kBAAC,IAAD,CAAOP,KAAI,UAAKC,UAAL,gBAA2CC,OAAK,EAACE,UAAW9B,KAEvE,kBAAC,IAAD,CAAO0B,KAAI,UAAKC,UAAL,MAAX,e,wDCrCEO,GAAW,IAAIC,KAAS,CAC5BC,IAAK,oDAIDC,GAAS,IAAIC,KAAc,CAC/BF,IAAK,gDACLG,QAAS,CACPC,WAAW,KAMTC,GAAOC,cAEX,YAAgB,IAAbC,EAAY,EAAZA,MACKC,EAAaC,aAAkBF,GACrC,MACsB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGfV,GACAH,IASac,GALF,IAAIC,KAAa,CAC1BR,QACAS,MAAO,IAAIC,O,WCkLAC,G,kDAtKb,WAAYhN,GAAkB,IAAD,8BAC3B,cAAMA,IAwBRiN,qBAAuB,SAACC,GACtB,EAAKC,SAAS,CAAEC,gBAAiBF,KA1BN,EA6B7BG,aA7B6B,sBA6Bd,sBAAAvM,EAAA,sDAGb,EAAKmM,sBAAqB,GAC1B,EAAKjN,MAAMsN,QAAQC,KAAK,UAJX,2CA7Bc,EAoC7BC,aAAe,SAAC3M,EAAW4M,GACzB,EAAKN,SAAS,CAAC9L,MAAMoM,KArCM,EAyC7BC,gBAAkB,kBAChB,kBAAC,WAAD,KACA,kBAACC,EAAA,EAAD,CAAaC,aAAW,cAwBtB,kBAAC,IAAD,CAAS5M,GAAE,UAAKuK,UAAL,MAAX,QAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,cAAX,YAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,aAAX,WAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,cAAX,YAKA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,eAAX,aAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,oBAAX,eAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,mBAAX,cAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,oBAAX,eAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,oBAAX,kBApGyB,EA2G7BsC,iBAAmB,kBACjB,kBAAC,WAAD,KACA,kBAACF,EAAA,EAAD,CAAaC,aAAW,cACtB,kBAAC,IAAD,CAAS5M,GAAE,UAAKuK,UAAL,MAAX,QAIA,kBAAC,IAAD,CAASvK,GAAE,UAAKuK,UAAL,WAAX,YA/GF,EAAK3L,MAAQ,CACXwN,iBAAiB,EACjBU,kBAAkB,EAClBzM,MAAM,GAGR0M,SAASC,MAAQ,iBATU,E,0KAuB3BC,KAAKd,SAAS,CAAEW,kBAAkB,I,qIA+HlC,IAAMzC,EAAa,CACjB+B,gBAAiBa,KAAKrO,MAAMwN,gBAC5BH,qBAAsBgB,KAAKhB,sBAE7B,OACE,kBAAC,IAAD,CAAgBL,OAAQA,IACxB,6BACGqB,KAAKrO,MAAMwN,gBAAkBa,KAAKP,kBAAoBO,KAAKJ,mBAC5D,kBAAC,GAAD,CAAQT,gBAAiB/B,EAAW+B,gBAAiBH,qBAAsB5B,EAAW4B,6B,GA/J5EpN,aCzClBqO,IAASzC,OACP,kBAAC,IAAD,KACA,kBAAC,IAAM0C,WAAP,KACE,kBAAC,GAAD,QAGFJ,SAASK,eAAe,U","file":"static/js/main.c59a3612.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface State {\r\n    \r\n}\r\n\r\nexport default class Home extends Component<Props, State> {\r\n    state = {}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Welcome\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport { Redirect } from 'react-router-dom';\r\n// import { FormGroup, FormControl, ControlLabel, Button, Glyphicon } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport React, { ReactElement, ReactComponentElement, useState } from 'react'\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\ninterface LoginProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\ninterface LoginState {\r\n  loading: boolean;\r\n  redirect: boolean;\r\n  email: string;\r\n  password: string;\r\n  emailValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n  passwordValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n}\r\n\r\nexport default function Login(props:LoginProps): ReactElement <LoginProps>  {\r\n\r\n    const [loading,setLoading]=useState(false);\r\n    const [redirect, setReirect] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [emailValid, setEmailValid] = useState<string>();\r\n    const [passwordValid,setPasswrodValid] =useState<string>();\r\n\r\n\r\n  const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setEmail(target.value)\r\n    setEmailValid(emailRegex.test(target.value.toLowerCase()) ? 'success' : 'error')\r\n  }\r\n\r\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setPassword(target.value);\r\n    setPasswrodValid(target.value.length < 8 ? 'error' : 'success')\r\n    \r\n  }\r\n\r\n  const onLogin = async (event: React.MouseEvent<HTMLButtonElement,MouseEvent>) => {\r\n    event.preventDefault();\r\n    setLoading( true );\r\n\r\n    // try {\r\n    //   await Auth.signIn(email, password);\r\n    //   props.userHasAuthenticated(true);\r\n    //   setReirect(true )\r\n    // } catch (e) {\r\n    //   alert(e.message);\r\n    //   setLoading(false);\r\n    // }\r\n  }\r\n\r\n\r\n    return (\r\n      <div>\r\n      {redirect\r\n        ?\r\n      <Redirect to='/' />\r\n        :\r\n      <div className=\"Login\">\r\n        <div>\r\n           <TextField\r\n             placeholder=\"Enter your Username\"\r\n             label=\"Username\"\r\n             value={email}\r\n             onChange={onEmailChange}\r\n             />\r\n           <br/>\r\n            <TextField\r\n            type=\"password\"\r\n            placeholder=\"Enter your Password\"\r\n            label=\"Password\"\r\n            value={password}\r\n            onChange={onPasswordChange}\r\n            />\r\n           <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={onLogin}\r\n            disabled={passwordValid !== 'success' || emailValid !== 'success' }>Log in</Button>\r\n         </div>\r\n      </div>\r\n\r\n      }\r\n    </div>\r\n    );\r\n  \r\n}\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_STUDENTS = gql`\r\n{\r\n  students{\r\n    id\r\n    firstName\r\n    LastName\r\n  }\r\n}\r\n`;\r\nexport const GET_STUDENT=gql`\r\n    query GET_STUDENT($student_id:ID){\r\n    student(where:{id:$student_id}){\r\n        id\r\n        firstName\r\n        LastName\r\n        email\r\n        status\r\n        program{\r\n            id\r\n            name\r\n        }\r\n        enrollments{\r\n            id\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    time\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n  }\r\n`;\r\nexport const CREATE_STUDENT=gql`\r\n    mutation CREATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createStudent(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"full-time\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const UPDATE_STUDENT=gql`\r\n    mutation UPDATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateStudent(\r\n            where:{id:$id},\r\n            data:{\r\n                firstName:$firstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"full-time\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nexport const GET_ATTENDANCE=gql`\r\n    subscription GET_ATTENDANCE{\r\n        attendance{\r\n            mutation\r\n            node{\r\n                time\r\n                student{\r\n                    id\r\n                    firstName\r\n                    enrollments{\r\n                        course{\r\n                            attendances{\r\n                                time\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n`;\r\n\r\n\r\nexport const GET_PROGRAMS = gql`\r\n{\r\n  programs(orderBy:name_ASC) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const GET_PROGRAM = gql`\r\nquery GET_PROGRAM($id:ID){\r\n  program(where:{id:$id}){\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATE_PROGRAM=gql`\r\n    mutation CREATE_PROGRAM($id:ID!,$name:String!){\r\n        createProgram(data:{\r\n            id:$id\r\n            name:$name\r\n        }){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_PROGRAM=gql`\r\n    mutation UPDATE_PROGRAM($id:ID!,$name:String!){\r\n        updateProgram(where:{id:$id},\r\n            data:{name:$name}\r\n        ){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nexport const CREATE_COURSE=gql`\r\n    mutation CREATE_COURSE($id:ID!,$name:String!,$NOS:Int!,$program_id:ID){\r\n        createCourse(data:{\r\n            id:$id\r\n            name:$name\r\n            numOfStudent:$NOS\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            name\r\n            numOfStudent\r\n            program{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const GET_COURSES = gql`\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSES_BY_PROGRAM_ID = gql`\r\n  query GET_COURSES_BY_PROGRAM_ID($program_id:ID)\r\n  {\r\n    courses(where:{\r\n        program:{\r\n            id:$program_id\r\n        }\r\n    }){\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSE = gql`\r\n  query Get_COURSE($coure_id: ID!) {\r\n    course(where: {id:$coure_id}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          firstName\r\n          LastName\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const UPDATE_COURSE=gql`\r\n    mutation UPDATE_COURSE($id:ID!,$name:String!,$NOS:Int,$program:ID){\r\n        updateCourse(where:{id:$id},\r\n            data:{\r\n                name:$name\r\n                numOfStudent:$NOS\r\n                program:{\r\n                    connect:{\r\n                        id:$program\r\n                    }\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            name\r\n            numOfStudent\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_ENROLLMENT=gql`\r\n    mutation CREATE_ENROLLMENT($student_id:ID,$course_id:ID){\r\n        createEnrollment(data:{\r\n            student:{\r\n                connect:{\r\n                    id:$student_id\r\n                }\r\n            }\r\n            course:{\r\n                connect:{\r\n                    id:$course_id\r\n                }\r\n            }\r\n        }){\r\n            student{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n`;\r\n\r\n\r\nexport const GET_FACULTIES=gql`\r\n    query{\r\n        faculties{\r\n            id\r\n            firstName\r\n            LastName\r\n        }\r\n    }\r\n`;\r\nexport const  GET_FACULTY=gql`\r\n    query($id:ID){\r\n        faculty{\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            instructings{\r\n                id\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n`;","import React, { ReactElement, useState } from 'react'\r\nimport { Select, MenuItem, InputLabel } from '@material-ui/core'\r\nimport { ProgramType } from '../Interfaces'\r\n\r\ninterface Props {\r\n    programs:ProgramType[]|undefined\r\n    onProgramClick:any\r\n}\r\n\r\nexport default function SelectProgram(props: Props): ReactElement {\r\n\r\n    const programs=props.programs;\r\n    const [program,setProgram]=useState<string>();\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n        <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={e=>{\r\n            setProgram(e.target.value as string)\r\n            props.onProgramClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            programs?.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_STUDENT } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    createStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\nexport default function Signup({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        CREATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"999\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        \r\n        setID(user_id)\r\n        console.log(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                id.substring(3)+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n        console.log(email)\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Sign Up</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createStudent \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.createStudent.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student name: {data && data.createStudent.firstName} {data.createStudent.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student Email: {data && data.createStudent.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.createStudent.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    \r\n                    id && firstName && lastName && email && program && saveStudent()}>\r\n                    Sign Up\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  }),\r\n);\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={props.program.id}\r\n      >\r\n        <Typography className={classes.heading}>{props.program.name}</Typography>\r\n        <Button href={`/program/`+props.program.id}>detail</Button>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        \r\n        {props.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n        \r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport Program from './Program'\r\nimport {List,ListItem,Collapse,Typography} from '@material-ui/core';\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport {GET_PROGRAMS} from '../Query'\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface Props {\r\n    \r\n}\r\nexport default function ProgramList({}: Props): ReactElement {\r\n\r\n    const { loading, data } = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    return (\r\n        <Fragment>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            <List>\r\n            {data && data.programs.map(program => (\r\n                <ListItem key={program.id} className=\"program-list\"> <Program program={program}/> </ListItem>\r\n\r\n            ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {UPDATE_PROGRAM}from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    updateProgram: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateProgram(props: Props): ReactElement {\r\n\r\n  \r\n  const [name, setName] = useState(props.program.name)\r\n  const [id, setID] = useState(props.program.id)\r\n\r\n  const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n    UPDATE_PROGRAM,\r\n    {variables:{id:id,name:name}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Program</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.updateProgram ? \r\n            <p>Saved!</p> : \r\n\r\n\r\n    <div className=\"CreateProgram\">\r\n    <TextField\r\n    placeholder=\"Enter the Program name\"\r\n    label=\"Program Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter program ID\"\r\n    label=\"Program ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n        Update Program\r\n    </Button>\r\n    </div>\r\n\r\n\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {GET_PROGRAM} from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\nimport UpdateProgram from './UpdateProgram';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n  const { loading, data } = useQuery<ProgramData, ProgramVars>(\r\n    GET_PROGRAM,\r\n    { variables: { id: props.match.params.id } }\r\n  );\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    {update?\r\n      <div>\r\n      {data&&<UpdateProgram program={data.program}/>}\r\n      </div>:\r\n    \r\n    \r\n      <div>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program ID: {data && data?.program.id}\r\n    </Typography>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program name: {data && data?.program.name}\r\n    </Typography>\r\n\r\n    <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Course List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel2a-content\"\r\n        id=\"panel2a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Faculty List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.faculties?.map(faculty=>(\r\n          <ListItem key={faculty.id}>\r\n            <NavLink to={\"/faculty/\"+faculty.id}>\r\n            <Typography>{faculty.firstName} {faculty.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel3a-content\"\r\n        id=\"panel3a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Student List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.students?.map(student=>(\r\n          <ListItem key={student.id}>\r\n            <NavLink to={\"/student/\"+student.id}>\r\n            <Typography>{student.firstName} {student.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    \r\n    </div>\r\n    }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { CourseType } from '../Interfaces'\r\nimport gql from 'graphql-tag';\r\nimport Course from './Course';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem} from '@material-ui/core';\r\nimport {GET_COURSES} from '../Query'\r\ninterface CourseListData {\r\n    courses: CourseType[];\r\n}\r\n  \r\ninterface CourseListVars {\r\n\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function CourseList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<CourseListData,CourseListVars>(GET_COURSES);\r\n    return (\r\n        <div>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            course list\r\n            <List>\r\n              {data && data.courses.map(course => (\r\n                <ListItem key={course.id} className=\"course-list\"> \r\n                  <NavLink to={\"/course/\"+course.id}> {course.name}</NavLink>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button, InputLabel, MenuItem, Select} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType, CourseType} from '../Interfaces'\r\nimport {UPDATE_COURSE, GET_PROGRAMS}from '../Query'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface CourseData {\r\n    updateCourse: CourseType;\r\n}\r\n  \r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    numOfStudent:number\r\n    program:string\r\n}\r\ninterface ProgramData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramVars {\r\n\r\n}\r\ninterface Props {\r\n    course:CourseType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateCourse(props: Props): ReactElement {\r\n\r\n  const course=props.course\r\n  const [name, setName] = useState(course.name)\r\n  const [id, setID] = useState(course.id)\r\n  const [program,setProgram]=useState(course.program.name)\r\n  const [NOS, setNOS] = useState(course.numOfStudent)\r\n\r\n  const result=useQuery<ProgramData,ProgramVars>(GET_PROGRAMS)\r\n  const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n    UPDATE_COURSE,\r\n    {variables:{id:id,name:name,numOfStudent:NOS, program:program}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Course</h3>\r\n    {error ? <p>Oh no! {error.message}</p> : null}\r\n    {data && data.updateCourse \r\n        ? \r\n    <p>Saved!</p> \r\n        : \r\n\r\n    <div className=\"UpdateCourse\">\r\n    <TextField\r\n    placeholder=\"Enter the Course name\"\r\n    label=\"Course Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter Course ID\"\r\n    label=\"Course ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField \r\n    placeholder=\"Enter Number of Student\"\r\n    label=\"Number of Student\"\r\n    value={NOS}\r\n    onChange={e=>setNOS(Number(e.target.value))}\r\n    />\r\n    <br/>\r\n    Current program is {props.course.program.name}\r\n\r\n    <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={(e)=>setProgram(e.target.value as string)}>\r\n        {result.loading?(\r\n                <MenuItem  disabled>loading....</MenuItem >\r\n        ):(\r\n            result.data?.programs.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        )}\r\n        </Select>\r\n\r\n\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name && NOS && program && saveCourse()}>\r\n        Update Course\r\n    </Button>\r\n    </div>\r\n\r\n\r\n    }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { CourseType } from '../Interfaces';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport {GET_COURSE} from '../Query'\r\nimport UpdateCourse from './UpdateCourse';\r\n\r\n\r\ninterface CourseData{\r\n    course:CourseType\r\n}\r\ninterface CourseVars{\r\n    coure_id:string\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\nexport default function Course(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const [update, setUpdate] = useState(false);\r\n    const { loading, data } = useQuery<CourseData, CourseVars>(\r\n        GET_COURSE,\r\n        { variables: { coure_id: props.match.params.id } }\r\n      );\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        {update ? (\r\n          data && <UpdateCourse course={data.course}></UpdateCourse>\r\n        ) : (\r\n          <Fragment>\r\n          \r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course ID: {data && data.course.id}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Program name: {data && data.course.program.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course name: {data && data.course.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Students: {data && data.course.numOfStudent}\r\n          </Typography>\r\n          \r\n          Student List\r\n          {data && data.course.enrollments.map(enrollment=>(\r\n            <NavLink to={\"/student/\"+enrollment.student.id}>\r\n            <ListItem key={enrollment.student.id}>\r\n              {enrollment.student.firstName} {enrollment.student.LastName}\r\n            </ListItem>\r\n            </NavLink>\r\n          ))} \r\n          \r\n\r\n          <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n          </Fragment>\r\n\r\n        )}\r\n        \r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType } from '../Interfaces';\r\nimport { GET_STUDENTS } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface StudentListData {\r\n    students: StudentType[];\r\n}\r\n  \r\ninterface StudentListVars {\r\n    student_id:string;\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function StudentList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<StudentListData,StudentListVars>(\r\n        GET_STUDENTS\r\n    );\r\n    return (\r\n        <div>\r\n            Student list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.students.map(student => (\r\n                    <List key={student.id} className=\"student-list\"> \r\n                    <NavLink to={\"/student/\"+student.id}> {student.firstName} {student.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, ChangeEvent } from 'react'\r\nimport { Select, MenuItem, InputLabel, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport {  CourseType, ProgramType } from '../Interfaces'\r\nimport SelectProgram from './SelectProgram';\r\nimport { GET_PROGRAMS, GET_COURSES_BY_PROGRAM_ID } from '../Query';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\ninterface Props {\r\n    onProgramClick:any\r\n    onCourseClick:any\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface CourseData{\r\n    courses:CourseType[]|undefined\r\n}\r\ninterface CourseVars{\r\n    program_id:string\r\n}\r\ninterface ProgramListVars {\r\n\r\n}\r\nexport default function SelectCourses(props: Props): ReactElement {\r\n\r\n    const [program_id,setProgram]=useState<string>(\"\");\r\n    const [course,setCourse]=useState<string>();\r\n    \r\n\r\n    const {loading,data} = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n\r\n    const result = useQuery<CourseData,CourseVars>(\r\n        GET_COURSES_BY_PROGRAM_ID,\r\n        {variables:{program_id:program_id}}\r\n    );\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n        props.onProgramClick(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n        props.onCourseClick(course_id)\r\n    }\r\n\r\n    const [state, setState] = React.useState({});\r\n    const handleChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n\r\n        let selected:string[]=[];\r\n    \r\n        for (let [key, value] of Object.entries(state)) {\r\n            console.log(key, value);\r\n            if(value) selected.push(key)\r\n        }\r\n        props.onCourseClick(selected)\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {loading\r\n            ?\r\n        <div>loading....</div>\r\n            :\r\n        <SelectProgram programs={data?.programs} onProgramClick={onProgramClick}/>\r\n        }\r\n        \r\n\r\n        <br/>\r\n        <Select value={course} onChange={e=>{\r\n            setCourse(e.target.value as string)\r\n            props.onCourseClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            result.data?.courses?.map(course=>(\r\n                <MenuItem  key={course.id} value={course.id}>\r\n                    {course.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS, CREATE_ENROLLMENT} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    student_id:string\r\n\r\n}\r\n\r\n\r\ninterface EnrollmentData{\r\n    enrollment:EnrollmentType\r\n}\r\ninterface EnrollmentVars{\r\n\r\n}\r\n\r\nexport default function CreateEnrollment(props: Props): ReactElement {\r\n\r\n\r\n\r\n    const [id, setID] = useState(props.student_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n    {console.log(id)}\r\n\r\n    const [saveEnrollment, { error, data }]=useMutation<EnrollmentData,EnrollmentVars>(\r\n        CREATE_ENROLLMENT,\r\n        {\r\n            variables:{student_id:props.student_id,course_id:course}\r\n        }\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.enrollment \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveEnrollment() }>\r\n            Update User\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    student:StudentType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    updateStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const student=props.student\r\n    const [firstName, setFirstName] = useState(student.firstName)\r\n    const [lastName, setLastName] = useState(student.LastName)\r\n    const [program, setProgram] = useState(student.program.id)\r\n    const [password, setPassword] = useState(student.password)\r\n    const [id, setID] = useState(student.id)\r\n    const [email, setEmail] = useState(student.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateStudent \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateStudent.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateStudent.firstName} {data.updateStudent.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateStudent.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateStudent.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveStudent() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateStudent from './UpdateStudent'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_STUDENT } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface StudentData{\r\n    student:StudentType;\r\n}\r\ninterface StudentVars{\r\n    student_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<StudentData,StudentVars>(\r\n        GET_STUDENT,\r\n        {variables:{student_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateStudent student={data.student}></UpdateStudent>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            {console.log(data)}\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.student.firstName} {data && data.student.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.student.email}\r\n            </Typography>\r\n            \r\n            {data && data.student.enrollments.map(enrollment=>(\r\n                \r\n                <List>\r\n                \r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {enrollment.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {enrollment.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation  } from '@apollo/react-hooks';\r\n\r\nimport {ProgramType} from '../Interfaces'\r\nimport {CREATE_PROGRAM} from '../Query'\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramData{\r\n    createProgram:ProgramType\r\n}\r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n\r\n    \r\n\r\n    const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n        CREATE_PROGRAM,\r\n        {variables:{id:id,name:name}}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Program</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createProgram ? \r\n            <p>Saved!</p> : \r\n         \r\n            <div className=\"CreateProgram\">\r\n            <TextField\r\n            placeholder=\"Enter the Program name\"\r\n            label=\"Program Name\"\r\n            value={name}\r\n            onChange={e=>setName(e.target.value)}\r\n            />\r\n            <br/>\r\n            <TextField\r\n            placeholder=\"Enter program ID\"\r\n            label=\"Program ID\"\r\n            value={id}\r\n            onChange={e=>setID(e.target.value)}\r\n            />\r\n            <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n                Create Program\r\n            </Button>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\n\r\ninterface CourseData{\r\n    createCourse:CourseType\r\n}\r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    NOS:number;\r\n    program_id:string\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [numOfStudent, setNOS] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    \r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n        CREATE_COURSE,\r\n        {variables:{id:id,name:name,NOS:Number(numOfStudent),program_id:program}}\r\n    )\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.createCourse \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <form>\r\n        <div className=\"CreateCourse\">\r\n        <TextField\r\n        placeholder=\"Enter the course name\"\r\n        label=\"Course Name\"\r\n        value={name}\r\n        onChange={e=>setName(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter course ID\"\r\n        label=\"Course ID\"\r\n        value={id}\r\n        onChange={e=>setID(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter number of student\"\r\n        label=\"Number of student\"\r\n        value={numOfStudent}\r\n        onChange={e=>setNOS(e.target.value)}\r\n        />\r\n        <br/>\r\n       \r\n        <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n \r\n        <br/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => id && name && numOfStudent && program && saveCourse()}>\r\n            Create Course\r\n        </Button>\r\n        </div>\r\n        </form>\r\n        \r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_FACULTIES } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface FacultyListData {\r\n    faculties: FacultyType[];\r\n}\r\n  \r\ninterface FacultyListVars {\r\n    faculty_id:string;\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function FacultyList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<FacultyListData,FacultyListVars>(\r\n        GET_FACULTIES\r\n    );\r\n    return (\r\n        <div>\r\n            Faculty list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.faculties.map(faculty => (\r\n                    <List key={faculty.id} className=\"student-list\"> \r\n                    <NavLink to={\"/faculty/\"+faculty.id}> {faculty.firstName} {faculty.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    faculty:FacultyType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    updateFaculty: FacultyType;\r\n}\r\n  \r\ninterface FacultyVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const faculty=props.faculty\r\n    const [firstName, setFirstName] = useState(faculty.firstName)\r\n    const [lastName, setLastName] = useState(faculty.LastName)\r\n    const [program, setProgram] = useState(faculty.program.id)\r\n    const [password, setPassword] = useState(faculty.password)\r\n    const [id, setID] = useState(faculty.id)\r\n    const [email, setEmail] = useState(faculty.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData,FacultyVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateFaculty \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateFaculty.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateFaculty.firstName} {data.updateFaculty.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateFaculty.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateFaculty.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveFaculty() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload, FacultyType } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateFaculty from './UpdateFaculty'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_STUDENT } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface FacultyData{\r\n    faculty:FacultyType;\r\n}\r\ninterface FacultyVars{\r\n    faculty_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<FacultyData,FacultyVars>(\r\n        GET_STUDENT,\r\n        {variables:{faculty_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateFaculty faculty={data.faculty}></UpdateFaculty>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            {console.log(data)}\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.faculty.firstName} {data && data.faculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.faculty.email}\r\n            </Typography>\r\n            \r\n            {data && data.faculty.instructings.map(instructing=>(\r\n                \r\n                <List>\r\n                \r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {instructing.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {instructing.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_STUDENT } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    createFaculty: FacultyType;\r\n}\r\n  \r\n\r\n\r\nexport default function CreateFaculty({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData>(\r\n        CREATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"999\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        \r\n        setID(user_id)\r\n        console.log(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                id.substring(3)+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n        console.log(email)\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Add Faculty</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createFaculty \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.createFaculty.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student name: {data && data.createFaculty.firstName} {data.createFaculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student Email: {data && data.createFaculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.createFaculty.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    id && firstName && lastName && email && program && saveFaculty()}>\r\n                    Add\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./component/signup/Home\";\r\nimport Login from \"./component/signup/Login\";\r\nimport Signup from \"./component/signup/Signup\";\r\nimport ProgramList from \"./component/programs/ProgramList\";\r\nimport ProgramDetail from \"./component/programs/ProgramDetail\";\r\nimport CourseList from \"./component/courses/CourseList\";\r\nimport Course from \"./component/courses/Course\";\r\nimport StudentList from \"./component/students/StudentList\";\r\nimport Student from \"./component/students/Student\";\r\nimport CreateProgram from \"./component/programs/CreateProgram\";\r\nimport CreateCourse from \"./component/courses/CreateCourse\";\r\nimport UpdateProgram from \"./component/programs/UpdateProgram\";\r\nimport Enrollment from \"./component/enrollment/Enrollment\";\r\nimport FacultyList from \"./component/faculties/FacultyList\";\r\nimport Faculty from \"./component/faculties/Faculty\";\r\nimport CreateFaculty from \"./component/faculties/CreateFaculty\";\r\ninterface RouteProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nexport const Routes: React.FunctionComponent<RouteProps> = (childProps) =>\r\n  <Switch>\r\n    <Route path={`${process.env.PUBLIC_URL}/`} exact render={(props) => <Home {...props} {...childProps} />}/>\r\n    <Route path={`${process.env.PUBLIC_URL}/signup`} exact render={(props) => <Signup {...props} {...childProps} />}/>\r\n    <Route path={`${process.env.PUBLIC_URL}/login`} exact render={(props) => <Login {...props} {...childProps} />}/>\r\n\r\n    <Route path={`${process.env.PUBLIC_URL}/create/program`} exact component={CreateProgram} />\r\n    <Route path={`${process.env.PUBLIC_URL}/create/course`} exact component={CreateCourse} />\r\n    <Route path={`${process.env.PUBLIC_URL}/create/faculty`} exact component={CreateFaculty} />\r\n    <Route path={`${process.env.PUBLIC_URL}/create/student`} exact component={Signup} />\r\n\r\n    <Route path={`${process.env.PUBLIC_URL}/programs`} exact component={ProgramList} />\r\n    <Route path={`${process.env.PUBLIC_URL}/courses`} exact component={CourseList} />\r\n    <Route path={`${process.env.PUBLIC_URL}/faculties`} exact component={FacultyList} />\r\n    <Route path={`${process.env.PUBLIC_URL}/students`} exact component={StudentList} />\r\n\r\n    <Route path={`${process.env.PUBLIC_URL}/program/:id`} exact component={ProgramDetail} />\r\n    <Route path={`${process.env.PUBLIC_URL}/course/:id`} exact component={Course} />\r\n    <Route path={`${process.env.PUBLIC_URL}/faculty/:id`} exact component={Faculty} />\r\n    <Route path={`${process.env.PUBLIC_URL}/student/:id`} exact component={Student} />\r\n\r\n    <Route path={`${process.env.PUBLIC_URL}/`} >Not Found</Route>\r\n  </Switch>;","import { split } from 'apollo-link';\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink,createHttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { ApolloClient } from \"apollo-client\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://murmuring-fortress-24950.herokuapp.com/'\r\n});\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://murmuring-fortress-24950.herokuapp.com/',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n  \r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n  \r\n\r\nconst client=new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache()\r\n  })\r\n\r\nexport default client","import React ,{Component,Fragment}from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs } from '@material-ui/core'\r\nimport {LockOpen,Person,Loyalty,Subject} from '@material-ui/icons'\r\nimport PropTypes from 'prop-types';\r\nimport { Routes } from \"./Routes\";\r\nimport client from './Client'\r\nimport Login from './component/signup/Login'\r\nimport ProgramList from './component/programs/ProgramList'\r\nimport './App.css';\r\n\r\n\r\ninterface AppProps {\r\n  history: any;\r\n}\r\n\r\ninterface AppState {\r\n  isAuthenticated: boolean;\r\n  isAuthenticating: boolean;\r\n  value:number;\r\n}\r\n\r\n\r\n\r\nfunction TabPanel(props:any) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      <Box p={3}>{children}</Box>\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nclass App extends Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n  \r\n    this.state = {\r\n      isAuthenticated: true,\r\n      isAuthenticating: true,\r\n      value:0\r\n    };\r\n\r\n    document.title = \"Pi-Client Demo\"\r\n  }\r\n  async componentDidMount() {\r\n    // try {\r\n    //   if (await Auth.currentSession()) {\r\n    //     this.userHasAuthenticated(true);\r\n    //   }\r\n    // }\r\n    // catch(e) {\r\n    //   if (e !== 'No current user') {\r\n    //     alert(e);\r\n    //   }\r\n    // }\r\n  \r\n    this.setState({ isAuthenticating: false });\r\n  }\r\n  userHasAuthenticated = (authenticated: boolean) => {\r\n    this.setState({ isAuthenticated: authenticated });\r\n  }\r\n\r\n  handleLogout = async () => {\r\n    // await Auth.signOut();\r\n  \r\n    this.userHasAuthenticated(false);\r\n    this.props.history.push(\"/login\");\r\n  }\r\n\r\n  handleChange = (event:any, newValue:number) => {\r\n    this.setState({value:newValue});\r\n  };\r\n\r\n\r\n  showLoggedInBar = () => (\r\n    <Fragment>\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n    {/*\r\n      <AppBar position=\"static\">\r\n        <Tabs centered value={this.state.value} onChange={this.handleChange} aria-label=\"simple tabs example\">\r\n          <Tab icon={<Loyalty />}  label=\"Programs\" />\r\n          <Tab icon={<Subject />} label=\"Courses\" />\r\n          <Tab icon={<Person />} label=\"Users\" />\r\n      \r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={this.state.value} index={0}>\r\n        <ProgramList/>\r\n      </TabPanel>\r\n      <TabPanel value={this.state.value} index={1}>\r\n\r\n      </TabPanel>\r\n      <TabPanel value={this.state.value} index={2}>\r\n        \r\n      </TabPanel>\r\n      <TabPanel value={this.state.value} index={3}>\r\n        \r\n      </TabPanel>\r\n      */}\r\n      \r\n      <NavLink to={`${process.env.PUBLIC_URL}/`}>\r\n          Home\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/programs`}>\r\n          Programs\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/courses`}>\r\n          Courses\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/students`}>\r\n          Students\r\n      </NavLink>\r\n\r\n      \r\n      <NavLink to={`${process.env.PUBLIC_URL}/faculties`}>\r\n          Faculties\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/create/program`}>\r\n          Add Program\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/create/course`}>\r\n          Add Course\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/create/faculty`}>\r\n          Add Faculty\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/create/student`}>\r\n          Add Student\r\n      </NavLink>\r\n      </Breadcrumbs>\r\n    </Fragment>\r\n  );\r\n\r\n  showLoggedOutBar = () => (\r\n    <Fragment>\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink to={`${process.env.PUBLIC_URL}/`}>\r\n          Home\r\n      </NavLink>\r\n\r\n      <NavLink to={`${process.env.PUBLIC_URL}/login`}>\r\n          Login\r\n        {/*<Route path=\"/login\"></Route>*/}\r\n    </NavLink>\r\n    {/*\r\n      <AppBar position=\"static\">\r\n        <Tabs centered value={this.state.value} onChange={this.handleChange} aria-label=\"simple tabs example\">\r\n          <Tab icon={<LockOpen />} label=\"Sign in\" />\r\n          <Tab icon={<Loyalty />}  label=\"Login\" />\r\n          {this.state.isAuthenticated? <Tab icon={<Person />} label=\"Users\" />:<div/>}\r\n      \r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={this.state.value} index={0}>\r\n        \r\n      </TabPanel>\r\n      <TabPanel value={this.state.value} index={1}>\r\n        <Login isAuthenticated={this.state.isAuthenticated} userHasAuthenticated={this.userHasAuthenticated}/>\r\n      </TabPanel>\r\n      <TabPanel value={this.state.value} index={2}>\r\n        \r\n      </TabPanel>\r\n      <TabPanel value={this.state.value} index={3}>\r\n        \r\n      </TabPanel>\r\n      */}\r\n      </Breadcrumbs>\r\n    </Fragment>\r\n  );\r\n\r\n  \r\n\r\n\r\n  \r\n  render(){\r\n\r\n    const childProps = {\r\n      isAuthenticated: this.state.isAuthenticated,\r\n      userHasAuthenticated: this.userHasAuthenticated\r\n    };\r\n    return (\r\n      <ApolloProvider client={client}>\r\n      <div>\r\n        {this.state.isAuthenticated ? this.showLoggedInBar() : this.showLoggedOutBar()}\r\n        <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n      </div>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter >\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}