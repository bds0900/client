{"version":3,"sources":["component/signup/Home.tsx","component/Mutation.ts","component/signup/Login.tsx","component/Query.ts","component/common/SelectProgram.tsx","component/signup/Signup.tsx","component/programs/Program.tsx","component/programs/ProgramList.tsx","component/programs/UpdateProgram.tsx","component/programs/ProgramDetail.tsx","component/Subscription.ts","component/courses/CourseList.tsx","component/Interfaces.ts","component/courses/CreateClass.tsx","component/courses/UpdateCourse.tsx","component/courses/CourseStudentAttendance.tsx","component/courses/CourseStudentList.tsx","component/courses/Course.tsx","component/students/StudentList.tsx","component/common/SelectCourses.tsx","component/enrollment/CreateEnrollment.tsx","component/students/UpdateStudent.tsx","component/students/Student.tsx","component/programs/CreateProgram.tsx","component/courses/CreateCourse.tsx","component/faculties/FacultyList.tsx","component/instructing/CreateInstructing.tsx","component/faculties/UpdateFaculty.tsx","component/attendances/ClassAttendance.tsx","component/classes/Class.tsx","component/faculties/Faculty.tsx","component/faculties/CreateFaculty.tsx","component/instructing/InstructingList.tsx","component/classes/ClassList.tsx","Routes.tsx","Client.js","component/Nav.tsx","App.tsx","index.js"],"names":["Home","props","CREATE_STUDENT","gql","UPDATE_STUDENT","CREATE_PROGRAM","UPDATE_PROGRAM","CREATE_COURSE","UPDATE_COURSE","CREATE_ENROLLMENT","CREATE_FACULTY","LOGIN","CREATE_INSTRUCTING","UPDATE_FACULTY","CREATE_CLASS","emailRegex","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","useState","email","setEmail","password","setPassword","emailValid","setEmailValid","passwordValid","setPasswrodValid","classes","useMutation","variables","login","data","error","token","userHasAuthenticated","localStorage","setItem","Faculty","status","id","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","to","TextField","required","fullWidth","name","autoComplete","autoFocus","placeholder","label","value","onChange","event","target","test","toLowerCase","type","length","Button","color","onClick","catch","e","alert","disabled","GET_STUDENTS","GET_STUDENT","GET_STUDENTS_BY_COURSE","GET_INSTRUCTINGS","GET_PROGRAMS","GET_PROGRAMS_BY_FAULTY_ID","GET_PROGRAM","GET_COURSES","GET_COURSES_BY_PROGRAM_ID","GET_COURSES_BY_FACULTY_ID","GET_COURSE","GET_FACULTIES","GET_FACULTY","GET_CLASS_ATTENDANCE","GET_STUDENT_COURSE_ATTENDANCE","GET_CLASSES_BY_COURSE","select","minWidth","SelectProgram","programs","program","setProgram","InputLabel","Select","onProgramClick","map","MenuItem","key","nameRegex","Signup","FirstName","setFirstName","lastName","setLastName","setID","FirstNameValid","setFirstNameValid","lastNameValid","setLastNameValid","result","useQuery","program_id","saveStudent","genID","min","max","user_id","String","Math","floor","random","console","log","genEmail","substring","message","createStudent","gutterBottom","LastName","createStyles","root","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Program","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","List","courses","course","ListItem","ProgramList","role","getItem","QERUY","loading","UpdateProgram","setName","saveProgram","updateProgram","update","setUpdate","match","params","faculties","faculty","students","student","GET_ATTENDANCE_SUB","GET_COURSE_SUB","flexGrow","demo","background","title","button","list","CourseList","refetch","useSubscription","NavLink","ListItemAvatar","ListItemText","primary","MutationType","Role","CreateClass","course_id","room","setRoom","start","setStart","end","setEnd","saveClass","Table","TableHead","TableRow","TableCell","align","TableBody","createClass","startTime","endTime","UpdateCourse","numOfStudent","NOS","setNOS","addClass","setClass","saveCourse","updateCourse","Number","CourseStudentAttendance","student_id","clas","class_id","attendances","ret","class","check","CourseStudentList","container","Course","setAddClass","coure_id","notifyOnNetworkStatusChange","sub","networkStatus","showClassTable","TableContainer","Paper","Divider","SUPERADMIN","ADMIN","Grid","item","xs","enrollments","enrollment","style","StudentList","SelectCourses","setCourse","React","onCourseClick","CreateEnrollment","saveEnrollment","addCourse","updateStudent","table","Student","open","setOpen","Collapse","in","timeout","unmountOnExit","CreateProgram","createProgram","createCourse","FacultyList","CreateInstructing","faculty_id","saveInstructing","insctructing","undefined","saveFaculty","updateFaculty","ClassAttendance","attendance","time","Class","instructings","instructing","CreateFaculty","createFaculty","Instructing","ClassList","Routes","childProps","path","exact","render","CreateCourse","ProgramDetail","InstructingList","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","authLink","setContext","_","headers","authorization","link","split","query","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","credentials","request","a","fetchOptions","textDecoration","avtive","border","borderRadius","boxShadow","height","padding","toolbar","paddingRight","toolbarIcon","justifyContent","marginLeft","mixins","appBarShift","drawerWidth","transition","transitions","create","easing","sharp","duration","enteringScreen","menuButton","marginRight","menuButtonHidden","drawerPaper","position","whiteSpace","appBarSpacer","content","overflow","paddingTop","paddingBottom","fixedHeight","sidebarIcon","Nav","ListItemIcon","appBar","zIndex","drawer","leavingScreen","drawerPaperClose","overflowX","breakpoints","up","App","isAuthenticated","setIsAuth","clsx","authenticated","handleLogout","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Icon","Drawer","history","ReactDOM","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.930dc665.chunk.js","sourcesContent":["import React, { Fragment, ReactElement } from 'react'\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from '../Interfaces';\r\nimport Nav from '../Nav'\r\ninterface Props {\r\n    isAuthenticated: boolean;\r\n    userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nconst Home = (props: Props):ReactElement => {\r\n\r\n    return (\r\n        <Fragment>\r\n        \r\n        home\r\n        </Fragment>\r\n    )\r\n    \r\n}\r\n\r\nexport default Home\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_STUDENT=gql`\r\n    mutation CREATE_STUDENT(\r\n        $id:ID!,$FirstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createStudent(data:{\r\n            id:$id\r\n            FirstName:$FirstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"full-time\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const UPDATE_STUDENT=gql`\r\n    mutation UPDATE_STUDENT(\r\n        $id:ID!,$FirstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateStudent(\r\n            where:{id:$id},\r\n            data:{\r\n                FirstName:$FirstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"full-time\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_PROGRAM=gql`\r\n    mutation CREATE_PROGRAM($id:ID!,$name:String!){\r\n        createProgram(data:{\r\n            id:$id\r\n            name:$name\r\n        }){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_PROGRAM=gql`\r\n    mutation UPDATE_PROGRAM($id:ID!,$name:String!){\r\n        updateProgram(where:{id:$id},\r\n            data:{name:$name}\r\n        ){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_COURSE=gql`\r\n    mutation CREATE_COURSE($id:ID!,$name:String!,$NOS:Int!,$program_id:ID){\r\n        createCourse(data:{\r\n            id:$id\r\n            name:$name\r\n            numOfStudent:$NOS\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            name\r\n            numOfStudent\r\n            program{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_COURSE=gql`\r\n    mutation UPDATE_COURSE($id:ID!,$name:String!,$NOS:Int,$program:ID){\r\n        updateCourse(where:{id:$id},\r\n            data:{\r\n                name:$name\r\n                numOfStudent:$NOS\r\n                program:{\r\n                    connect:{\r\n                        id:$program\r\n                    }\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            name\r\n            numOfStudent\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_ENROLLMENT=gql`\r\n    mutation CREATE_ENROLLMENT($student_id:ID,$course_id:ID){\r\n        createEnrollment(data:{\r\n            student:{\r\n                connect:{\r\n                    id:$student_id\r\n                }\r\n            }\r\n            course:{\r\n                connect:{\r\n                    id:$course_id\r\n                }\r\n            }\r\n        }){\r\n            student{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n`;\r\n\r\nexport const CREATE_FACULTY=gql`\r\n    mutation CREATE_FACULTY(\r\n        $id:ID!,$FirstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createFaculty(data:{\r\n            id:$id\r\n            FirstName:$FirstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"USER\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const LOGIN=gql`\r\n    mutation LOGIN($email:String!,$password: String!){\r\n        login(data:{\r\n            email: $email\r\n            password: $password\r\n        }){\r\n            Faculty{\r\n                id,\r\n                FirstName,\r\n                LastName,\r\n                email\r\n                status\r\n            },\r\n            token\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_INSTRUCTING=gql`\r\n    mutation CREATE_INSTRUCTING($faculty_id:ID,$course_id:ID){\r\n        createInstructing(data:{\r\n            faculty:{\r\n                connect:{id:$faculty_id}\r\n            }\r\n            course:{\r\n                connect:{id:$course_id}\r\n            }\r\n        }){\r\n            faculty{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\nexport const UPDATE_FACULTY=gql`\r\n    mutation UPDATE_FACULTY(\r\n        $id:ID!,$FirstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateFaculty(\r\n            where:{id:$id},\r\n            data:{\r\n                FirstName:$FirstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"USER\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n            status\r\n        }\r\n    }\r\n\r\n`;\r\nexport const CREATE_CLASS=gql`\r\n    mutation CREATE_CLASS($course_id:ID,$room:String!,$start:String!,$end:String!){\r\n        createClass(data:{\r\n            room:$room\r\n            startTime:$start\r\n            endTime:$end\r\n            course:{\r\n                connect:{id:$course_id}\r\n            }\r\n        }){\r\n            id\r\n            room\r\n            startTime\r\n            endTime\r\n        }\r\n    }\r\n`;\r\n","\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport { Redirect } from 'react-router-dom';\r\n// import { FormGroup, FormControl, ControlLabel, Button, Glyphicon } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport React, { ReactElement, ReactComponentElement, useState } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { LOGIN } from '../Mutation';\r\nimport { FacultyType } from '../Interfaces';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\n\r\ninterface LoginProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\ninterface LoginState {\r\n  loading: boolean;\r\n  redirect: boolean;\r\n  email: string;\r\n  password: string;\r\n  emailValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n  passwordValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n}\r\ninterface LoginVars {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface authPayloadType {\r\n  Faculty: FacultyType;\r\n  token: string;\r\n}\r\ninterface LoginData{\r\n  login: authPayloadType\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login(props:LoginProps): ReactElement <LoginProps>  {\r\n\r\n    const [loading,setLoading]=useState(false);\r\n    const [redirect, setReirect] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [emailValid, setEmailValid] = useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    \r\n    // for material ui\r\n    const classes = useStyles();\r\n\r\n  const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setEmail(target.value)\r\n    setEmailValid(emailRegex.test(target.value.toLowerCase()) ? 'success' : 'error')\r\n  }\r\n\r\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setPassword(target.value);\r\n    setPasswrodValid(target.value.length < 8 ? 'error' : 'success')\r\n    \r\n  }\r\n\r\n  const onLogin = async (event: React.MouseEvent<HTMLButtonElement,MouseEvent>) => {\r\n    event.preventDefault();\r\n    setLoading( true );\r\n\r\n    // try {\r\n    //   await Auth.signIn(email, password);\r\n    //   props.userHasAuthenticated(true);\r\n    //   setReirect(true )\r\n    // } catch (e) {\r\n    //   alert(e.message);\r\n    //   setLoading(false);\r\n    // }\r\n  }\r\n  const [login, { error, data }] = useMutation<LoginData, LoginVars>(\r\n    LOGIN,\r\n    {variables:{email: email, password: password}}\r\n  )\r\n  //if get the data then save it\r\n  if(data && data.login.token!==\"Unable to login\")\r\n  {\r\n    props.userHasAuthenticated(true);\r\n    localStorage.setItem('token',data.login.token)\r\n    localStorage.setItem('role',data.login.Faculty.status)\r\n    localStorage.setItem('id',data.login.Faculty.id)\r\n  }\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log In\r\n          </Typography>\r\n          {data && data.login.token!==\"Unable to login\"\r\n            ?\r\n            <Redirect to='/home' />\r\n            :\r\n          <div className=\"Login\">\r\n            <div className={ classes.form }>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                placeholder=\"Enter your email\"\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={onEmailChange}\r\n              />\r\n              <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your Password\"\r\n                  label=\"Password\"\r\n                  value={password}\r\n                  onChange={onPasswordChange}\r\n              />\r\n\r\n                <Button\r\n                  //type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick={()=>login().catch((e) => {\r\n                    alert(\"Login Failed.\")\r\n                    setPassword(\"\")\r\n                  })}\r\n                  disabled={passwordValid !== 'success' || emailValid !== 'success' }\r\n                >\r\n                  Log in\r\n                </Button>\r\n            </div>\r\n          </div>\r\n          }\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </Container>\r\n    );\r\n  \r\n}\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_STUDENTS = gql`\r\n{\r\n  students{\r\n    id\r\n    FirstName\r\n    LastName\r\n  }\r\n}\r\n`;\r\nexport const GET_STUDENT=gql`\r\n    query GET_STUDENT($student_id:ID){\r\n    student(where:{id:$student_id}){\r\n        id\r\n        FirstName\r\n        LastName\r\n        email\r\n        status\r\n        program{\r\n            id\r\n            name\r\n        }\r\n        enrollments{\r\n            id\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    time\r\n                }\r\n                class{\r\n                    room\r\n                    startTime\r\n                    endTime\r\n                }\r\n            }\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_STUDENTS_BY_COURSE=gql`\r\n    query GET_STUDENTS_BY_COURSE($course_id:ID){\r\n        students(orderBy:LastName_ASC,\r\n        where:{enrollments_some:{course:{id:$course_id}}}){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const GET_INSTRUCTINGS=gql`\r\n    query GET_INSTRUCTINGS($faculty_id:ID){\r\n        instructings(where:{faculty:{id:$faculty_id}}){\r\n            course{\r\n                name\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport const GET_PROGRAMS = gql`\r\n{\r\n  programs(orderBy:name_ASC) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const GET_PROGRAMS_BY_FAULTY_ID = gql`\r\nquery GET_PROGRAMS_BY_FAULTY_ID($id:ID){\r\n  programs(orderBy:name_ASC\r\n  where:{\r\n      faculties_some:{\r\n          id:$id\r\n      }\r\n  }) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_PROGRAM = gql`\r\nquery GET_PROGRAM($id:ID){\r\n  program(where:{id:$id}){\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const GET_COURSES = gql`\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSES_BY_PROGRAM_ID = gql`\r\n  query GET_COURSES_BY_PROGRAM_ID($program_id:ID)\r\n  {\r\n    courses(where:{\r\n        program:{\r\n            id:$program_id\r\n        }\r\n    }){\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\nexport const GET_COURSES_BY_FACULTY_ID = gql`\r\n  query GET_COURSES_BY_FACULTY_ID($id:ID) {\r\n    courses(where: {\r\n        instructings_some:{\r\n            faculty:{\r\n                id:$id\r\n            }\r\n        }}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          FirstName\r\n          LastName\r\n        }\r\n        course{\r\n            classes{\r\n                id\r\n                room\r\n                startTime\r\n                endTime\r\n            }\r\n        }\r\n      }\r\n      classes{\r\n          id\r\n          room\r\n          startTime\r\n          endTime\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\nexport const GET_COURSE = gql`\r\n  query Get_COURSE($coure_id: ID!) {\r\n    course(where: {id:$coure_id}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          FirstName\r\n          LastName\r\n        }\r\n        course{\r\n            classes{\r\n                id\r\n                room\r\n                startTime\r\n                endTime\r\n            }\r\n        }\r\n      }\r\n      classes{\r\n          id\r\n          room\r\n          startTime\r\n          endTime\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const GET_FACULTIES=gql`\r\n    query{\r\n        faculties{\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n            status\r\n            instructings{\r\n                id\r\n                course{\r\n                    name\r\n                    attendances{\r\n                        time\r\n                    }\r\n                    classes{\r\n                        room\r\n                        startTime\r\n                        endTime\r\n                    }\r\n                }\r\n            }\r\n            program{\r\n                id\r\n                name\r\n            }\r\n            \r\n        }\r\n    }\r\n`;\r\nexport const  GET_FACULTY=gql`\r\n    query($faculty_id:ID){\r\n        faculty(where:{id:$faculty_id}){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n            status\r\n            instructings{\r\n                id\r\n                course{\r\n                    name\r\n                    attendances{\r\n                        time\r\n                    }\r\n                    classes{\r\n                        room\r\n                        startTime\r\n                        endTime\r\n                    }\r\n                }\r\n            }\r\n            program{\r\n                id\r\n                name\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n`;\r\nexport const  GET_FACULTY_BY_EMAIL=gql`\r\n    query($faculty_id:ID){\r\n        faculty(where:{id:$faculty_id}){\r\n            id\r\n            FirstName\r\n            LastName\r\n            email\r\n            status\r\n            instructings{\r\n                id\r\n                course{\r\n                    name\r\n                    attendances{\r\n                        time\r\n                    }\r\n                    classes{\r\n                        room\r\n                        startTime\r\n                        endTime\r\n                    }\r\n                }\r\n            }\r\n            program{\r\n                id\r\n                name\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\nexport const GET_COURSE_ATTENDANCE=gql`\r\n    query GET_COURSE_ATTENDANCE($course_id:ID){\r\n        attendances(where:{course:{id:$course_id}}){\r\n            id\r\n            student{\r\n                FirstName\r\n                LastName\r\n                id\r\n            }\r\n            time\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CLASS_ATTENDANCE=gql`\r\n    query GET_CLASS_ATTENDANCE($class_id:ID){\r\n        attendances(where:{class:{id:$class_id}}){\r\n            student{\r\n                FirstName\r\n                LastName\r\n                id\r\n            }\r\n            time\r\n        }\r\n    }\r\n`;\r\nexport const GET_STUDENT_COURSE_ATTENDANCE=gql`\r\n    query GET_CLASS_ATTENDANCE($course_id:ID,$student_id:ID){\r\n        attendances(where:{\r\n            student:{id:$student_id},\r\n            course:{id:$course_id}\r\n            }){\r\n            id\r\n            student{\r\n                FirstName\r\n                LastName\r\n            }\r\n            class{\r\n                id\r\n            }\r\n            time\r\n        }\r\n    }\r\n`;\r\nexport const GET_CLASSES=gql`\r\n    query GET_CLASSES{\r\n        classes{\r\n            id\r\n            startTime\r\n            endTime\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    course{\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\nexport const GET_CLASS=gql`\r\n    query GET_CLASS($class_id:ID){\r\n        class(where:{id:$class_id}){\r\n            startTime\r\n            endTime\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    course{\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\nexport const GET_CLASSES_BY_COURSE=gql`\r\n    query GET_CLASSES_BY_COURSE($course_id:ID){\r\n        classes(where:{course:{id:$course_id}}){\r\n            startTime\r\n            endTime\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    course{\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;","import React, { ReactElement, useState } from 'react'\r\nimport { Select, MenuItem, InputLabel, makeStyles } from '@material-ui/core'\r\nimport { ProgramType } from '../Interfaces'\r\n\r\ninterface Props {\r\n    programs:ProgramType[]|undefined\r\n    onProgramClick:any\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    select: {\r\n        minWidth: 150\r\n    },\r\n    marginTop: {\r\n        marginTop: 20\r\n    }\r\n  }));\r\n\r\nexport default function SelectProgram(props: Props): ReactElement {\r\n    const classes = useStyles()\r\n\r\n    const programs=props.programs;\r\n    const [program,setProgram]=useState<string>();\r\n    \r\n    \r\n\r\n    return (\r\n        <div className={classes.marginTop}>\r\n        <InputLabel >Program</InputLabel>\r\n        <Select className={classes.select} value={program} onChange={e=>{\r\n            setProgram(e.target.value as string)\r\n            props.onProgramClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            programs?.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType } from '../Interfaces';\r\nimport { GET_PROGRAMS} from '../Query';\r\nimport {CREATE_STUDENT}from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    createStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\nexport default function Signup({}: Props): ReactElement {\r\n    const [FirstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [FirstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        CREATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            FirstName:FirstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"999\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        \r\n        setID(user_id)\r\n        console.log(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(FirstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= FirstName[0]+\r\n                lastName+\r\n                id.substring(3)+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n        console.log(email)\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Sign Up</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createStudent \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.createStudent.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student name: {data && data.createStudent.FirstName} {data.createStudent.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student Email: {data && data.createStudent.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.createStudent.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={FirstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(FirstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(FirstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(FirstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\"\r\n                disabled={passwordValid !== 'success' || FirstNameValid !== 'success' || lastNameValid !== 'success' }\r\n                onClick={() => id && FirstName && lastName && email && program && saveStudent()}>\r\n                    Sign Up\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  }),\r\n);\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={props.program.id}\r\n      >\r\n        <Typography className={classes.heading}>{props.program.name}</Typography>\r\n        <NavLink to={\"/program/\"+props.program.id}>detail</NavLink>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        \r\n        {props.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n        \r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport Program from './Program'\r\nimport {List,ListItem,Collapse,Typography} from '@material-ui/core';\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport {GET_PROGRAMS, GET_PROGRAMS_BY_FAULTY_ID} from '../Query'\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface Props {\r\n    \r\n}\r\nexport default function ProgramList({}: Props): ReactElement {\r\n\r\n    const role=localStorage.getItem('role')\r\n    const id=localStorage.getItem('id')\r\n    const QERUY=role=='USER'?GET_PROGRAMS_BY_FAULTY_ID:GET_PROGRAMS\r\n    console.log(QERUY)\r\n    const { loading, data } = useQuery<ProgramListData,ProgramListVars>(QERUY,{variables:{id:id}});\r\n\r\n    return (\r\n        <Fragment>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            <List>\r\n            {data && data.programs.map(program => (\r\n                <ListItem key={program.id} className=\"program-list\"> <Program program={program}/> </ListItem>\r\n\r\n            ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement,useState } from 'react'\r\n\r\nimport { useMutation} from '@apollo/react-hooks';\r\nimport {TextField, Button} from '@material-ui/core';\r\n\r\nimport {ProgramType} from '../Interfaces'\r\nimport {UPDATE_PROGRAM}from '../Mutation'\r\nimport './programList.css'\r\n\r\n\r\n\r\ninterface ProgramData {\r\n    updateProgram: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateProgram(props: Props): ReactElement {\r\n\r\n  \r\n  const [name, setName] = useState(props.program.name)\r\n  const [id, setID] = useState(props.program.id)\r\n\r\n  const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n    UPDATE_PROGRAM,\r\n    {variables:{id:id,name:name}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Program</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.updateProgram ? \r\n            <p>Saved!</p> : \r\n\r\n\r\n    <div className=\"CreateProgram\">\r\n    <TextField\r\n    placeholder=\"Enter the Program name\"\r\n    label=\"Program Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter program ID\"\r\n    label=\"Program ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n        Update Program\r\n    </Button>\r\n    </div>\r\n\r\n\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {GET_PROGRAM} from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\nimport UpdateProgram from './UpdateProgram';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n  const { loading, data } = useQuery<ProgramData, ProgramVars>(\r\n    GET_PROGRAM,\r\n    { variables: { id: props.match.params.id } }\r\n  );\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    {update?\r\n      <div>\r\n      {data&&<UpdateProgram program={data.program}/>}\r\n      </div>:\r\n    \r\n    \r\n      <div>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program ID: {data && data?.program.id}\r\n    </Typography>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program name: {data && data?.program.name}\r\n    </Typography>\r\n\r\n    <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Course List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel2a-content\"\r\n        id=\"panel2a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Faculty List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.faculties?.map(faculty=>(\r\n          <ListItem key={faculty.id}>\r\n            <NavLink to={\"/faculty/\"+faculty.id}>\r\n            <Typography>{faculty.FirstName} {faculty.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel3a-content\"\r\n        id=\"panel3a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Student List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.students?.map(student=>(\r\n          <ListItem key={student.id}>\r\n            <NavLink to={\"/student/\"+student.id}>\r\n            <Typography>{student.FirstName} {student.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    \r\n    </div>\r\n    }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ATTENDANCE_SUB=gql`\r\nsubscription GET_ATTENDANCE_SUB{\r\n    attendance{\r\n        mutation\r\n        node{\r\n            time\r\n            student{\r\n                id\r\n                FirstName\r\n                enrollments{\r\n                    course{\r\n                        attendances{\r\n                            time\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n`;\r\nexport const GET_COURSE_SUB=gql`\r\nsubscription GET_COURSE_SUB{\r\n    course{\r\n        mutation\r\n    }\r\n}\r\n\r\n`;\r\nexport const GET_CLASS_SUB=gql`\r\nsubscription GET_CLASS_SUB{\r\n    class{\r\n        mutation\r\n    }\r\n}\r\n\r\n`;\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery, useSubscription } from '@apollo/react-hooks'\r\nimport { CourseType, CourseSubscriptionPayload } from '../Interfaces'\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Typography ,List,ListItem, makeStyles} from '@material-ui/core';\r\nimport {GET_COURSES, GET_COURSES_BY_FACULTY_ID } from '../Query'\r\nimport {GET_COURSE_SUB}from '../Subscription'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\n\r\ninterface CourseListData {\r\n    courses: CourseType[];\r\n}\r\n  \r\ninterface CourseListVars {\r\n\r\n}\r\ninterface AddCourse{\r\n  course:CourseSubscriptionPayload\r\n}\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    maxWidth: 752,\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    margin: theme.spacing(4, 0, 2),\r\n  },\r\n  button: {\r\n    '&:hover': {\r\n      background: '#dadada',\r\n    }\r\n  },\r\n  list: {\r\n    width: \"50%\",\r\n  }\r\n}));\r\n\r\nexport default function CourseList(props: Props): ReactElement {\r\n    const classes = useStyles()\r\n\r\n    const role=localStorage.getItem('role')\r\n    const id=localStorage.getItem('id')\r\n    const QERUY=role=='USER'?GET_COURSES_BY_FACULTY_ID:GET_COURSES\r\n    const{loading,data,refetch}= useQuery<CourseListData,CourseListVars>(QERUY,{variables:{id:localStorage.getItem('id')}});\r\n    const sub=useSubscription<AddCourse>(GET_COURSE_SUB);\r\n    if(!sub.loading) refetch()\r\n    return (\r\n        <div>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                Course List\r\n              </Typography>\r\n              <div className={classes.demo}>\r\n                <List className={classes.list}>\r\n                  {data && data.courses.map(course => (\r\n                    <ListItem key={course.id} className={classes.button} button component={NavLink} to={\"/course/\"+course.id}>\r\n                      <ListItemAvatar>\r\n                        <Avatar>\r\n                          <ClassIcon />\r\n                        </Avatar>\r\n                      </ListItemAvatar>\r\n                      <ListItemText\r\n                        primary={course.id}\r\n                        secondary={course.name}\r\n                      >\r\n                      </ListItemText>\r\n                    </ListItem>\r\n                    ))\r\n                  }\r\n                </List>\r\n              </div>\r\n\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport interface ProgramType {\r\n    id: string;\r\n    name: string;\r\n    courses: CourseType[];\r\n    faculties: FacultyType[];\r\n    students: StudentType[];   \r\n}\r\n\r\nexport interface CourseType{\r\n    id: string;\r\n    name: string;\r\n    numOfStudent: number;\r\n    program: ProgramType;\r\n    enrollments: EnrollmentType[];\r\n    instructings:InstructingType[];\r\n    attendances:Array<AttendanceType>;// same with Attendance[]\r\n    classes:ClassType[];\r\n}\r\n\r\nexport interface StudentType{\r\n    id: string\r\n    FirstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    enrollments: EnrollmentType[]\r\n    attendances: AttendanceType[]\r\n}\r\n\r\nexport interface FacultyType{\r\n    id: string\r\n    FirstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    instructings: InstructingType[]\r\n\r\n}\r\n\r\nexport interface ClassType{\r\n    id: string\r\n    course: CourseType\r\n    room: string\r\n    startTime: string\r\n    endTime: string\r\n}\r\n\r\nexport interface EnrollmentType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n}\r\n\r\nexport interface InstructingType{\r\n    id: string\r\n    course: CourseType\r\n    faculty: FacultyType\r\n}\r\n\r\nexport interface AttendanceType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n    time: string\r\n    class:ClassType\r\n}\r\n\r\nexport const type = {\r\n    program: \"Program\",\r\n    course: \"Course\",\r\n    student: \"Student\",\r\n    faculty: \"Faculty\",\r\n    enrollment: \"Enrollment\",\r\n    instructing: \"Instructing\",\r\n    attendance: \"Attendance\",\r\n}\r\n\r\n\r\n\r\nexport interface AttendanceSubscriptionPayload {\r\n    mutation: MutationType\r\n    node: AttendanceType\r\n    updatedFields: string[]\r\n    previousValues: AttendancePreviousValues\r\n}\r\n\r\nexport enum  MutationType {\r\n    CREATED,\r\n    UPDATED,\r\n    DELETED,\r\n}\r\nexport interface AttendancePreviousValues{\r\n    id: string\r\n    time: string\r\n}\r\n\r\nexport enum Role {\r\n    SUPERADMIN=\"SUPERADMIN\", \r\n    ADMIN=\"ADMIN\",\r\n    USER=\"USER\"\r\n}\r\n\r\nexport interface CourseSubscriptionPayload{\r\n    mutation: MutationType\r\n    node: CourseType\r\n    updatedFields: string[]\r\n    previousValues: CoursePreviousValues\r\n}\r\nexport interface CoursePreviousValues{\r\n    id: string\r\n    time: string\r\n    numOfStudent:number\r\n}\r\nexport interface ClassSubscriptionPayload{\r\n    mutation: MutationType\r\n    node: ClassType\r\n    updatedFields: string[]\r\n    previousValues: ClassPreviousValues\r\n}\r\nexport interface ClassPreviousValues{\r\n    id: string\r\n    room: string\r\n    startTime: string\r\n    endTime: string\r\n}\r\nexport interface AttendanceSubscriptionPayload{\r\n    mutation: MutationType\r\n    node: AttendanceType\r\n    updatedFields: string[]\r\n    previousValues: AttendancePreviousValues\r\n}\r\nexport interface AttendancePreviousValues{\r\n    id: string\r\n    time: string\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem, Table, TableHead, TableRow, TableCell, TableBody} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType, InstructingType,ClassType} from '../Interfaces'\r\nimport {GET_PROGRAMS} from '../Query'\r\nimport {CREATE_COURSE,CREATE_INSTRUCTING,CREATE_CLASS} from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    course_id:string\r\n}\r\ninterface ClassData{\r\n    createClass:ClassType\r\n}\r\ninterface ClassVars{\r\n\r\n}\r\n\r\nexport default function CreateClass(props: Props): ReactElement {\r\n\r\n\r\n    const [id, setID] = useState(props.course_id)\r\n    const [room, setRoom] = useState(\"\")\r\n    const [start, setStart] = useState(\"\")\r\n    const [end, setEnd] = useState(\"\")\r\n\r\n    const [saveClass, { error, data }]=useMutation<ClassData,ClassVars>(\r\n        CREATE_CLASS,\r\n        {\r\n            variables:{\r\n                course_id:props.course_id,\r\n                room:room,\r\n                start:start,\r\n                end:end\r\n            }\r\n        }\r\n    )\r\n        console.log(data)\r\n    return (\r\n        <div>\r\n        <h3>Add a Class</h3>\r\n        {error ? <p>Oh no! {error.message}</p> :\r\n        <div> \r\n            {data \r\n                ? \r\n            <div>\r\n            Saved!\r\n            <Table>\r\n            <TableHead>\r\n            <TableRow>\r\n                <TableCell align=\"center\">Room</TableCell>\r\n                <TableCell align=\"center\">Start Time</TableCell>\r\n                <TableCell align=\"center\">End Time</TableCell>\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                <TableRow key={data.createClass.id}>\r\n                <TableCell align=\"center\">{data.createClass.room}</TableCell>\r\n                <TableCell align=\"center\">{data.createClass.startTime}</TableCell>\r\n                <TableCell align=\"center\">{data.createClass.endTime}</TableCell>\r\n                </TableRow>\r\n            </TableBody>\r\n            </Table>\r\n            </div> \r\n                : \r\n            <div className=\"CreateClass\">\r\n                <TextField\r\n                placeholder=\"Enter the Room name\"\r\n                label=\"Room Name\"\r\n                value={room}\r\n                onChange={e=>setRoom(e.target.value)}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter the start time\"\r\n                label=\"Start Time\"\r\n                value={start}\r\n                onChange={e=>setStart(e.target.value)}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter the end time\"\r\n                label=\"End Time\"\r\n                value={end}\r\n                onChange={e=>setEnd(e.target.value)}\r\n                />\r\n                <br/>\r\n\r\n\r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    room && start && end && saveClass() }>\r\n                    Add Class\r\n                </Button>\r\n            </div>\r\n            }\r\n        </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button, InputLabel, MenuItem, Select} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType, CourseType} from '../Interfaces'\r\nimport {GET_PROGRAMS}from '../Query'\r\nimport {UPDATE_COURSE} from '../Mutation'\r\nimport Course from '../courses/Course';\r\nimport CreateClass from './CreateClass';\r\n\r\n\r\ninterface CourseData {\r\n    updateCourse: CourseType;\r\n}\r\n  \r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    numOfStudent:number\r\n    program:string\r\n}\r\ninterface ProgramData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramVars {\r\n\r\n}\r\ninterface Props {\r\n    course:CourseType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateCourse(props: Props): ReactElement {\r\n\r\n  const course=props.course\r\n  const [name, setName] = useState(course.name)\r\n  const [id, setID] = useState(course.id)\r\n  const [program,setProgram]=useState(course.program.name)\r\n  const [NOS, setNOS] = useState(course.numOfStudent)\r\n  const [addClass, setClass] = useState(false)\r\n  \r\n\r\n  const result=useQuery<ProgramData,ProgramVars>(GET_PROGRAMS)\r\n  const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n    UPDATE_COURSE,\r\n    {variables:{id:id,name:name,numOfStudent:NOS, program:program}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Course</h3>\r\n    {addClass?<CreateClass course_id={id}/>:\r\n    <div>\r\n    {error ? <p>Oh no! {error.message}</p> : null}\r\n    {data && data.updateCourse \r\n        ? \r\n    <p>Saved!</p> \r\n        : \r\n\r\n\r\n    \r\n    <div className=\"UpdateCourse\">\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n        setClass(true) }>\r\n        Add Class\r\n    </Button>\r\n    <br/>\r\n    <TextField\r\n    placeholder=\"Enter the Course name\"\r\n    label=\"Course Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter Course ID\"\r\n    label=\"Course ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField \r\n    placeholder=\"Enter Number of Student\"\r\n    label=\"Number of Student\"\r\n    value={NOS}\r\n    onChange={e=>setNOS(Number(e.target.value))}\r\n    />\r\n    <br/>\r\n    Current program is {props.course.program.name}\r\n\r\n    <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={(e)=>setProgram(e.target.value as string)}>\r\n        {result.loading?(\r\n                <MenuItem  disabled>loading....</MenuItem >\r\n        ):(\r\n            result.data?.programs.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        )}\r\n        </Select>\r\n\r\n\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name && NOS && program && saveCourse()}>\r\n        Update Course\r\n    </Button>\r\n    </div>\r\n\r\n    }\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement } from 'react'\r\nimport { useQuery, useSubscription } from '@apollo/react-hooks'\r\nimport { GET_STUDENT_COURSE_ATTENDANCE,  } from '../Query'\r\nimport { AttendanceType, ClassType } from '../Interfaces'\r\nimport { TableHead, Table, TableCell, TableRow, TableBody } from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\ninterface Props {\r\n    course_id:string,\r\n    student_id:string\r\n    classes:ClassType[]\r\n}\r\ninterface AttendanceListData{\r\n  attendances:AttendanceType[]\r\n}\r\n\r\nexport default function CourseStudentAttendance(props: Props): ReactElement {\r\n    const classes=props.classes;\r\n    const {loading,data,refetch}=useQuery<AttendanceListData>(\r\n        GET_STUDENT_COURSE_ATTENDANCE,\r\n        {variables:{student_id:props.student_id,course_id:props.course_id}}\r\n    )\r\n    \r\n    function check(class_id:string,attendances:AttendanceType[]){\r\n        let ret=false;\r\n        for (const att of attendances){\r\n            if(att.class.id==class_id){\r\n                ret=true;\r\n                break;\r\n            }\r\n        }\r\n        return ret\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading?\r\n            <div>loading...</div>\r\n            :\r\n            <div>\r\n            <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\">Room</TableCell>\r\n                      <TableCell align=\"center\">Start Time</TableCell>\r\n                      <TableCell align=\"center\">End Time</TableCell>\r\n                      <TableCell align=\"center\">Check</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {data && classes.map(clas=>(\r\n                      <TableRow key={clas.id}>\r\n                        <TableCell align=\"center\">{clas.room}</TableCell>\r\n                        <TableCell align=\"center\">{clas.startTime}</TableCell>\r\n                        <TableCell align=\"center\">{clas.endTime}</TableCell>\r\n                        <TableCell align=\"center\">\r\n                        {data && check(clas.id, data.attendances)?<CheckIcon/>:<CloseIcon/>}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                    \r\n\r\n                  </TableBody>\r\n                </Table>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { GET_STUDENTS_BY_COURSE } from '../Query'\r\nimport { StudentType, ClassType } from '../Interfaces'\r\nimport { List, ExpansionPanel, ExpansionPanelSummary, Typography, ExpansionPanelDetails } from '@material-ui/core'\r\nimport CourseStudentAttendance from './CourseStudentAttendance'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\ninterface Props {\r\n    course_id:string\r\n    classes:ClassType[]\r\n}\r\ninterface StudentListData{\r\n    students:StudentType[]\r\n}\r\nexport default function CourseStudentList(props: Props): ReactElement {\r\n    const course_id=props.course_id\r\n    const classes=props.classes\r\n    const {loading,data}=useQuery<StudentListData,{}>(\r\n        GET_STUDENTS_BY_COURSE,\r\n        {variables:{course_id:course_id}}\r\n    )\r\n    return (\r\n        <div>\r\n            {loading?\r\n            <div>loading...</div>:\r\n            \r\n            <List>\r\n            {data && data.students && data.students.map(student=>(\r\n                student &&\r\n                <div>\r\n                <ExpansionPanel>\r\n                <ExpansionPanelSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id={student.id}\r\n                >\r\n                    <Typography >{student.FirstName}</Typography>\r\n                    \r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <CourseStudentAttendance course_id={course_id} student_id={student.id} classes={classes}/>\r\n                </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n                </div>\r\n            ))}\r\n            </List>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { useQuery, useSubscription } from '@apollo/react-hooks';\r\nimport { CourseType, Role, ClassSubscriptionPayload, AttendanceType } from '../Interfaces';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Typography ,Button, makeStyles} from '@material-ui/core';\r\nimport {GET_COURSE } from '../Query'\r\nimport {GET_CLASS_SUB, GET_ATTENDANCE_SUB}from '../Subscription'\r\nimport UpdateCourse from './UpdateCourse';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport CourseStudentList from './CourseStudentList';\r\nimport CreateClass from './CreateClass';\r\n\r\ninterface CourseData{\r\n    course:CourseType\r\n}\r\ninterface CourseVars{\r\n    coure_id:string\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\ninterface AddAttendace{\r\n  attendance:AttendanceType\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    maxWidth: 752,\r\n  },\r\n  container: {\r\n    marginTop: 10,\r\n  }\r\n}));\r\n\r\n\r\nexport default function Course(props: Props): ReactElement {\r\n    const classes = useStyles()\r\n    const role=localStorage.getItem(\"role\");\r\n    const [open, setOpen] = useState(false);\r\n    const [update, setUpdate] = useState(false);\r\n    const [addClass, setAddClass] = useState(false);\r\n    const { loading, data, refetch,networkStatus  } = useQuery<CourseData, CourseVars>(\r\n        GET_COURSE,\r\n        { variables: { coure_id: props.match.params.id },notifyOnNetworkStatusChange: true }\r\n        \r\n    );\r\n\r\n\r\n    const sub=useSubscription<AddAttendace>(GET_ATTENDANCE_SUB);\r\n    if(sub.data)\r\n    {\r\n      console.log(\"get response from subscription\")\r\n      console.log(sub.data)\r\n      refetch()\r\n    }\r\n    const showSuperAdminCourse = () => (\r\n      <Fragment>\r\n      <Grid container spacing={3} className={classes.container}>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">\r\n          Student List\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>ID</TableCell>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data && data.course.enrollments && data.course.enrollments.map(enrollment=>(\r\n                enrollment && enrollment.student &&\r\n                <TableRow>\r\n                  <TableCell key={enrollment.student.id}>\r\n                    <NavLink to={\"/student/\"+enrollment.student.id}>\r\n                      {enrollment.student.FirstName} {enrollment.student.LastName}\r\n                    </NavLink>\r\n                  </TableCell>\r\n                  <TableCell key={enrollment.student.id}>\r\n                    <NavLink to={\"/student/\"+enrollment.student.id}>\r\n                      {enrollment.student.id}\r\n                    </NavLink>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">\r\n          Class List\r\n        </Typography>\r\n        {showClassTable()}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={()=>setUpdate(!update)}>update</Button>\r\n      </Grid>\r\n    </Grid>\r\n    </Fragment>\r\n    ); \r\n    const showAdminCourse = () => (\r\n      <Fragment>\r\n      <Grid container spacing={3} className={classes.container}>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">\r\n          Student List\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>ID</TableCell>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data && data.course.enrollments && data.course.enrollments.map(enrollment=>(\r\n                enrollment && enrollment.student &&\r\n                <TableRow>\r\n                  <TableCell key={enrollment.student.id}>\r\n                    <NavLink to={\"/student/\"+enrollment.student.id}>\r\n                      {enrollment.student.FirstName} {enrollment.student.LastName}\r\n                    </NavLink>\r\n                  </TableCell>\r\n                  <TableCell key={enrollment.student.id}>\r\n                    <NavLink to={\"/student/\"+enrollment.student.id}>\r\n                      {enrollment.student.id}\r\n                    </NavLink>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">\r\n          Class List\r\n        </Typography>\r\n        {showClassTable()}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={()=>setUpdate(!update)}>update</Button>\r\n      </Grid>\r\n    </Grid>\r\n    </Fragment>\r\n    ); \r\n    const showUserCourse = () => (\r\n      <Fragment>\r\n      <Grid container spacing={3} className={classes.container}>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">\r\n         Enrolled Students\r\n        </Typography>\r\n        {data && data.course && <CourseStudentList course_id={data.course.id} classes={data.course.classes}/> }\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">\r\n          Classes      \r\n          <Button color=\"primary\" variant=\"text\" style={{display:addClass?\"none\":\"inline\"}} onClick={() => \r\n            setAddClass(true) }>\r\n            Add Class\r\n          </Button>   \r\n        </Typography>\r\n        \r\n      {addClass?<div>{data && data.course && <CreateClass course_id={data.course.id}></CreateClass> }</div>:\r\n      showClassTable()\r\n      }\r\n        \r\n      </Grid>\r\n\r\n    </Grid>\r\n    </Fragment>\r\n    ); \r\n    const showClassTable = () =>(\r\n      <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">Room</TableCell>\r\n            <TableCell align=\"center\">Start Time</TableCell>\r\n            <TableCell align=\"center\">End Time</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data && data.course.classes && data.course.classes.map((clas)=>(\r\n            <TableRow key={clas.id}>\r\n              <TableCell align=\"center\">{clas.room}</TableCell>\r\n              <TableCell align=\"center\">{clas.startTime}</TableCell>\r\n              <TableCell align=\"center\">{clas.endTime}</TableCell>\r\n            </TableRow>\r\n        ))} \r\n        </TableBody>\r\n      </Table>\r\n      </TableContainer>\r\n    )\r\n    \r\n    return (\r\n      <Fragment>\r\n        {loading?\r\n        <div>loading...</div>:\r\n        <Fragment>\r\n        {update ? (\r\n          data && <UpdateCourse course={data.course}></UpdateCourse>\r\n        ) : (\r\n          <Fragment>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {data && data.course.id} - {data && data.course.name} \r\n          </Typography>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {data && data.course.program.name}\r\n          </Typography>\r\n          <Divider/>\r\n          {role==Role.SUPERADMIN?\r\n            showSuperAdminCourse()\r\n            :\r\n            role==Role.ADMIN?  \r\n            showAdminCourse()\r\n            :\r\n            showUserCourse()\r\n          }\r\n          \r\n          </Fragment>\r\n\r\n        )}\r\n        \r\n        </Fragment>\r\n      }\r\n      </Fragment>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType } from '../Interfaces';\r\nimport { GET_STUDENTS } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface StudentListData {\r\n    students: StudentType[];\r\n}\r\n  \r\ninterface StudentListVars {\r\n    student_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function StudentList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<StudentListData,StudentListVars>(\r\n        GET_STUDENTS\r\n    );\r\n    return (\r\n        <div>\r\n            Student list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.students.map(student => (\r\n                    <List key={student.id} className=\"student-list\"> \r\n                    <NavLink to={\"/student/\"+student.id}> {student.FirstName} {student.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, ChangeEvent } from 'react'\r\nimport { Select, MenuItem} from '@material-ui/core'\r\nimport {  CourseType, ProgramType } from '../Interfaces'\r\nimport SelectProgram from './SelectProgram';\r\nimport { GET_PROGRAMS, GET_COURSES_BY_PROGRAM_ID } from '../Query';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\ninterface Props {\r\n    onProgramClick:any\r\n    onCourseClick:any\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface CourseData{\r\n    courses:CourseType[]|undefined\r\n}\r\ninterface CourseVars{\r\n    program_id:string\r\n}\r\ninterface ProgramListVars {\r\n\r\n}\r\nexport default function SelectCourses(props: Props): ReactElement {\r\n\r\n    const [program_id,setProgram]=useState<string>(\"\");\r\n    const [course,setCourse]=useState<string>();\r\n    \r\n\r\n    const {loading,data} = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n\r\n    const result = useQuery<CourseData,CourseVars>(\r\n        GET_COURSES_BY_PROGRAM_ID,\r\n        {variables:{program_id:program_id}}\r\n    );\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n        props.onProgramClick(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n        props.onCourseClick(course_id)\r\n    }\r\n\r\n    const [state, setState] = React.useState({});\r\n    const handleChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n\r\n        let selected:string[]=[];\r\n    \r\n        for (let [key, value] of Object.entries(state)) {\r\n            console.log(key, value);\r\n            if(value) selected.push(key)\r\n        }\r\n        props.onCourseClick(selected)\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {loading\r\n            ?\r\n        <div>loading....</div>\r\n            :\r\n        <SelectProgram programs={data?.programs} onProgramClick={onProgramClick}/>\r\n        }\r\n        \r\n\r\n        <br/>\r\n        <Select value={course} onChange={e=>{\r\n            setCourse(e.target.value as string)\r\n            props.onCourseClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            result.data?.courses?.map(course=>(\r\n                <MenuItem  key={course.id} value={course.id}>\r\n                    {course.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport {Button } from '@material-ui/core'\r\nimport { useMutation  } from '@apollo/react-hooks';\r\nimport {EnrollmentType} from '../Interfaces'\r\nimport {CREATE_ENROLLMENT}from '../Mutation'\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    student_id:string\r\n\r\n}\r\n\r\n\r\ninterface EnrollmentData{\r\n    enrollment:EnrollmentType\r\n}\r\ninterface EnrollmentVars{\r\n\r\n}\r\n\r\nexport default function CreateEnrollment(props: Props): ReactElement {\r\n\r\n\r\n\r\n    const [id, setID] = useState(props.student_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n    {console.log(id)}\r\n\r\n    const [saveEnrollment, { error, data }]=useMutation<EnrollmentData,EnrollmentVars>(\r\n        CREATE_ENROLLMENT,\r\n        {\r\n            variables:{student_id:props.student_id,course_id:course}\r\n        }\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.enrollment \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveEnrollment() }>\r\n            Update User\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType } from '../Interfaces';\r\nimport { GET_PROGRAMS} from '../Query';\r\nimport {UPDATE_STUDENT,CREATE_ENROLLMENT}from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    student:StudentType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    updateStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const student=props.student\r\n    const [FirstName, setFirstName] = useState(student.FirstName)\r\n    const [lastName, setLastName] = useState(student.LastName)\r\n    const [program, setProgram] = useState(student.program.id)\r\n    const [password, setPassword] = useState(student.password)\r\n    const [id, setID] = useState(student.id)\r\n    const [email, setEmail] = useState(student.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            FirstName:FirstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateStudent \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateStudent.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateStudent.FirstName} {data.updateStudent.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateStudent.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateStudent.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={FirstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && FirstName && lastName && password && program && saveStudent() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport {List,ListItem,Collapse,Typography, Button, makeStyles} from '@material-ui/core';\r\nimport UpdateStudent from './UpdateStudent'\r\nimport {  GET_STUDENT } from '../Query';\r\nimport {GET_ATTENDANCE_SUB} from '../Subscription'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface StudentData{\r\n    student:StudentType;\r\n}\r\ninterface StudentVars{\r\n    student_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      maxWidth: 752,\r\n    },\r\n    table: {\r\n      width: '40%'\r\n    },\r\n    marginTop:{\r\n        marginTop: 20,\r\n    }\r\n\r\n  }));\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    const classes = useStyles();\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<StudentData,StudentVars>(\r\n        GET_STUDENT,\r\n        {variables:{student_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE_SUB);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(false);\r\n    const [update,setUpdate]=useState(false);\r\n    const role = localStorage.getItem('role')\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateStudent student={data.student}></UpdateStudent>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            <TableContainer component={Paper} className={classes.table}>\r\n                <Table>\r\n                  <TableRow>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            Student ID :\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            {data && data.student.id}\r\n                        </Typography>\r\n                      </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            Name :\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            {data && data.student.FirstName} {data && data.student.LastName}\r\n                        </Typography>\r\n                      </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            Program :\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            {data && data.student.program.name}\r\n                        </Typography>\r\n                      </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            Email :\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            {data && data.student.email}\r\n                        </Typography>\r\n                      </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            Status :\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\">\r\n                            {data && data.student.status}\r\n                        </Typography>\r\n                      </TableCell>\r\n                  </TableRow>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {role!=='USER'? \r\n                <div className={classes.marginTop}>\r\n                    <Typography variant=\"h5\">\r\n                        Enrolled Courses\r\n                    </Typography>\r\n                {data && data.student.enrollments.map(enrollment=>(\r\n                    \r\n                    <List>\r\n                        <ListItem button onClick={()=>(setOpen(!open))} >\r\n                            <Typography variant=\"h5\">\r\n                                {enrollment.course.name}\r\n                            </Typography>\r\n                            \r\n                        </ListItem>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <List>\r\n                            {enrollment.course.classes.map(clas=>(\r\n                                <ListItem >class room:{clas.room}</ListItem>\r\n                            ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </List>\r\n                    \r\n                ))}\r\n                <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n                </div>\r\n\r\n                :\r\n                <div>\r\n                Enrolled Course List\r\n                {data && data.student.enrollments.map(enrollment=>(\r\n                    \r\n                    <List>\r\n                        <ListItem button onClick={()=>(setOpen(!open))} >\r\n                            {enrollment.course.name}\r\n                        </ListItem>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <List>\r\n                            {enrollment.course.classes.map(clas=>(\r\n                                <ListItem >class room:{clas.room}</ListItem>\r\n                            ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </List>\r\n                    \r\n                ))}\r\n                <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n                </div>\r\n            }\r\n                \r\n            \r\n\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation  } from '@apollo/react-hooks';\r\n\r\nimport {ProgramType} from '../Interfaces'\r\nimport {CREATE_PROGRAM} from '../Mutation'\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramData{\r\n    createProgram:ProgramType\r\n}\r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n\r\n    \r\n\r\n    const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n        CREATE_PROGRAM,\r\n        {variables:{id:id,name:name}}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Program</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createProgram ? \r\n            <p>Saved!</p> : \r\n         \r\n            <div className=\"CreateProgram\">\r\n            <TextField\r\n            placeholder=\"Enter the Program name\"\r\n            label=\"Program Name\"\r\n            value={name}\r\n            onChange={e=>setName(e.target.value)}\r\n            />\r\n            <br/>\r\n            <TextField\r\n            placeholder=\"Enter program ID\"\r\n            label=\"Program ID\"\r\n            value={id}\r\n            onChange={e=>setID(e.target.value)}\r\n            />\r\n            <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n                Create Program\r\n            </Button>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType} from '../Interfaces'\r\nimport {GET_PROGRAMS} from '../Query'\r\nimport {CREATE_COURSE} from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\n\r\ninterface CourseData{\r\n    createCourse:CourseType\r\n}\r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    NOS:number;\r\n    program_id:string\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [numOfStudent, setNOS] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    \r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n        CREATE_COURSE,\r\n        {variables:{id:id,name:name,NOS:Number(numOfStudent),program_id:program}}\r\n    )\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.createCourse \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <form>\r\n        <div className=\"CreateCourse\">\r\n        <TextField\r\n        placeholder=\"Enter the course name\"\r\n        label=\"Course Name\"\r\n        value={name}\r\n        onChange={e=>setName(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter course ID\"\r\n        label=\"Course ID\"\r\n        value={id}\r\n        onChange={e=>setID(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter number of student\"\r\n        label=\"Number of student\"\r\n        value={numOfStudent}\r\n        onChange={e=>setNOS(e.target.value)}\r\n        />\r\n        <br/>\r\n       \r\n        <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n \r\n        <br/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => id && name && numOfStudent && program && saveCourse()}>\r\n            Create Course\r\n        </Button>\r\n        </div>\r\n        </form>\r\n        \r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_FACULTIES } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface FacultyListData {\r\n    faculties: FacultyType[];\r\n}\r\n  \r\ninterface FacultyListVars {\r\n    faculty_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function FacultyList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<FacultyListData,FacultyListVars>(\r\n        GET_FACULTIES\r\n    );\r\n    return (\r\n        <div>\r\n            Faculty list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.faculties.map(faculty => (\r\n                    <List key={faculty.id} className=\"student-list\"> \r\n                    <NavLink to={\"/faculty/\"+faculty.id}> {faculty.FirstName} {faculty.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType, InstructingType} from '../Interfaces'\r\nimport {GET_PROGRAMS } from '../Query'\r\nimport {CREATE_COURSE,CREATE_INSTRUCTING} from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    faculty_id:string\r\n}\r\ninterface InstructingData{\r\n    insctructing:InstructingType\r\n}\r\ninterface InstructingVars{\r\n\r\n}\r\n\r\nexport default function CreateInstructing(props: Props): ReactElement {\r\n\r\n\r\n    const [id, setID] = useState(props.faculty_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n\r\n    const [saveInstructing, { error, data }]=useMutation<InstructingData,InstructingVars>(\r\n        CREATE_INSTRUCTING,\r\n        {\r\n            variables:{faculty_id:props.faculty_id,course_id:course}\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.insctructing \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveInstructing() }>\r\n            Add Course\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, GET_PROGRAMS_BY_FAULTY_ID} from '../Query';\r\nimport {UPDATE_FACULTY,CREATE_ENROLLMENT}from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\nimport CreateInstructing from '../instructing/CreateInstructing';\r\n\r\ninterface Props {\r\n    faculty:FacultyType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    updateFaculty: FacultyType;\r\n}\r\n  \r\ninterface FacultyVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const faculty=props.faculty\r\n    const [FirstName, setFirstName] = useState(faculty.FirstName)\r\n    const [lastName, setLastName] = useState(faculty.LastName)\r\n    const [program, setProgram] = useState<string|undefined>(faculty.program?faculty.program.id:undefined)\r\n    const [password, setPassword] = useState(faculty.password)\r\n    const [id, setID] = useState(faculty.id)\r\n    const [email, setEmail] = useState(faculty.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const role=localStorage.getItem('role')\r\n    const QERUY=role=='USER'?GET_PROGRAMS_BY_FAULTY_ID:GET_PROGRAMS\r\n    const result = useQuery<ProgramListData,ProgramListVars>(QERUY,{variables:{id:id}});\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData,FacultyVars>(\r\n        UPDATE_FACULTY,\r\n        {variables:{\r\n            id:id,\r\n            FirstName:FirstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    console.log(data)\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateInstructing faculty_id={id}></CreateInstructing>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateFaculty \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateFaculty.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateFaculty.FirstName} {data.updateFaculty.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateFaculty.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateFaculty.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={FirstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    Current program is {faculty.program ? faculty.program.name : \"none\"}\r\n                    {result && result.data && \r\n                     <SelectProgram programs={result.data.programs} onProgramClick={onProgramClick}/>\r\n                    }\r\n                        \r\n\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && FirstName && lastName && password && program && saveFaculty() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { AttendanceType } from '../Interfaces'\r\nimport {  GET_CLASS_ATTENDANCE } from '../Query'\r\nimport { List, ListItem } from '@material-ui/core'\r\n\r\ninterface Props {\r\n    class_id:string\r\n}\r\ninterface AttendanceData{\r\n    attendances:AttendanceType[]\r\n}\r\nexport default function ClassAttendance(props: Props): ReactElement {\r\n    const {loading,data}=useQuery<AttendanceData,{}>(\r\n        GET_CLASS_ATTENDANCE,\r\n        {variables:{class_id:props.class_id}}\r\n    )\r\n    return (\r\n        <div>\r\n            {loading?\r\n            <div>loading...</div>\r\n            :\r\n            <List>{data && data.attendances.map(attendance=>(\r\n                <ListItem>{attendance.student.FirstName} {attendance.time} </ListItem>\r\n            ))}\r\n            </List>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { ClassType, AttendanceType } from '../Interfaces'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { GET_CLASS, GET_CLASS_ATTENDANCE } from '../Query'\r\nimport ClassAttendance from '../attendances/ClassAttendance'\r\n\r\n\r\ninterface Props {\r\n    class:ClassType\r\n}\r\n\r\nexport default function Class(props: Props): ReactElement {\r\n    \r\n    return (\r\n        <div>\r\n            <h5>\r\n            class room:{props.class.room}\r\n            class start:{props.class.startTime}\r\n            class end:{props.class.endTime}\r\n            </h5>\r\n            <ClassAttendance class_id={props.class.id}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload, FacultyType } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button, TableContainer, Paper, Table, TableHead, TableRow, TableBody, TableCell} from '@material-ui/core';\r\nimport UpdateFaculty from './UpdateFaculty'\r\n\r\nimport { GET_FACULTY } from '../Query';\r\nimport {GET_ATTENDANCE_SUB}from '../Subscription'\r\nimport Class from '../classes/Class';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface FacultyData{\r\n    faculty:FacultyType;\r\n}\r\ninterface FacultyVars{\r\n    faculty_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Faculty(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<FacultyData,FacultyVars>(\r\n        GET_FACULTY,\r\n        {variables:{faculty_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE_SUB);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {loading\r\n            ?\r\n        <div>loading...</div>\r\n            :\r\n        update \r\n            ? \r\n        (data && <UpdateFaculty faculty={data.faculty}/>) \r\n            : \r\n        (\r\n            data &&\r\n            <Fragment>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n               Faculty ID: {data && data.faculty && data.faculty.id} \r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n               Faculty Name: {data && data.faculty && data.faculty.FirstName} {data && data.faculty && data.faculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Eamil: {data && data.faculty && data.faculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Status: {data && data.faculty && data.faculty.status}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Program: {data && data.faculty.program && data.faculty.program.name}\r\n            </Typography>\r\n\r\n            {data && data.faculty && data.faculty.instructings && data.faculty.instructings.map(instructing=>(\r\n                \r\n                <List>\r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {instructing.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {instructing.course.classes.map(clas=>(\r\n                            <ListItem ><Class class={clas}/></ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS  } from '../Query';\r\nimport {CREATE_FACULTY} from '../Mutation'\r\nimport SelectProgram from '../common/SelectProgram';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    createFaculty: FacultyType;\r\n}\r\n  \r\n\r\n\r\nexport default function CreateFaculty({}: Props): ReactElement {\r\n    const [FirstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [FirstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData>(\r\n        CREATE_FACULTY,\r\n        {variables:{\r\n            id:id,\r\n            FirstName:FirstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"888\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        setID(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(FirstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= FirstName[0]+\r\n                lastName+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n\r\n        return email\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add Faculty</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createFaculty \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty ID: {data && data.createFaculty.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty name: {data && data.createFaculty.FirstName} {data.createFaculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Email: {data && data.createFaculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty: {data && data.createFaculty.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={FirstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(FirstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(FirstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(FirstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\" \r\n                disabled={passwordValid !== 'success' || FirstNameValid !== 'success' || lastNameValid !== 'success' }    \r\n                onClick={() =>id && FirstName && lastName && email &&password && saveFaculty()}>\r\n                    Add\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { GET_INSTRUCTINGS } from '../Query'\r\nimport { InstructingType } from '../Interfaces'\r\nimport { List, ListItem } from '@material-ui/core'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ninterface Props {\r\n    faculty_id:string\r\n}\r\ninterface InstructingData{\r\n    instructings:InstructingType[]\r\n}\r\n\r\nexport default function Instructing({}: Props): ReactElement {\r\n    const {loading,data}=useQuery<InstructingData,{}>(\r\n        GET_INSTRUCTINGS,\r\n        {variables:{faculty_id:localStorage.getItem(\"id\")}}\r\n    )\r\n    return (\r\n        <div>\r\n            {loading?\r\n                <div>loading....</div>\r\n                :\r\n                <List>\r\n                {data && data.instructings.map(instructing=>(\r\n                    <ListItem button component={NavLink} to={`/classes/${instructing.course.id}`}>{instructing.course.name}</ListItem>\r\n                ))}\r\n                </List>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { ClassType } from '../Interfaces'\r\nimport { GET_CLASSES_BY_COURSE } from '../Query'\r\nimport Class from './Class'\r\ninterface Props {\r\n    match:any\r\n}\r\ninterface ClassListData{\r\n    classes:ClassType[]\r\n}\r\nexport default function ClassList(props: Props): ReactElement {\r\n    const course_id=props.match.params.id\r\n    const {loading,data}=useQuery<ClassListData,{}>(\r\n        GET_CLASSES_BY_COURSE,\r\n        {variables:{course_id:course_id}}\r\n    )\r\n    return (\r\n        <div>\r\n            {loading?\r\n            <div>loading...</div>\r\n                :\r\n            <div>\r\n            {data && data.classes && data.classes.map(clas=>(\r\n                <Class class={clas}/>\r\n            ))}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./component/signup/Home\";\r\nimport Login from \"./component/signup/Login\";\r\nimport Signup from \"./component/signup/Signup\";\r\nimport ProgramList from \"./component/programs/ProgramList\";\r\nimport ProgramDetail from \"./component/programs/ProgramDetail\";\r\nimport CourseList from \"./component/courses/CourseList\";\r\nimport Course from \"./component/courses/Course\";\r\nimport StudentList from \"./component/students/StudentList\";\r\nimport Student from \"./component/students/Student\";\r\nimport CreateProgram from \"./component/programs/CreateProgram\";\r\nimport CreateCourse from \"./component/courses/CreateCourse\";\r\nimport FacultyList from \"./component/faculties/FacultyList\";\r\nimport Faculty from \"./component/faculties/Faculty\";\r\nimport CreateFaculty from \"./component/faculties/CreateFaculty\";\r\nimport InstructingList from \"./component/instructing/InstructingList\";\r\nimport ClassList from \"./component/classes/ClassList\";\r\ninterface RouteProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nexport const Routes: React.FunctionComponent<RouteProps> = (childProps) =>\r\n  <Switch>\r\n    <Route path=\"/home\" exact render={(props) => <Home {...props} {...childProps} />}/>\r\n    <Route path='/signup' exact render={(props) => <Signup {...props} {...childProps} />}/>\r\n    <Route path='/login' exact render={(props) => <Login {...props} {...childProps} />}/>\r\n\r\n    <Route path=\"/create/program\" exact component={CreateProgram} />\r\n    <Route path=\"/create/course\" exact component={CreateCourse} />\r\n    <Route path=\"/create/faculty\" exact component={CreateFaculty} />\r\n    <Route path=\"/create/student\" exact component={Signup} />\r\n\r\n    <Route path=\"/programs\" exact component={ProgramList} />\r\n    <Route path=\"/courses\" exact component={CourseList} />\r\n    <Route path=\"/faculties\" exact component={FacultyList} />\r\n    <Route path=\"/students\" exact component={StudentList} />\r\n    \r\n\r\n    <Route path=\"/program/:id\" exact component={ProgramDetail} />\r\n    <Route path=\"/course/:id\" exact component={Course} />\r\n    <Route path=\"/faculty/:id\" exact component={Faculty} />\r\n    <Route path=\"/student/:id\" exact component={Student} />\r\n    <Route path=\"/instructing/:id\" exact component={InstructingList} />\r\n    <Route path=\"/classes/:id\" exact component={ClassList} />\r\n\r\n    <Route path=\"/\" >Not Found</Route>\r\n  </Switch>;","import { split } from 'apollo-link';\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink,createHttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { setContext } from 'apollo-link-context';\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://murmuring-fortress-24950.herokuapp.com/'\r\n});\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://murmuring-fortress-24950.herokuapp.com/',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('token');\r\n  console.log(\"sending token\")\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n}); \r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n);\r\n  \r\n\r\nconst client=new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache(),\r\n    credentials: 'include',\r\n    request: async operation => {\r\n      operation.setContext({\r\n        fetchOptions: {\r\n          credentials: 'same-origin'\r\n        }\r\n      })\r\n    },\r\n    fetchOptions: {\r\n      credentials: 'include'\r\n   }\r\n  })\r\n\r\nexport default client","import React, { Fragment, ReactElement } from 'react'\r\nimport { AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs,Chip, Button, Icon } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role, FacultyType } from './Interfaces';\r\n\r\n\r\nimport {  } from '@material-ui/core'\r\nimport LibraryBooksOutlinedIcon from '@material-ui/icons/LibraryBooksOutlined';\r\nimport QueueOutlinedIcon from '@material-ui/icons/QueueOutlined';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PeopleAltTwoToneIcon from '@material-ui/icons/PeopleAltTwoTone';\r\nimport GroupAddTwoToneIcon from '@material-ui/icons/GroupAddTwoTone';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\n\r\ninterface Props {\r\n  history:any\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root:{\r\n    textDecoration:'none',\r\n    display: 'flex',\r\n  },\r\n  avtive: {\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n    textDecoration:'none'\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0',\r\n    marginLeft: '5px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  sidebarIcon: {\r\n    height: 24,\r\n  }\r\n}));\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst Nav = (props: Props):ReactElement => {\r\n    const classes = useStyles();\r\n    const role=localStorage.getItem(\"role\");\r\n\r\n    const handleLogout =  () => {\r\n      props.userHasAuthenticated(false);\r\n\r\n      localStorage.clear()\r\n    }\r\n\r\n    return (\r\n    role==Role.SUPERADMIN\r\n        ?\r\n        <div>\r\n          <ListItem button component={NavLink} to=\"/home\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <HomeOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/programs\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Programs\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/program\">\r\n            <ListItemIcon>\r\n              <AddBoxOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Program\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/courses\"> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Courses\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/course\">  \r\n            <ListItemIcon>\r\n              <QueueOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Course\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/students\">     \r\n            <ListItemIcon>\r\n              <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/student\">  \r\n            <ListItemIcon>\r\n              <GroupAddIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/faculties\">  \r\n            <ListItemIcon>\r\n              <PeopleAltTwoToneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Faculty\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/faculty\">\r\n            <ListItemIcon>\r\n              <GroupAddTwoToneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Faculty\" />\r\n          </ListItem>\r\n        </div>\r\n\r\n        :\r\n\r\n    role==Role.ADMIN\r\n        ?\r\n        <div>\r\n          <ListItem button component={NavLink} to=\"/home\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <HomeOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/programs\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Programs\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/courses\"> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Courses\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/course\">  \r\n            <ListItemIcon>\r\n              <QueueOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Course\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/students\">     \r\n            <ListItemIcon>\r\n              <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/student\">  \r\n            <ListItemIcon>\r\n              <GroupAddIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/faculties\">  \r\n            <ListItemIcon>\r\n              <PeopleAltTwoToneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Faculty\" />\r\n          </ListItem>\r\n        </div>\r\n\r\n        :\r\n\r\n        <div>\r\n          <ListItem button component={NavLink} to=\"/home\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <HomeOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/programs\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Programs\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to={`/courses`}> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Courses\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to={`/faculty/${localStorage.getItem(\"id\")}`}> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"MyPage\" />\r\n          </ListItem>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React ,{Component,Fragment, useState, PropsWithChildren, ReactElement}from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs,Chip, Button, Icon  } from '@material-ui/core'\r\nimport { emphasize, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {LockOpen,Person,Loyalty,Subject} from '@material-ui/icons'\r\nimport PropTypes from 'prop-types';\r\nimport { Routes } from \"./Routes\";\r\nimport client from './Client'\r\nimport Login from './component/signup/Login'\r\nimport ProgramList from './component/programs/ProgramList'\r\nimport './App.css';\r\nimport CourseList from './component/courses/CourseList';\r\nimport FacultyList from './component/faculties/FacultyList';\r\nimport StudentList from './component/students/StudentList';\r\nimport { Role, FacultyType } from './component/Interfaces';\r\nimport Nav from './component/Nav';\r\n\r\nimport clsx from 'clsx'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\ninterface AppProps {\r\n  history: any;\r\n}\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0',\r\n    marginLeft: '5px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  sidebarIcon: {\r\n    height: 24,\r\n  }\r\n}));\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nfunction App(props:AppProps): ReactElement<AppProps> {\r\n  const classes = useStyles();\r\n  const [isAuthenticated,setIsAuth]=useState(localStorage.getItem(\"role\")?true:false)\r\n  const [isAuthenticating,setIsAuth2]=useState(false)\r\n  const [value,setValue]=useState(0)\r\n\r\n  // for material ui\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n\r\n  // async componentDidMount() {\r\n    // try {\r\n    //   if (await Auth.currentSession()) {\r\n    //     this.userHasAuthenticated(true);\r\n    //   }\r\n    // }\r\n    // catch(e) {\r\n    //   if (e !== 'No current user') {\r\n    //     alert(e);\r\n    //   }\r\n    // }\r\n  \r\n  //   setIsAuth2(false);\r\n  // }\r\n  const userHasAuthenticated = (authenticated: boolean) => {\r\n    setIsAuth(authenticated);\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    // await Auth.signOut();\r\n  \r\n    userHasAuthenticated(false);\r\n    //props.history.push(\"/login\");\r\n  }\r\n\r\n  const handleChange = (event:React.ChangeEvent<{}>, newValue:number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  const showLoggedInBar = () => {\r\n    \r\n    \r\n  };\r\n\r\n\r\n  const showLoggedOutBar = () => (\r\n    <Fragment>\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink to=\"/\">Home</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n    </Breadcrumbs>\r\n\r\n      \r\n    </Fragment>\r\n  );\r\n\r\n  \r\n\r\n\r\n  const childProps = {\r\n    isAuthenticated: isAuthenticated,\r\n    userHasAuthenticated: userHasAuthenticated\r\n  };\r\n\r\n\r\n    \r\n  return (\r\n    <div>\r\n    <ApolloProvider client={client}>\r\n      {isAuthenticated ? \r\n        <div className={classes.root}>\r\n          <CssBaseline />\r\n          <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n            <Toolbar className={classes.toolbar}>\r\n              <IconButton\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={handleDrawerOpen}\r\n                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                Pi-Porject\r\n              </Typography>\r\n              <Button color=\"inherit\" component={NavLink} to=\"/\" onClick={handleLogout}>\r\n                    Log Out\r\n                    <Icon className={classes.toolbarIcon}>\r\n                      <ExitToAppIcon/>\r\n                    </Icon>\r\n              </Button>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Drawer\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n            }}\r\n            open={open}\r\n          >\r\n            <div className={classes.toolbarIcon}>\r\n              <IconButton onClick={handleDrawerClose}>\r\n                <ChevronLeftIcon />\r\n              </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n              <Nav history={props.history} isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>\r\n            </List>\r\n          </Drawer>\r\n          <main className={classes.content}>\r\n            <div className={classes.appBarSpacer} />\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n            </Container>\r\n          </main>\r\n        </div>\r\n        :\r\n        <Login isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>\r\n      }\r\n{/* \r\n    <div>\r\n      {isAuthenticated ? \r\n        <Nav history={props.history} isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/> : \r\n        <Login isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>}\r\n      <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n    </div> */}\r\n    </ApolloProvider>\r\n    </div>\r\n  );\r\n  \r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={'/client'}>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}