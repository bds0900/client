{"version":3,"sources":["component/signup/Home.tsx","component/Query.ts","component/signup/Login.tsx","component/common/SelectProgram.tsx","component/signup/Signup.tsx","component/programs/Program.tsx","component/programs/ProgramList.tsx","component/programs/UpdateProgram.tsx","component/programs/ProgramDetail.tsx","component/courses/CourseList.tsx","component/courses/UpdateCourse.tsx","component/courses/Course.tsx","component/students/StudentList.tsx","component/common/SelectCourses.tsx","component/enrollment/CreateEnrollment.tsx","component/students/UpdateStudent.tsx","component/students/Student.tsx","component/programs/CreateProgram.tsx","component/courses/CreateCourse.tsx","component/faculties/FacultyList.tsx","component/faculties/UpdateFaculty.tsx","component/faculties/Faculty.tsx","component/faculties/CreateFaculty.tsx","Routes.tsx","component/Interfaces.ts","Client.js","component/Nav.tsx","App.tsx","index.js"],"names":["Home","props","GET_STUDENTS","gql","GET_STUDENT","CREATE_STUDENT","UPDATE_STUDENT","GET_ATTENDANCE","GET_PROGRAMS","GET_PROGRAM","CREATE_PROGRAM","UPDATE_PROGRAM","CREATE_COURSE","GET_COURSES","GET_COURSES_BY_PROGRAM_ID","GET_COURSE","UPDATE_COURSE","CREATE_ENROLLMENT","GET_FACULTIES","CREATE_FACULTY","LOGIN","emailRegex","Login","useState","email","setEmail","password","setPassword","emailValid","setEmailValid","passwordValid","setPasswrodValid","useMutation","variables","login","error","data","token","userHasAuthenticated","localStorage","setItem","Faculty","status","message","to","className","TextField","placeholder","label","value","onChange","event","target","test","toLowerCase","type","length","Button","color","variant","onClick","disabled","SelectProgram","programs","program","setProgram","InputLabel","Select","e","onProgramClick","map","MenuItem","key","id","name","nameRegex","Signup","firstName","setFirstName","lastName","setLastName","setID","firstNameValid","setFirstNameValid","lastNameValid","setLastNameValid","result","useQuery","program_id","saveStudent","genID","min","max","user_id","String","Math","floor","random","console","log","genEmail","substring","createStudent","Typography","gutterBottom","LastName","useStyles","makeStyles","theme","createStyles","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Program","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","List","courses","course","ListItem","ProgramList","loading","UpdateProgram","setName","saveProgram","updateProgram","update","setUpdate","match","params","faculties","faculty","students","student","CourseList","UpdateCourse","numOfStudent","NOS","setNOS","saveCourse","updateCourse","Number","Course","coure_id","enrollments","enrollment","StudentList","SelectCourses","setCourse","React","onCourseClick","CreateEnrollment","student_id","course_id","saveEnrollment","addCourse","updateStudent","Student","refetch","useSubscription","open","setOpen","button","Collapse","in","timeout","unmountOnExit","attendances","att","time","CreateProgram","createProgram","createCourse","FacultyList","saveFaculty","updateFaculty","faculty_id","instructings","instructing","CreateFaculty","createFaculty","MutationType","Role","Routes","childProps","path","exact","render","component","CreateCourse","ProgramDetail","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","authLink","setContext","_","headers","getItem","authorization","link","split","query","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","credentials","request","a","fetchOptions","textDecoration","avtive","background","border","borderRadius","boxShadow","height","padding","Nav","role","handleLogout","clear","SUPERADMIN","Breadcrumbs","aria-label","activeClassName","ADMIN","App","isAuthenticated","setIsAuth","authenticated","history","ReactDOM","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e75fd3e2.chunk.js","sourcesContent":["import React, { Fragment, ReactElement } from 'react'\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from '../Interfaces';\r\nimport Nav from '../Nav'\r\ninterface Props {\r\n    isAuthenticated: boolean;\r\n    userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nconst Home = (props: Props):ReactElement => {\r\n\r\n    return (\r\n        <Fragment>\r\n        \r\n        home\r\n        </Fragment>\r\n    )\r\n    \r\n}\r\n\r\nexport default Home\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_STUDENTS = gql`\r\n{\r\n  students{\r\n    id\r\n    firstName\r\n    LastName\r\n  }\r\n}\r\n`;\r\nexport const GET_STUDENT=gql`\r\n    query GET_STUDENT($student_id:ID){\r\n    student(where:{id:$student_id}){\r\n        id\r\n        firstName\r\n        LastName\r\n        email\r\n        status\r\n        program{\r\n            id\r\n            name\r\n        }\r\n        enrollments{\r\n            id\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    time\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n  }\r\n`;\r\nexport const CREATE_STUDENT=gql`\r\n    mutation CREATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createStudent(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"full-time\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const UPDATE_STUDENT=gql`\r\n    mutation UPDATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateStudent(\r\n            where:{id:$id},\r\n            data:{\r\n                firstName:$firstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"full-time\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nexport const GET_ATTENDANCE=gql`\r\n    subscription GET_ATTENDANCE{\r\n        attendance{\r\n            mutation\r\n            node{\r\n                time\r\n                student{\r\n                    id\r\n                    firstName\r\n                    enrollments{\r\n                        course{\r\n                            attendances{\r\n                                time\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n`;\r\n\r\n\r\nexport const GET_PROGRAMS = gql`\r\n{\r\n  programs(orderBy:name_ASC) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const GET_PROGRAM = gql`\r\nquery GET_PROGRAM($id:ID){\r\n  program(where:{id:$id}){\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATE_PROGRAM=gql`\r\n    mutation CREATE_PROGRAM($id:ID!,$name:String!){\r\n        createProgram(data:{\r\n            id:$id\r\n            name:$name\r\n        }){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_PROGRAM=gql`\r\n    mutation UPDATE_PROGRAM($id:ID!,$name:String!){\r\n        updateProgram(where:{id:$id},\r\n            data:{name:$name}\r\n        ){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nexport const CREATE_COURSE=gql`\r\n    mutation CREATE_COURSE($id:ID!,$name:String!,$NOS:Int!,$program_id:ID){\r\n        createCourse(data:{\r\n            id:$id\r\n            name:$name\r\n            numOfStudent:$NOS\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            name\r\n            numOfStudent\r\n            program{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const GET_COURSES = gql`\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSES_BY_PROGRAM_ID = gql`\r\n  query GET_COURSES_BY_PROGRAM_ID($program_id:ID)\r\n  {\r\n    courses(where:{\r\n        program:{\r\n            id:$program_id\r\n        }\r\n    }){\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSE = gql`\r\n  query Get_COURSE($coure_id: ID!) {\r\n    course(where: {id:$coure_id}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          firstName\r\n          LastName\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const UPDATE_COURSE=gql`\r\n    mutation UPDATE_COURSE($id:ID!,$name:String!,$NOS:Int,$program:ID){\r\n        updateCourse(where:{id:$id},\r\n            data:{\r\n                name:$name\r\n                numOfStudent:$NOS\r\n                program:{\r\n                    connect:{\r\n                        id:$program\r\n                    }\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            name\r\n            numOfStudent\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_ENROLLMENT=gql`\r\n    mutation CREATE_ENROLLMENT($student_id:ID,$course_id:ID){\r\n        createEnrollment(data:{\r\n            student:{\r\n                connect:{\r\n                    id:$student_id\r\n                }\r\n            }\r\n            course:{\r\n                connect:{\r\n                    id:$course_id\r\n                }\r\n            }\r\n        }){\r\n            student{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n`;\r\n\r\n\r\nexport const GET_FACULTIES=gql`\r\n    query{\r\n        faculties{\r\n            id\r\n            firstName\r\n            LastName\r\n        }\r\n    }\r\n`;\r\nexport const  GET_FACULTY=gql`\r\n    query($id:ID){\r\n        faculty{\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            instructings{\r\n                id\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_FACULTY=gql`\r\n    mutation CREATE_FACULTY(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createFaculty(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"USER\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const LOGIN=gql`\r\n    mutation LOGIN($email:String!,$password: String!){\r\n        login(data:{\r\n            email: $email\r\n            password: $password\r\n        }){\r\n            Faculty{\r\n                id,\r\n                firstName,\r\n                LastName,\r\n                email\r\n                status\r\n            },\r\n            token\r\n        }\r\n    }\r\n`;","\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport { Redirect } from 'react-router-dom';\r\n// import { FormGroup, FormControl, ControlLabel, Button, Glyphicon } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport React, { ReactElement, ReactComponentElement, useState } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { LOGIN } from '../Query';\r\nimport { FacultyType } from '../Interfaces';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\n\r\ninterface LoginProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\ninterface LoginState {\r\n  loading: boolean;\r\n  redirect: boolean;\r\n  email: string;\r\n  password: string;\r\n  emailValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n  passwordValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n}\r\ninterface LoginVars {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface authPayloadType {\r\n  Faculty: FacultyType;\r\n  token: string;\r\n}\r\ninterface LoginData{\r\n  login: authPayloadType\r\n}\r\n\r\nexport default function Login(props:LoginProps): ReactElement <LoginProps>  {\r\n\r\n    const [loading,setLoading]=useState(false);\r\n    const [redirect, setReirect] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [emailValid, setEmailValid] = useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n\r\n  const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setEmail(target.value)\r\n    setEmailValid(emailRegex.test(target.value.toLowerCase()) ? 'success' : 'error')\r\n  }\r\n\r\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setPassword(target.value);\r\n    setPasswrodValid(target.value.length < 8 ? 'error' : 'success')\r\n    \r\n  }\r\n\r\n  const onLogin = async (event: React.MouseEvent<HTMLButtonElement,MouseEvent>) => {\r\n    event.preventDefault();\r\n    setLoading( true );\r\n\r\n    // try {\r\n    //   await Auth.signIn(email, password);\r\n    //   props.userHasAuthenticated(true);\r\n    //   setReirect(true )\r\n    // } catch (e) {\r\n    //   alert(e.message);\r\n    //   setLoading(false);\r\n    // }\r\n  }\r\n  const [login, { error, data }] = useMutation<LoginData, LoginVars>(\r\n    LOGIN,\r\n    {variables:{email: email, password: password}}\r\n  )\r\n  //if get the data then save it\r\n  if(data && data.login.token!==\"Unable to login\")\r\n  {\r\n    props.userHasAuthenticated(true);\r\n    localStorage.setItem('token',data.login.token)\r\n    localStorage.setItem('role',data.login.Faculty.status)\r\n  }\r\n    return (\r\n      <div>\r\n      <h5>Log in</h5> \r\n      {error ? <p>Oh no! {error.message}</p> : null}\r\n      {data && data.login.token!==\"Unable to login\"\r\n        ?\r\n      <Redirect to='/home' />\r\n        :\r\n      <div className=\"Login\">\r\n        <div>\r\n           <TextField\r\n             placeholder=\"Enter your Username\"\r\n             label=\"Username\"\r\n             value={email}\r\n             onChange={onEmailChange}\r\n             />\r\n           <br/>\r\n            <TextField\r\n            type=\"password\"\r\n            placeholder=\"Enter your Password\"\r\n            label=\"Password\"\r\n            value={password}\r\n            onChange={onPasswordChange}\r\n            />\r\n           <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={()=>login()}\r\n            disabled={passwordValid !== 'success' || emailValid !== 'success' }>Log in</Button>\r\n         </div>\r\n      </div>\r\n\r\n      }\r\n    </div>\r\n    );\r\n  \r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { Select, MenuItem, InputLabel } from '@material-ui/core'\r\nimport { ProgramType } from '../Interfaces'\r\n\r\ninterface Props {\r\n    programs:ProgramType[]|undefined\r\n    onProgramClick:any\r\n}\r\n\r\nexport default function SelectProgram(props: Props): ReactElement {\r\n\r\n    const programs=props.programs;\r\n    const [program,setProgram]=useState<string>();\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n        <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={e=>{\r\n            setProgram(e.target.value as string)\r\n            props.onProgramClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            programs?.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_STUDENT } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    createStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\nexport default function Signup({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [firstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        CREATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"999\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        \r\n        setID(user_id)\r\n        console.log(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                id.substring(3)+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n        console.log(email)\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Sign Up</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createStudent \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.createStudent.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student name: {data && data.createStudent.firstName} {data.createStudent.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student Email: {data && data.createStudent.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.createStudent.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\"\r\n                disabled={passwordValid !== 'success' || firstNameValid !== 'success' || lastNameValid !== 'success' }\r\n                onClick={() => id && firstName && lastName && email && program && saveStudent()}>\r\n                    Sign Up\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  }),\r\n);\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={props.program.id}\r\n      >\r\n        <Typography className={classes.heading}>{props.program.name}</Typography>\r\n        <NavLink to={\"/program/\"+props.program.id}>detail</NavLink>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        \r\n        {props.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n        \r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport Program from './Program'\r\nimport {List,ListItem,Collapse,Typography} from '@material-ui/core';\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport {GET_PROGRAMS} from '../Query'\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface Props {\r\n    \r\n}\r\nexport default function ProgramList({}: Props): ReactElement {\r\n\r\n    const { loading, data } = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    return (\r\n        <Fragment>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            <List>\r\n            {data && data.programs.map(program => (\r\n                <ListItem key={program.id} className=\"program-list\"> <Program program={program}/> </ListItem>\r\n\r\n            ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {UPDATE_PROGRAM}from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    updateProgram: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateProgram(props: Props): ReactElement {\r\n\r\n  \r\n  const [name, setName] = useState(props.program.name)\r\n  const [id, setID] = useState(props.program.id)\r\n\r\n  const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n    UPDATE_PROGRAM,\r\n    {variables:{id:id,name:name}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Program</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.updateProgram ? \r\n            <p>Saved!</p> : \r\n\r\n\r\n    <div className=\"CreateProgram\">\r\n    <TextField\r\n    placeholder=\"Enter the Program name\"\r\n    label=\"Program Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter program ID\"\r\n    label=\"Program ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n        Update Program\r\n    </Button>\r\n    </div>\r\n\r\n\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {GET_PROGRAM} from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\nimport UpdateProgram from './UpdateProgram';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n  const { loading, data } = useQuery<ProgramData, ProgramVars>(\r\n    GET_PROGRAM,\r\n    { variables: { id: props.match.params.id } }\r\n  );\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    {update?\r\n      <div>\r\n      {data&&<UpdateProgram program={data.program}/>}\r\n      </div>:\r\n    \r\n    \r\n      <div>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program ID: {data && data?.program.id}\r\n    </Typography>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program name: {data && data?.program.name}\r\n    </Typography>\r\n\r\n    <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Course List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel2a-content\"\r\n        id=\"panel2a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Faculty List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.faculties?.map(faculty=>(\r\n          <ListItem key={faculty.id}>\r\n            <NavLink to={\"/faculty/\"+faculty.id}>\r\n            <Typography>{faculty.firstName} {faculty.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel3a-content\"\r\n        id=\"panel3a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Student List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.students?.map(student=>(\r\n          <ListItem key={student.id}>\r\n            <NavLink to={\"/student/\"+student.id}>\r\n            <Typography>{student.firstName} {student.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    \r\n    </div>\r\n    }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { CourseType } from '../Interfaces'\r\nimport gql from 'graphql-tag';\r\nimport Course from './Course';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem} from '@material-ui/core';\r\nimport {GET_COURSES} from '../Query'\r\ninterface CourseListData {\r\n    courses: CourseType[];\r\n}\r\n  \r\ninterface CourseListVars {\r\n\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function CourseList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<CourseListData,CourseListVars>(GET_COURSES);\r\n    return (\r\n        <div>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            course list\r\n            <List>\r\n              {data && data.courses.map(course => (\r\n                <ListItem key={course.id} className=\"course-list\"> \r\n                  <NavLink to={\"/course/\"+course.id}> {course.name}</NavLink>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button, InputLabel, MenuItem, Select} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType, CourseType} from '../Interfaces'\r\nimport {UPDATE_COURSE, GET_PROGRAMS}from '../Query'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface CourseData {\r\n    updateCourse: CourseType;\r\n}\r\n  \r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    numOfStudent:number\r\n    program:string\r\n}\r\ninterface ProgramData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramVars {\r\n\r\n}\r\ninterface Props {\r\n    course:CourseType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateCourse(props: Props): ReactElement {\r\n\r\n  const course=props.course\r\n  const [name, setName] = useState(course.name)\r\n  const [id, setID] = useState(course.id)\r\n  const [program,setProgram]=useState(course.program.name)\r\n  const [NOS, setNOS] = useState(course.numOfStudent)\r\n\r\n  const result=useQuery<ProgramData,ProgramVars>(GET_PROGRAMS)\r\n  const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n    UPDATE_COURSE,\r\n    {variables:{id:id,name:name,numOfStudent:NOS, program:program}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Course</h3>\r\n    {error ? <p>Oh no! {error.message}</p> : null}\r\n    {data && data.updateCourse \r\n        ? \r\n    <p>Saved!</p> \r\n        : \r\n\r\n    <div className=\"UpdateCourse\">\r\n    <TextField\r\n    placeholder=\"Enter the Course name\"\r\n    label=\"Course Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter Course ID\"\r\n    label=\"Course ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField \r\n    placeholder=\"Enter Number of Student\"\r\n    label=\"Number of Student\"\r\n    value={NOS}\r\n    onChange={e=>setNOS(Number(e.target.value))}\r\n    />\r\n    <br/>\r\n    Current program is {props.course.program.name}\r\n\r\n    <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={(e)=>setProgram(e.target.value as string)}>\r\n        {result.loading?(\r\n                <MenuItem  disabled>loading....</MenuItem >\r\n        ):(\r\n            result.data?.programs.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        )}\r\n        </Select>\r\n\r\n\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name && NOS && program && saveCourse()}>\r\n        Update Course\r\n    </Button>\r\n    </div>\r\n\r\n\r\n    }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { CourseType } from '../Interfaces';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport {GET_COURSE} from '../Query'\r\nimport UpdateCourse from './UpdateCourse';\r\n\r\n\r\ninterface CourseData{\r\n    course:CourseType\r\n}\r\ninterface CourseVars{\r\n    coure_id:string\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\nexport default function Course(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const [update, setUpdate] = useState(false);\r\n    const { loading, data } = useQuery<CourseData, CourseVars>(\r\n        GET_COURSE,\r\n        { variables: { coure_id: props.match.params.id } }\r\n      );\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        {update ? (\r\n          data && <UpdateCourse course={data.course}></UpdateCourse>\r\n        ) : (\r\n          <Fragment>\r\n          \r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course ID: {data && data.course.id}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Program name: {data && data.course.program.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course name: {data && data.course.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Students: {data && data.course.numOfStudent}\r\n          </Typography>\r\n          \r\n          Student List\r\n          {data && data.course.enrollments.map(enrollment=>(\r\n            <NavLink to={\"/student/\"+enrollment.student.id}>\r\n            <ListItem key={enrollment.student.id}>\r\n              {enrollment.student.firstName} {enrollment.student.LastName}\r\n            </ListItem>\r\n            </NavLink>\r\n          ))} \r\n          \r\n\r\n          <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n          </Fragment>\r\n\r\n        )}\r\n        \r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType } from '../Interfaces';\r\nimport { GET_STUDENTS } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface StudentListData {\r\n    students: StudentType[];\r\n}\r\n  \r\ninterface StudentListVars {\r\n    student_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function StudentList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<StudentListData,StudentListVars>(\r\n        GET_STUDENTS\r\n    );\r\n    return (\r\n        <div>\r\n            Student list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.students.map(student => (\r\n                    <List key={student.id} className=\"student-list\"> \r\n                    <NavLink to={\"/student/\"+student.id}> {student.firstName} {student.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, ChangeEvent } from 'react'\r\nimport { Select, MenuItem, InputLabel, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport {  CourseType, ProgramType } from '../Interfaces'\r\nimport SelectProgram from './SelectProgram';\r\nimport { GET_PROGRAMS, GET_COURSES_BY_PROGRAM_ID } from '../Query';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\ninterface Props {\r\n    onProgramClick:any\r\n    onCourseClick:any\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface CourseData{\r\n    courses:CourseType[]|undefined\r\n}\r\ninterface CourseVars{\r\n    program_id:string\r\n}\r\ninterface ProgramListVars {\r\n\r\n}\r\nexport default function SelectCourses(props: Props): ReactElement {\r\n\r\n    const [program_id,setProgram]=useState<string>(\"\");\r\n    const [course,setCourse]=useState<string>();\r\n    \r\n\r\n    const {loading,data} = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n\r\n    const result = useQuery<CourseData,CourseVars>(\r\n        GET_COURSES_BY_PROGRAM_ID,\r\n        {variables:{program_id:program_id}}\r\n    );\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n        props.onProgramClick(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n        props.onCourseClick(course_id)\r\n    }\r\n\r\n    const [state, setState] = React.useState({});\r\n    const handleChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n\r\n        let selected:string[]=[];\r\n    \r\n        for (let [key, value] of Object.entries(state)) {\r\n            console.log(key, value);\r\n            if(value) selected.push(key)\r\n        }\r\n        props.onCourseClick(selected)\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {loading\r\n            ?\r\n        <div>loading....</div>\r\n            :\r\n        <SelectProgram programs={data?.programs} onProgramClick={onProgramClick}/>\r\n        }\r\n        \r\n\r\n        <br/>\r\n        <Select value={course} onChange={e=>{\r\n            setCourse(e.target.value as string)\r\n            props.onCourseClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            result.data?.courses?.map(course=>(\r\n                <MenuItem  key={course.id} value={course.id}>\r\n                    {course.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS, CREATE_ENROLLMENT} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    student_id:string\r\n\r\n}\r\n\r\n\r\ninterface EnrollmentData{\r\n    enrollment:EnrollmentType\r\n}\r\ninterface EnrollmentVars{\r\n\r\n}\r\n\r\nexport default function CreateEnrollment(props: Props): ReactElement {\r\n\r\n\r\n\r\n    const [id, setID] = useState(props.student_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n    {console.log(id)}\r\n\r\n    const [saveEnrollment, { error, data }]=useMutation<EnrollmentData,EnrollmentVars>(\r\n        CREATE_ENROLLMENT,\r\n        {\r\n            variables:{student_id:props.student_id,course_id:course}\r\n        }\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.enrollment \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveEnrollment() }>\r\n            Update User\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    student:StudentType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    updateStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const student=props.student\r\n    const [firstName, setFirstName] = useState(student.firstName)\r\n    const [lastName, setLastName] = useState(student.LastName)\r\n    const [program, setProgram] = useState(student.program.id)\r\n    const [password, setPassword] = useState(student.password)\r\n    const [id, setID] = useState(student.id)\r\n    const [email, setEmail] = useState(student.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateStudent \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateStudent.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateStudent.firstName} {data.updateStudent.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateStudent.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateStudent.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveStudent() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateStudent from './UpdateStudent'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_STUDENT } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface StudentData{\r\n    student:StudentType;\r\n}\r\ninterface StudentVars{\r\n    student_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<StudentData,StudentVars>(\r\n        GET_STUDENT,\r\n        {variables:{student_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateStudent student={data.student}></UpdateStudent>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            {console.log(data)}\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.student.firstName} {data && data.student.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.student.email}\r\n            </Typography>\r\n            \r\n            {data && data.student.enrollments.map(enrollment=>(\r\n                \r\n                <List>\r\n                \r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {enrollment.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {enrollment.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation  } from '@apollo/react-hooks';\r\n\r\nimport {ProgramType} from '../Interfaces'\r\nimport {CREATE_PROGRAM} from '../Query'\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramData{\r\n    createProgram:ProgramType\r\n}\r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n\r\n    \r\n\r\n    const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n        CREATE_PROGRAM,\r\n        {variables:{id:id,name:name}}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Program</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createProgram ? \r\n            <p>Saved!</p> : \r\n         \r\n            <div className=\"CreateProgram\">\r\n            <TextField\r\n            placeholder=\"Enter the Program name\"\r\n            label=\"Program Name\"\r\n            value={name}\r\n            onChange={e=>setName(e.target.value)}\r\n            />\r\n            <br/>\r\n            <TextField\r\n            placeholder=\"Enter program ID\"\r\n            label=\"Program ID\"\r\n            value={id}\r\n            onChange={e=>setID(e.target.value)}\r\n            />\r\n            <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n                Create Program\r\n            </Button>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\n\r\ninterface CourseData{\r\n    createCourse:CourseType\r\n}\r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    NOS:number;\r\n    program_id:string\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [numOfStudent, setNOS] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    \r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n        CREATE_COURSE,\r\n        {variables:{id:id,name:name,NOS:Number(numOfStudent),program_id:program}}\r\n    )\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.createCourse \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <form>\r\n        <div className=\"CreateCourse\">\r\n        <TextField\r\n        placeholder=\"Enter the course name\"\r\n        label=\"Course Name\"\r\n        value={name}\r\n        onChange={e=>setName(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter course ID\"\r\n        label=\"Course ID\"\r\n        value={id}\r\n        onChange={e=>setID(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter number of student\"\r\n        label=\"Number of student\"\r\n        value={numOfStudent}\r\n        onChange={e=>setNOS(e.target.value)}\r\n        />\r\n        <br/>\r\n       \r\n        <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n \r\n        <br/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => id && name && numOfStudent && program && saveCourse()}>\r\n            Create Course\r\n        </Button>\r\n        </div>\r\n        </form>\r\n        \r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_FACULTIES } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface FacultyListData {\r\n    faculties: FacultyType[];\r\n}\r\n  \r\ninterface FacultyListVars {\r\n    faculty_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function FacultyList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<FacultyListData,FacultyListVars>(\r\n        GET_FACULTIES\r\n    );\r\n    return (\r\n        <div>\r\n            Faculty list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.faculties.map(faculty => (\r\n                    <List key={faculty.id} className=\"student-list\"> \r\n                    <NavLink to={\"/faculty/\"+faculty.id}> {faculty.firstName} {faculty.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    faculty:FacultyType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    updateFaculty: FacultyType;\r\n}\r\n  \r\ninterface FacultyVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const faculty=props.faculty\r\n    const [firstName, setFirstName] = useState(faculty.firstName)\r\n    const [lastName, setLastName] = useState(faculty.LastName)\r\n    const [program, setProgram] = useState(faculty.program.id)\r\n    const [password, setPassword] = useState(faculty.password)\r\n    const [id, setID] = useState(faculty.id)\r\n    const [email, setEmail] = useState(faculty.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData,FacultyVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateFaculty \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateFaculty.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateFaculty.firstName} {data.updateFaculty.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateFaculty.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateFaculty.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveFaculty() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload, FacultyType } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateFaculty from './UpdateFaculty'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_STUDENT } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface FacultyData{\r\n    faculty:FacultyType;\r\n}\r\ninterface FacultyVars{\r\n    faculty_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<FacultyData,FacultyVars>(\r\n        GET_STUDENT,\r\n        {variables:{faculty_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateFaculty faculty={data.faculty}></UpdateFaculty>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            {console.log(data)}\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.faculty.firstName} {data && data.faculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.faculty.email}\r\n            </Typography>\r\n            \r\n            {data && data.faculty.instructings.map(instructing=>(\r\n                \r\n                <List>\r\n                \r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {instructing.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {instructing.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_FACULTY } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    createFaculty: FacultyType;\r\n}\r\n  \r\n\r\n\r\nexport default function CreateFaculty({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [firstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData>(\r\n        CREATE_FACULTY,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"888\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        setID(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Add Faculty</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createFaculty \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty ID: {data && data.createFaculty.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty name: {data && data.createFaculty.firstName} {data.createFaculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Email: {data && data.createFaculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty: {data && data.createFaculty.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\" \r\n                disabled={passwordValid !== 'success' || firstNameValid !== 'success' || lastNameValid !== 'success' }    \r\n                onClick={() =>id && firstName && lastName && email && program && saveFaculty()}>\r\n                    Add\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./component/signup/Home\";\r\nimport Login from \"./component/signup/Login\";\r\nimport Signup from \"./component/signup/Signup\";\r\nimport ProgramList from \"./component/programs/ProgramList\";\r\nimport ProgramDetail from \"./component/programs/ProgramDetail\";\r\nimport CourseList from \"./component/courses/CourseList\";\r\nimport Course from \"./component/courses/Course\";\r\nimport StudentList from \"./component/students/StudentList\";\r\nimport Student from \"./component/students/Student\";\r\nimport CreateProgram from \"./component/programs/CreateProgram\";\r\nimport CreateCourse from \"./component/courses/CreateCourse\";\r\nimport UpdateProgram from \"./component/programs/UpdateProgram\";\r\nimport Enrollment from \"./component/enrollment/Enrollment\";\r\nimport FacultyList from \"./component/faculties/FacultyList\";\r\nimport Faculty from \"./component/faculties/Faculty\";\r\nimport CreateFaculty from \"./component/faculties/CreateFaculty\";\r\ninterface RouteProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nexport const Routes: React.FunctionComponent<RouteProps> = (childProps) =>\r\n  <Switch>\r\n    <Route path=\"/home\" exact render={(props) => <Home {...props} {...childProps} />}/>\r\n    <Route path='/signup' exact render={(props) => <Signup {...props} {...childProps} />}/>\r\n    <Route path='/login' exact render={(props) => <Login {...props} {...childProps} />}/>\r\n\r\n    <Route path=\"/create/program\" exact component={CreateProgram} />\r\n    <Route path=\"/create/course\" exact component={CreateCourse} />\r\n    <Route path=\"/create/faculty\" exact component={CreateFaculty} />\r\n    <Route path=\"/create/student\" exact component={Signup} />\r\n\r\n    <Route path=\"/programs\" exact component={ProgramList} />\r\n    <Route path=\"/courses\" exact component={CourseList} />\r\n    <Route path=\"/faculties\" exact component={FacultyList} />\r\n    <Route path=\"/students\" exact component={StudentList} />\r\n\r\n    <Route path=\"/program/:id\" exact component={ProgramDetail} />\r\n    <Route path=\"/course/:id\" exact component={Course} />\r\n    <Route path=\"/faculty/:id\" exact component={Faculty} />\r\n    <Route path=\"/student/:id\" exact component={Student} />\r\n\r\n    <Route path=\"/\" >Not Found</Route>\r\n  </Switch>;","import React, { Component } from 'react'\r\n\r\n\r\nexport interface ProgramType {\r\n    id: string;\r\n    name: string;\r\n    courses: CourseType[];\r\n    faculties: FacultyType[];\r\n    students: StudentType[];   \r\n}\r\n\r\nexport interface CourseType{\r\n    id: string;\r\n    name: string;\r\n    numOfStudent: number;\r\n    program: ProgramType;\r\n    enrollments: EnrollmentType[];\r\n    instructings:InstructingType[];\r\n    attendances:Array<AttendanceType>;// same with Attendance[]\r\n}\r\n\r\nexport interface StudentType{\r\n    id: string\r\n    firstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    enrollments: EnrollmentType[]\r\n    attendances: AttendanceType[]\r\n}\r\n\r\nexport interface FacultyType{\r\n    id: string\r\n    firstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    instructings: InstructingType[]\r\n}\r\n\r\nexport interface EnrollmentType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n}\r\n\r\nexport interface InstructingType{\r\n    id: string\r\n    course: CourseType\r\n    faculty: FacultyType\r\n}\r\n\r\nexport interface AttendanceType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n    time: string\r\n}\r\n\r\nexport const type = {\r\n    program: \"Program\",\r\n    course: \"Course\",\r\n    student: \"Student\",\r\n    faculty: \"Faculty\",\r\n    enrollment: \"Enrollment\",\r\n    instructing: \"Instructing\",\r\n    attendance: \"Attendance\",\r\n}\r\n\r\n\r\n\r\nexport interface AttendanceSubscriptionPayload {\r\n    mutation: MutationType\r\n    node: AttendanceType\r\n    updatedFields: string[]\r\n    previousValues: AttendancePreviousValues\r\n}\r\n\r\nexport enum  MutationType {\r\n    CREATED,\r\n    UPDATED,\r\n    DELETED,\r\n}\r\nexport interface AttendancePreviousValues{\r\n    id: string\r\n    time: string\r\n}\r\n\r\nexport enum Role {\r\n    SUPERADMIN=\"SUPERADMIN\", \r\n    ADMIN=\"ADMIN\",\r\n    USER=\"USER\"\r\n}","import { split } from 'apollo-link';\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink,createHttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { setContext } from 'apollo-link-context';\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://murmuring-fortress-24950.herokuapp.com/'\r\n});\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://murmuring-fortress-24950.herokuapp.com/',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('token');\r\n  console.log(\"in header:\"+token)\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n}); \r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n);\r\n  \r\n\r\nconst client=new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache(),\r\n    credentials: 'include',\r\n    request: async operation => {\r\n      operation.setContext({\r\n        fetchOptions: {\r\n          credentials: 'same-origin'\r\n        }\r\n      })\r\n    },\r\n    fetchOptions: {\r\n      credentials: 'include'\r\n   }\r\n  })\r\n\r\nexport default client","import React, { Fragment, ReactElement } from 'react'\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from './Interfaces';\r\n\r\ninterface Props {\r\n  history:any\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\nconst useStyles = makeStyles({\r\n    root:{textDecoration:'none'},\r\n    avtive: {\r\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n      border: 0,\r\n      borderRadius: 3,\r\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n      color: 'white',\r\n      height: 48,\r\n      padding: '0 30px',\r\n      textDecoration:'none'\r\n    }\r\n  });\r\nconst Nav = (props: Props):ReactElement => {\r\n    const classes = useStyles();\r\n    const role=localStorage.getItem(\"role\");\r\n    console.log(\"role:\"+role)\r\n\r\n    const handleLogout =  () => {\r\n      props.userHasAuthenticated(false);\r\n\r\n      localStorage.clear()\r\n    }\r\n\r\n    return (\r\n    role==Role.SUPERADMIN\r\n        ?\r\n        <Fragment>\r\n\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/program\">Add Program</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/faculty\">Add Faculty</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n        <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        </Breadcrumbs>\r\n        </Fragment>\r\n        :\r\n    role==Role.ADMIN\r\n        ?\r\n        <Fragment>\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n        <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        </Breadcrumbs>\r\n        </Fragment>\r\n        :\r\n        <Fragment>\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        </Breadcrumbs>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React ,{Component,Fragment, useState, PropsWithChildren, ReactElement}from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs,Chip  } from '@material-ui/core'\r\nimport { emphasize, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {LockOpen,Person,Loyalty,Subject} from '@material-ui/icons'\r\nimport PropTypes from 'prop-types';\r\nimport { Routes } from \"./Routes\";\r\nimport client from './Client'\r\nimport Login from './component/signup/Login'\r\nimport ProgramList from './component/programs/ProgramList'\r\nimport './App.css';\r\nimport CourseList from './component/courses/CourseList';\r\nimport FacultyList from './component/faculties/FacultyList';\r\nimport StudentList from './component/students/StudentList';\r\n\r\nimport { Role } from './component/Interfaces';\r\nimport Nav from './component/Nav';\r\n\r\ninterface AppProps {\r\n  history: any;\r\n}\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root:{textDecoration:'none'},\r\n  avtive: {\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n    textDecoration:'none'\r\n  }\r\n});\r\n\r\nfunction App(props:AppProps): ReactElement<AppProps> {\r\n  const classes = useStyles();\r\n  const [isAuthenticated,setIsAuth]=useState(localStorage.getItem(\"role\")?true:false)\r\n  const [isAuthenticating,setIsAuth2]=useState(false)\r\n  const [value,setValue]=useState(0)\r\n\r\n\r\n  // async componentDidMount() {\r\n    // try {\r\n    //   if (await Auth.currentSession()) {\r\n    //     this.userHasAuthenticated(true);\r\n    //   }\r\n    // }\r\n    // catch(e) {\r\n    //   if (e !== 'No current user') {\r\n    //     alert(e);\r\n    //   }\r\n    // }\r\n  \r\n  //   setIsAuth2(false);\r\n  // }\r\n  const userHasAuthenticated = (authenticated: boolean) => {\r\n    setIsAuth(authenticated);\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    // await Auth.signOut();\r\n  \r\n    userHasAuthenticated(false);\r\n    props.history.push(\"/login\");\r\n  }\r\n\r\n  const handleChange = (event:React.ChangeEvent<{}>, newValue:number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  const showLoggedInBar = () => {\r\n    const role=localStorage.getItem(\"role\");\r\n    console.log(\"role:\"+role)\r\n    if(role==Role.SUPERADMIN)\r\n    {\r\n      return <Fragment>\r\n\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/program\">Add Program</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/faculty\">Add Faculty</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n      </Breadcrumbs>\r\n    </Fragment>\r\n    }\r\n    else if(role==Role.ADMIN)\r\n    {\r\n      return <Fragment>\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n      </Breadcrumbs>\r\n    </Fragment>\r\n    }\r\n    \r\n  };\r\n\r\n\r\n  const showLoggedOutBar = () => (\r\n    <Fragment>\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink to=\"/\">Home</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n    </Breadcrumbs>\r\n\r\n      \r\n    </Fragment>\r\n  );\r\n\r\n  \r\n\r\n\r\n  const childProps = {\r\n    isAuthenticated: isAuthenticated,\r\n    userHasAuthenticated: userHasAuthenticated\r\n  };\r\n\r\n  \r\n\r\n    \r\n  return (\r\n    <div>\r\n    <ApolloProvider client={client}>\r\n    <div>\r\n      {isAuthenticated ? \r\n        <Nav history={props.history} isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/> : \r\n        <Login isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>}\r\n      <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n    </div>\r\n    </ApolloProvider>\r\n    </div>\r\n  );\r\n  \r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={'/client'}>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}