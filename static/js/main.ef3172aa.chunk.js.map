{"version":3,"sources":["component/signup/Home.tsx","component/Query.ts","component/signup/Login.tsx","component/common/SelectProgram.tsx","component/signup/Signup.tsx","component/programs/Program.tsx","component/programs/ProgramList.tsx","component/programs/UpdateProgram.tsx","component/programs/ProgramDetail.tsx","component/courses/CourseList.tsx","component/courses/UpdateCourse.tsx","component/courses/Course.tsx","component/students/StudentList.tsx","component/common/SelectCourses.tsx","component/enrollment/CreateEnrollment.tsx","component/students/UpdateStudent.tsx","component/students/Student.tsx","component/programs/CreateProgram.tsx","component/courses/CreateCourse.tsx","component/faculties/FacultyList.tsx","component/faculties/UpdateFaculty.tsx","component/faculties/Faculty.tsx","component/faculties/CreateFaculty.tsx","Routes.tsx","component/Interfaces.ts","Client.js","component/Nav.tsx","App.tsx","index.js"],"names":["Home","props","GET_STUDENTS","gql","GET_STUDENT","CREATE_STUDENT","UPDATE_STUDENT","GET_ATTENDANCE","GET_PROGRAMS","GET_PROGRAM","CREATE_PROGRAM","UPDATE_PROGRAM","CREATE_COURSE","GET_COURSES","GET_COURSES_BY_PROGRAM_ID","GET_COURSE","UPDATE_COURSE","CREATE_ENROLLMENT","GET_FACULTIES","GET_FACULTY","CREATE_FACULTY","LOGIN","emailRegex","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","useState","email","setEmail","password","setPassword","emailValid","setEmailValid","passwordValid","setPasswrodValid","classes","useMutation","variables","login","data","error","token","userHasAuthenticated","localStorage","setItem","Faculty","status","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","to","TextField","required","fullWidth","id","name","autoComplete","autoFocus","placeholder","label","value","onChange","event","target","test","toLowerCase","type","length","Button","color","onClick","catch","e","alert","disabled","SelectProgram","programs","program","setProgram","InputLabel","Select","onProgramClick","map","MenuItem","key","nameRegex","Signup","firstName","setFirstName","lastName","setLastName","setID","firstNameValid","setFirstNameValid","lastNameValid","setLastNameValid","result","useQuery","program_id","saveStudent","genID","min","max","user_id","String","Math","floor","random","console","log","genEmail","substring","message","createStudent","gutterBottom","LastName","createStyles","root","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Program","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","List","courses","course","ListItem","ProgramList","loading","UpdateProgram","setName","saveProgram","updateProgram","update","setUpdate","match","params","faculties","faculty","students","student","CourseList","UpdateCourse","numOfStudent","NOS","setNOS","saveCourse","updateCourse","Number","Course","coure_id","enrollments","enrollment","class","clas","room","startTime","endTime","StudentList","SelectCourses","setCourse","React","onCourseClick","CreateEnrollment","student_id","course_id","saveEnrollment","addCourse","updateStudent","Student","refetch","useSubscription","open","setOpen","button","Collapse","in","timeout","unmountOnExit","attendances","att","time","CreateProgram","createProgram","createCourse","FacultyList","saveFaculty","updateFaculty","faculty_id","instructings","instructing","CreateFaculty","createFaculty","MutationType","Role","Routes","childProps","path","exact","render","CreateCourse","ProgramDetail","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","authLink","setContext","_","headers","getItem","authorization","link","split","query","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","credentials","request","a","fetchOptions","textDecoration","avtive","background","border","borderRadius","boxShadow","height","padding","Nav","role","handleLogout","clear","SUPERADMIN","Breadcrumbs","aria-label","activeClassName","ADMIN","App","isAuthenticated","setIsAuth","authenticated","history","ReactDOM","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef3172aa.chunk.js","sourcesContent":["import React, { Fragment, ReactElement } from 'react'\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from '../Interfaces';\r\nimport Nav from '../Nav'\r\ninterface Props {\r\n    isAuthenticated: boolean;\r\n    userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nconst Home = (props: Props):ReactElement => {\r\n\r\n    return (\r\n        <Fragment>\r\n        \r\n        home\r\n        </Fragment>\r\n    )\r\n    \r\n}\r\n\r\nexport default Home\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_STUDENTS = gql`\r\n{\r\n  students{\r\n    id\r\n    firstName\r\n    LastName\r\n  }\r\n}\r\n`;\r\nexport const GET_STUDENT=gql`\r\n    query GET_STUDENT($student_id:ID){\r\n    student(where:{id:$student_id}){\r\n        id\r\n        firstName\r\n        LastName\r\n        email\r\n        status\r\n        program{\r\n            id\r\n            name\r\n        }\r\n        enrollments{\r\n            id\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    time\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n  }\r\n`;\r\nexport const CREATE_STUDENT=gql`\r\n    mutation CREATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createStudent(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"full-time\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const UPDATE_STUDENT=gql`\r\n    mutation UPDATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateStudent(\r\n            where:{id:$id},\r\n            data:{\r\n                firstName:$firstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"full-time\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nexport const GET_ATTENDANCE=gql`\r\n    subscription GET_ATTENDANCE{\r\n        attendance{\r\n            mutation\r\n            node{\r\n                time\r\n                student{\r\n                    id\r\n                    firstName\r\n                    enrollments{\r\n                        course{\r\n                            attendances{\r\n                                time\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n`;\r\n\r\n\r\nexport const GET_PROGRAMS = gql`\r\n{\r\n  programs(orderBy:name_ASC) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const GET_PROGRAM = gql`\r\nquery GET_PROGRAM($id:ID){\r\n  program(where:{id:$id}){\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATE_PROGRAM=gql`\r\n    mutation CREATE_PROGRAM($id:ID!,$name:String!){\r\n        createProgram(data:{\r\n            id:$id\r\n            name:$name\r\n        }){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_PROGRAM=gql`\r\n    mutation UPDATE_PROGRAM($id:ID!,$name:String!){\r\n        updateProgram(where:{id:$id},\r\n            data:{name:$name}\r\n        ){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nexport const CREATE_COURSE=gql`\r\n    mutation CREATE_COURSE($id:ID!,$name:String!,$NOS:Int!,$program_id:ID){\r\n        createCourse(data:{\r\n            id:$id\r\n            name:$name\r\n            numOfStudent:$NOS\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            name\r\n            numOfStudent\r\n            program{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const GET_COURSES = gql`\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSES_BY_PROGRAM_ID = gql`\r\n  query GET_COURSES_BY_PROGRAM_ID($program_id:ID)\r\n  {\r\n    courses(where:{\r\n        program:{\r\n            id:$program_id\r\n        }\r\n    }){\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSE = gql`\r\n  query Get_COURSE($coure_id: ID!) {\r\n    course(where: {id:$coure_id}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          firstName\r\n          LastName\r\n        }\r\n      }\r\n      class{\r\n          id\r\n          room\r\n          startTime\r\n          endTime\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const UPDATE_COURSE=gql`\r\n    mutation UPDATE_COURSE($id:ID!,$name:String!,$NOS:Int,$program:ID){\r\n        updateCourse(where:{id:$id},\r\n            data:{\r\n                name:$name\r\n                numOfStudent:$NOS\r\n                program:{\r\n                    connect:{\r\n                        id:$program\r\n                    }\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            name\r\n            numOfStudent\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_ENROLLMENT=gql`\r\n    mutation CREATE_ENROLLMENT($student_id:ID,$course_id:ID){\r\n        createEnrollment(data:{\r\n            student:{\r\n                connect:{\r\n                    id:$student_id\r\n                }\r\n            }\r\n            course:{\r\n                connect:{\r\n                    id:$course_id\r\n                }\r\n            }\r\n        }){\r\n            student{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n`;\r\n\r\n\r\nexport const GET_FACULTIES=gql`\r\n    query{\r\n        faculties{\r\n            id\r\n            firstName\r\n            LastName\r\n        }\r\n    }\r\n`;\r\nexport const  GET_FACULTY=gql`\r\n    query($id:ID){\r\n        faculty(where:{id:$id}){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            instructings{\r\n                id\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_FACULTY=gql`\r\n    mutation CREATE_FACULTY(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createFaculty(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"USER\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const LOGIN=gql`\r\n    mutation LOGIN($email:String!,$password: String!){\r\n        login(data:{\r\n            email: $email\r\n            password: $password\r\n        }){\r\n            Faculty{\r\n                id,\r\n                firstName,\r\n                LastName,\r\n                email\r\n                status\r\n            },\r\n            token\r\n        }\r\n    }\r\n`;","\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport { Redirect } from 'react-router-dom';\r\n// import { FormGroup, FormControl, ControlLabel, Button, Glyphicon } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport React, { ReactElement, ReactComponentElement, useState } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { LOGIN } from '../Query';\r\nimport { FacultyType } from '../Interfaces';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\n\r\ninterface LoginProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\ninterface LoginState {\r\n  loading: boolean;\r\n  redirect: boolean;\r\n  email: string;\r\n  password: string;\r\n  emailValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n  passwordValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n}\r\ninterface LoginVars {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface authPayloadType {\r\n  Faculty: FacultyType;\r\n  token: string;\r\n}\r\ninterface LoginData{\r\n  login: authPayloadType\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login(props:LoginProps): ReactElement <LoginProps>  {\r\n\r\n    const [loading,setLoading]=useState(false);\r\n    const [redirect, setReirect] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [emailValid, setEmailValid] = useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    \r\n    // for material ui\r\n    const classes = useStyles();\r\n\r\n  const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setEmail(target.value)\r\n    setEmailValid(emailRegex.test(target.value.toLowerCase()) ? 'success' : 'error')\r\n  }\r\n\r\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setPassword(target.value);\r\n    setPasswrodValid(target.value.length < 8 ? 'error' : 'success')\r\n    \r\n  }\r\n\r\n  const onLogin = async (event: React.MouseEvent<HTMLButtonElement,MouseEvent>) => {\r\n    event.preventDefault();\r\n    setLoading( true );\r\n\r\n    // try {\r\n    //   await Auth.signIn(email, password);\r\n    //   props.userHasAuthenticated(true);\r\n    //   setReirect(true )\r\n    // } catch (e) {\r\n    //   alert(e.message);\r\n    //   setLoading(false);\r\n    // }\r\n  }\r\n  const [login, { error, data }] = useMutation<LoginData, LoginVars>(\r\n    LOGIN,\r\n    {variables:{email: email, password: password}}\r\n  )\r\n  //if get the data then save it\r\n  if(data && data.login.token!==\"Unable to login\")\r\n  {\r\n    props.userHasAuthenticated(true);\r\n    localStorage.setItem('token',data.login.token)\r\n    localStorage.setItem('role',data.login.Faculty.status)\r\n  }\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log In\r\n          </Typography>\r\n          {data && data.login.token!==\"Unable to login\"\r\n            ?\r\n            <Redirect to='/home' />\r\n            :\r\n          <div className=\"Login\">\r\n            <div className={ classes.form }>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                placeholder=\"Enter your email\"\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={onEmailChange}\r\n              />\r\n              <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your Password\"\r\n                  label=\"Password\"\r\n                  value={password}\r\n                  onChange={onPasswordChange}\r\n              />\r\n\r\n                <Button\r\n                  //type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick={()=>login().catch((e) => {\r\n                    alert(\"Login Failed.\")\r\n                    setPassword(\"\")\r\n                  })}\r\n                  disabled={passwordValid !== 'success' || emailValid !== 'success' }\r\n                >\r\n                  Log in\r\n                </Button>\r\n            </div>\r\n          </div>\r\n          }\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </Container>\r\n    );\r\n  \r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { Select, MenuItem, InputLabel } from '@material-ui/core'\r\nimport { ProgramType } from '../Interfaces'\r\n\r\ninterface Props {\r\n    programs:ProgramType[]|undefined\r\n    onProgramClick:any\r\n}\r\n\r\nexport default function SelectProgram(props: Props): ReactElement {\r\n\r\n    const programs=props.programs;\r\n    const [program,setProgram]=useState<string>();\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n        <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={e=>{\r\n            setProgram(e.target.value as string)\r\n            props.onProgramClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            programs?.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_STUDENT } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    createStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\nexport default function Signup({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [firstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        CREATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"999\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        \r\n        setID(user_id)\r\n        console.log(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                id.substring(3)+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n        console.log(email)\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Sign Up</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createStudent \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.createStudent.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student name: {data && data.createStudent.firstName} {data.createStudent.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student Email: {data && data.createStudent.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.createStudent.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\"\r\n                disabled={passwordValid !== 'success' || firstNameValid !== 'success' || lastNameValid !== 'success' }\r\n                onClick={() => id && firstName && lastName && email && program && saveStudent()}>\r\n                    Sign Up\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  }),\r\n);\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={props.program.id}\r\n      >\r\n        <Typography className={classes.heading}>{props.program.name}</Typography>\r\n        <NavLink to={\"/program/\"+props.program.id}>detail</NavLink>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        \r\n        {props.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n        \r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport Program from './Program'\r\nimport {List,ListItem,Collapse,Typography} from '@material-ui/core';\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport {GET_PROGRAMS} from '../Query'\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface Props {\r\n    \r\n}\r\nexport default function ProgramList({}: Props): ReactElement {\r\n\r\n    const { loading, data } = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    return (\r\n        <Fragment>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            <List>\r\n            {data && data.programs.map(program => (\r\n                <ListItem key={program.id} className=\"program-list\"> <Program program={program}/> </ListItem>\r\n\r\n            ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {UPDATE_PROGRAM}from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    updateProgram: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateProgram(props: Props): ReactElement {\r\n\r\n  \r\n  const [name, setName] = useState(props.program.name)\r\n  const [id, setID] = useState(props.program.id)\r\n\r\n  const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n    UPDATE_PROGRAM,\r\n    {variables:{id:id,name:name}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Program</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.updateProgram ? \r\n            <p>Saved!</p> : \r\n\r\n\r\n    <div className=\"CreateProgram\">\r\n    <TextField\r\n    placeholder=\"Enter the Program name\"\r\n    label=\"Program Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter program ID\"\r\n    label=\"Program ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n        Update Program\r\n    </Button>\r\n    </div>\r\n\r\n\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {GET_PROGRAM} from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\nimport UpdateProgram from './UpdateProgram';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n  const { loading, data } = useQuery<ProgramData, ProgramVars>(\r\n    GET_PROGRAM,\r\n    { variables: { id: props.match.params.id } }\r\n  );\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    {update?\r\n      <div>\r\n      {data&&<UpdateProgram program={data.program}/>}\r\n      </div>:\r\n    \r\n    \r\n      <div>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program ID: {data && data?.program.id}\r\n    </Typography>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program name: {data && data?.program.name}\r\n    </Typography>\r\n\r\n    <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Course List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel2a-content\"\r\n        id=\"panel2a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Faculty List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.faculties?.map(faculty=>(\r\n          <ListItem key={faculty.id}>\r\n            <NavLink to={\"/faculty/\"+faculty.id}>\r\n            <Typography>{faculty.firstName} {faculty.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel3a-content\"\r\n        id=\"panel3a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Student List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.students?.map(student=>(\r\n          <ListItem key={student.id}>\r\n            <NavLink to={\"/student/\"+student.id}>\r\n            <Typography>{student.firstName} {student.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    \r\n    </div>\r\n    }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { CourseType } from '../Interfaces'\r\nimport gql from 'graphql-tag';\r\nimport Course from './Course';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem} from '@material-ui/core';\r\nimport {GET_COURSES} from '../Query'\r\ninterface CourseListData {\r\n    courses: CourseType[];\r\n}\r\n  \r\ninterface CourseListVars {\r\n\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function CourseList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<CourseListData,CourseListVars>(GET_COURSES);\r\n    return (\r\n        <div>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            course list\r\n            <List>\r\n              {data && data.courses.map(course => (\r\n                <ListItem key={course.id} className=\"course-list\"> \r\n                  <NavLink to={\"/course/\"+course.id}> {course.name}</NavLink>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button, InputLabel, MenuItem, Select} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType, CourseType} from '../Interfaces'\r\nimport {UPDATE_COURSE, GET_PROGRAMS}from '../Query'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface CourseData {\r\n    updateCourse: CourseType;\r\n}\r\n  \r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    numOfStudent:number\r\n    program:string\r\n}\r\ninterface ProgramData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramVars {\r\n\r\n}\r\ninterface Props {\r\n    course:CourseType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateCourse(props: Props): ReactElement {\r\n\r\n  const course=props.course\r\n  const [name, setName] = useState(course.name)\r\n  const [id, setID] = useState(course.id)\r\n  const [program,setProgram]=useState(course.program.name)\r\n  const [NOS, setNOS] = useState(course.numOfStudent)\r\n\r\n  const result=useQuery<ProgramData,ProgramVars>(GET_PROGRAMS)\r\n  const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n    UPDATE_COURSE,\r\n    {variables:{id:id,name:name,numOfStudent:NOS, program:program}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Course</h3>\r\n    {error ? <p>Oh no! {error.message}</p> : null}\r\n    {data && data.updateCourse \r\n        ? \r\n    <p>Saved!</p> \r\n        : \r\n\r\n    <div className=\"UpdateCourse\">\r\n    <TextField\r\n    placeholder=\"Enter the Course name\"\r\n    label=\"Course Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter Course ID\"\r\n    label=\"Course ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField \r\n    placeholder=\"Enter Number of Student\"\r\n    label=\"Number of Student\"\r\n    value={NOS}\r\n    onChange={e=>setNOS(Number(e.target.value))}\r\n    />\r\n    <br/>\r\n    Current program is {props.course.program.name}\r\n\r\n    <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={(e)=>setProgram(e.target.value as string)}>\r\n        {result.loading?(\r\n                <MenuItem  disabled>loading....</MenuItem >\r\n        ):(\r\n            result.data?.programs.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        )}\r\n        </Select>\r\n\r\n\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name && NOS && program && saveCourse()}>\r\n        Update Course\r\n    </Button>\r\n    </div>\r\n\r\n\r\n    }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { CourseType } from '../Interfaces';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport {GET_COURSE} from '../Query'\r\nimport UpdateCourse from './UpdateCourse';\r\n\r\n\r\ninterface CourseData{\r\n    course:CourseType\r\n}\r\ninterface CourseVars{\r\n    coure_id:string\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\nexport default function Course(props: Props): ReactElement {\r\n  \r\n    const [update, setUpdate] = useState(false);\r\n    const { loading, data } = useQuery<CourseData, CourseVars>(\r\n        GET_COURSE,\r\n        { variables: { coure_id: props.match.params.id } }\r\n      );\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        {update ? (\r\n          data && <UpdateCourse course={data.course}></UpdateCourse>\r\n        ) : (\r\n          <Fragment>\r\n          \r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course ID: {data && data.course.id}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Program name: {data && data.course.program.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course name: {data && data.course.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Students: {data && data.course.numOfStudent}\r\n          </Typography>\r\n          \r\n          Student List\r\n          <List>\r\n          {data && data.course.enrollments && data.course.enrollments.map(enrollment=>(\r\n            <NavLink to={\"/student/\"+enrollment.student.id}>\r\n            <ListItem key={enrollment.student.id}>\r\n              {enrollment.student.firstName} {enrollment.student.LastName}\r\n            </ListItem>\r\n            </NavLink>\r\n          ))} \r\n          </List>\r\n\r\n          Class List\r\n          <List>\r\n          {data && data.course.class && data.course.class.map(clas=>(\r\n\r\n            <ListItem key={clas.id}>\r\n              Room: {clas.room}   start: {clas.startTime}   end:{clas.endTime}\r\n            </ListItem>\r\n\r\n          ))} \r\n          </List>\r\n\r\n          <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n          </Fragment>\r\n\r\n        )}\r\n        \r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType } from '../Interfaces';\r\nimport { GET_STUDENTS } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface StudentListData {\r\n    students: StudentType[];\r\n}\r\n  \r\ninterface StudentListVars {\r\n    student_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function StudentList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<StudentListData,StudentListVars>(\r\n        GET_STUDENTS\r\n    );\r\n    return (\r\n        <div>\r\n            Student list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.students.map(student => (\r\n                    <List key={student.id} className=\"student-list\"> \r\n                    <NavLink to={\"/student/\"+student.id}> {student.firstName} {student.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, ChangeEvent } from 'react'\r\nimport { Select, MenuItem, InputLabel, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport {  CourseType, ProgramType } from '../Interfaces'\r\nimport SelectProgram from './SelectProgram';\r\nimport { GET_PROGRAMS, GET_COURSES_BY_PROGRAM_ID } from '../Query';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\ninterface Props {\r\n    onProgramClick:any\r\n    onCourseClick:any\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface CourseData{\r\n    courses:CourseType[]|undefined\r\n}\r\ninterface CourseVars{\r\n    program_id:string\r\n}\r\ninterface ProgramListVars {\r\n\r\n}\r\nexport default function SelectCourses(props: Props): ReactElement {\r\n\r\n    const [program_id,setProgram]=useState<string>(\"\");\r\n    const [course,setCourse]=useState<string>();\r\n    \r\n\r\n    const {loading,data} = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n\r\n    const result = useQuery<CourseData,CourseVars>(\r\n        GET_COURSES_BY_PROGRAM_ID,\r\n        {variables:{program_id:program_id}}\r\n    );\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n        props.onProgramClick(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n        props.onCourseClick(course_id)\r\n    }\r\n\r\n    const [state, setState] = React.useState({});\r\n    const handleChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n\r\n        let selected:string[]=[];\r\n    \r\n        for (let [key, value] of Object.entries(state)) {\r\n            console.log(key, value);\r\n            if(value) selected.push(key)\r\n        }\r\n        props.onCourseClick(selected)\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {loading\r\n            ?\r\n        <div>loading....</div>\r\n            :\r\n        <SelectProgram programs={data?.programs} onProgramClick={onProgramClick}/>\r\n        }\r\n        \r\n\r\n        <br/>\r\n        <Select value={course} onChange={e=>{\r\n            setCourse(e.target.value as string)\r\n            props.onCourseClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            result.data?.courses?.map(course=>(\r\n                <MenuItem  key={course.id} value={course.id}>\r\n                    {course.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS, CREATE_ENROLLMENT} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    student_id:string\r\n\r\n}\r\n\r\n\r\ninterface EnrollmentData{\r\n    enrollment:EnrollmentType\r\n}\r\ninterface EnrollmentVars{\r\n\r\n}\r\n\r\nexport default function CreateEnrollment(props: Props): ReactElement {\r\n\r\n\r\n\r\n    const [id, setID] = useState(props.student_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n    {console.log(id)}\r\n\r\n    const [saveEnrollment, { error, data }]=useMutation<EnrollmentData,EnrollmentVars>(\r\n        CREATE_ENROLLMENT,\r\n        {\r\n            variables:{student_id:props.student_id,course_id:course}\r\n        }\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.enrollment \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveEnrollment() }>\r\n            Update User\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    student:StudentType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    updateStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const student=props.student\r\n    const [firstName, setFirstName] = useState(student.firstName)\r\n    const [lastName, setLastName] = useState(student.LastName)\r\n    const [program, setProgram] = useState(student.program.id)\r\n    const [password, setPassword] = useState(student.password)\r\n    const [id, setID] = useState(student.id)\r\n    const [email, setEmail] = useState(student.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateStudent \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateStudent.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateStudent.firstName} {data.updateStudent.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateStudent.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateStudent.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveStudent() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateStudent from './UpdateStudent'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_STUDENT } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface StudentData{\r\n    student:StudentType;\r\n}\r\ninterface StudentVars{\r\n    student_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<StudentData,StudentVars>(\r\n        GET_STUDENT,\r\n        {variables:{student_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateStudent student={data.student}></UpdateStudent>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.student.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n               Name: {data && data.student.firstName} {data && data.student.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Email: {data && data.student.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.student.status}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Program: {data && data.student.program.name}\r\n            </Typography>\r\n\r\n\r\n            Enrolled Course List\r\n            {data && data.student.enrollments.map(enrollment=>(\r\n                \r\n                <List>\r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {enrollment.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {enrollment.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation  } from '@apollo/react-hooks';\r\n\r\nimport {ProgramType} from '../Interfaces'\r\nimport {CREATE_PROGRAM} from '../Query'\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramData{\r\n    createProgram:ProgramType\r\n}\r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n\r\n    \r\n\r\n    const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n        CREATE_PROGRAM,\r\n        {variables:{id:id,name:name}}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Program</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createProgram ? \r\n            <p>Saved!</p> : \r\n         \r\n            <div className=\"CreateProgram\">\r\n            <TextField\r\n            placeholder=\"Enter the Program name\"\r\n            label=\"Program Name\"\r\n            value={name}\r\n            onChange={e=>setName(e.target.value)}\r\n            />\r\n            <br/>\r\n            <TextField\r\n            placeholder=\"Enter program ID\"\r\n            label=\"Program ID\"\r\n            value={id}\r\n            onChange={e=>setID(e.target.value)}\r\n            />\r\n            <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n                Create Program\r\n            </Button>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\n\r\ninterface CourseData{\r\n    createCourse:CourseType\r\n}\r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    NOS:number;\r\n    program_id:string\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [numOfStudent, setNOS] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    \r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n        CREATE_COURSE,\r\n        {variables:{id:id,name:name,NOS:Number(numOfStudent),program_id:program}}\r\n    )\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.createCourse \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <form>\r\n        <div className=\"CreateCourse\">\r\n        <TextField\r\n        placeholder=\"Enter the course name\"\r\n        label=\"Course Name\"\r\n        value={name}\r\n        onChange={e=>setName(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter course ID\"\r\n        label=\"Course ID\"\r\n        value={id}\r\n        onChange={e=>setID(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter number of student\"\r\n        label=\"Number of student\"\r\n        value={numOfStudent}\r\n        onChange={e=>setNOS(e.target.value)}\r\n        />\r\n        <br/>\r\n       \r\n        <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n \r\n        <br/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => id && name && numOfStudent && program && saveCourse()}>\r\n            Create Course\r\n        </Button>\r\n        </div>\r\n        </form>\r\n        \r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_FACULTIES } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface FacultyListData {\r\n    faculties: FacultyType[];\r\n}\r\n  \r\ninterface FacultyListVars {\r\n    faculty_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function FacultyList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<FacultyListData,FacultyListVars>(\r\n        GET_FACULTIES\r\n    );\r\n    return (\r\n        <div>\r\n            Faculty list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.faculties.map(faculty => (\r\n                    <List key={faculty.id} className=\"student-list\"> \r\n                    <NavLink to={\"/faculty/\"+faculty.id}> {faculty.firstName} {faculty.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    faculty:FacultyType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    updateFaculty: FacultyType;\r\n}\r\n  \r\ninterface FacultyVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const faculty=props.faculty\r\n    const [firstName, setFirstName] = useState(faculty.firstName)\r\n    const [lastName, setLastName] = useState(faculty.LastName)\r\n    const [program, setProgram] = useState(faculty.program.id)\r\n    const [password, setPassword] = useState(faculty.password)\r\n    const [id, setID] = useState(faculty.id)\r\n    const [email, setEmail] = useState(faculty.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData,FacultyVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateFaculty \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateFaculty.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateFaculty.firstName} {data.updateFaculty.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateFaculty.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateFaculty.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveFaculty() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload, FacultyType } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateFaculty from './UpdateFaculty'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_FACULTY } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface FacultyData{\r\n    faculty:FacultyType;\r\n}\r\ninterface FacultyVars{\r\n    faculty_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Faculty(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<FacultyData,FacultyVars>(\r\n        GET_FACULTY,\r\n        {variables:{faculty_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateFaculty faculty={data.faculty}></UpdateFaculty>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            {console.log(data)}\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.faculty && data.faculty.firstName} {data && data.faculty && data.faculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {data && data.faculty && data.faculty.email}\r\n            </Typography>\r\n            \r\n            {data && data.faculty && data.faculty.instructings.map(instructing=>(\r\n                \r\n                <List>\r\n                \r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {instructing.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {instructing.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_FACULTY } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    createFaculty: FacultyType;\r\n}\r\n  \r\n\r\n\r\nexport default function CreateFaculty({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [firstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData>(\r\n        CREATE_FACULTY,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"888\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        setID(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Add Faculty</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createFaculty \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty ID: {data && data.createFaculty.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty name: {data && data.createFaculty.firstName} {data.createFaculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Email: {data && data.createFaculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty: {data && data.createFaculty.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\" \r\n                disabled={passwordValid !== 'success' || firstNameValid !== 'success' || lastNameValid !== 'success' }    \r\n                onClick={() =>id && firstName && lastName && email && program && saveFaculty()}>\r\n                    Add\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./component/signup/Home\";\r\nimport Login from \"./component/signup/Login\";\r\nimport Signup from \"./component/signup/Signup\";\r\nimport ProgramList from \"./component/programs/ProgramList\";\r\nimport ProgramDetail from \"./component/programs/ProgramDetail\";\r\nimport CourseList from \"./component/courses/CourseList\";\r\nimport Course from \"./component/courses/Course\";\r\nimport StudentList from \"./component/students/StudentList\";\r\nimport Student from \"./component/students/Student\";\r\nimport CreateProgram from \"./component/programs/CreateProgram\";\r\nimport CreateCourse from \"./component/courses/CreateCourse\";\r\nimport UpdateProgram from \"./component/programs/UpdateProgram\";\r\nimport Enrollment from \"./component/enrollment/Enrollment\";\r\nimport FacultyList from \"./component/faculties/FacultyList\";\r\nimport Faculty from \"./component/faculties/Faculty\";\r\nimport CreateFaculty from \"./component/faculties/CreateFaculty\";\r\ninterface RouteProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nexport const Routes: React.FunctionComponent<RouteProps> = (childProps) =>\r\n  <Switch>\r\n    <Route path=\"/home\" exact render={(props) => <Home {...props} {...childProps} />}/>\r\n    <Route path='/signup' exact render={(props) => <Signup {...props} {...childProps} />}/>\r\n    <Route path='/login' exact render={(props) => <Login {...props} {...childProps} />}/>\r\n\r\n    <Route path=\"/create/program\" exact component={CreateProgram} />\r\n    <Route path=\"/create/course\" exact component={CreateCourse} />\r\n    <Route path=\"/create/faculty\" exact component={CreateFaculty} />\r\n    <Route path=\"/create/student\" exact component={Signup} />\r\n\r\n    <Route path=\"/programs\" exact component={ProgramList} />\r\n    <Route path=\"/courses\" exact component={CourseList} />\r\n    <Route path=\"/faculties\" exact component={FacultyList} />\r\n    <Route path=\"/students\" exact component={StudentList} />\r\n\r\n    <Route path=\"/program/:id\" exact component={ProgramDetail} />\r\n    <Route path=\"/course/:id\" exact component={Course} />\r\n    <Route path=\"/faculty/:id\" exact component={Faculty} />\r\n    <Route path=\"/student/:id\" exact component={Student} />\r\n\r\n    <Route path=\"/\" >Not Found</Route>\r\n  </Switch>;","import React, { Component } from 'react'\r\n\r\n\r\nexport interface ProgramType {\r\n    id: string;\r\n    name: string;\r\n    courses: CourseType[];\r\n    faculties: FacultyType[];\r\n    students: StudentType[];   \r\n}\r\n\r\nexport interface CourseType{\r\n    id: string;\r\n    name: string;\r\n    numOfStudent: number;\r\n    program: ProgramType;\r\n    enrollments: EnrollmentType[];\r\n    instructings:InstructingType[];\r\n    attendances:Array<AttendanceType>;// same with Attendance[]\r\n    class:ClassType[];\r\n}\r\n\r\nexport interface StudentType{\r\n    id: string\r\n    firstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    enrollments: EnrollmentType[]\r\n    attendances: AttendanceType[]\r\n}\r\n\r\nexport interface FacultyType{\r\n    id: string\r\n    firstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    instructings: InstructingType[]\r\n\r\n}\r\n\r\nexport interface ClassType{\r\n    id: string\r\n    course: CourseType\r\n    room: string\r\n    startTime: string\r\n    endTime: string\r\n}\r\n\r\nexport interface EnrollmentType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n}\r\n\r\nexport interface InstructingType{\r\n    id: string\r\n    course: CourseType\r\n    faculty: FacultyType\r\n}\r\n\r\nexport interface AttendanceType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n    time: string\r\n    class:ClassType\r\n}\r\n\r\nexport const type = {\r\n    program: \"Program\",\r\n    course: \"Course\",\r\n    student: \"Student\",\r\n    faculty: \"Faculty\",\r\n    enrollment: \"Enrollment\",\r\n    instructing: \"Instructing\",\r\n    attendance: \"Attendance\",\r\n}\r\n\r\n\r\n\r\nexport interface AttendanceSubscriptionPayload {\r\n    mutation: MutationType\r\n    node: AttendanceType\r\n    updatedFields: string[]\r\n    previousValues: AttendancePreviousValues\r\n}\r\n\r\nexport enum  MutationType {\r\n    CREATED,\r\n    UPDATED,\r\n    DELETED,\r\n}\r\nexport interface AttendancePreviousValues{\r\n    id: string\r\n    time: string\r\n}\r\n\r\nexport enum Role {\r\n    SUPERADMIN=\"SUPERADMIN\", \r\n    ADMIN=\"ADMIN\",\r\n    USER=\"USER\"\r\n}","import { split } from 'apollo-link';\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink,createHttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { setContext } from 'apollo-link-context';\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://murmuring-fortress-24950.herokuapp.com/'\r\n});\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://murmuring-fortress-24950.herokuapp.com/',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('token');\r\n  console.log(\"in header:\"+token)\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n}); \r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n);\r\n  \r\n\r\nconst client=new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache(),\r\n    credentials: 'include',\r\n    request: async operation => {\r\n      operation.setContext({\r\n        fetchOptions: {\r\n          credentials: 'same-origin'\r\n        }\r\n      })\r\n    },\r\n    fetchOptions: {\r\n      credentials: 'include'\r\n   }\r\n  })\r\n\r\nexport default client","import React, { Fragment, ReactElement } from 'react'\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from './Interfaces';\r\n\r\ninterface Props {\r\n  history:any\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\nconst useStyles = makeStyles({\r\n    root:{textDecoration:'none'},\r\n    avtive: {\r\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n      border: 0,\r\n      borderRadius: 3,\r\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n      color: 'white',\r\n      height: 48,\r\n      padding: '0 30px',\r\n      textDecoration:'none'\r\n    }\r\n  });\r\nconst Nav = (props: Props):ReactElement => {\r\n    const classes = useStyles();\r\n    const role=localStorage.getItem(\"role\");\r\n    console.log(\"role:\"+role)\r\n\r\n    const handleLogout =  () => {\r\n      props.userHasAuthenticated(false);\r\n\r\n      localStorage.clear()\r\n    }\r\n\r\n    return (\r\n    role==Role.SUPERADMIN\r\n        ?\r\n        <Fragment>\r\n\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/program\">Add Program</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/faculty\">Add Faculty</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n        <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        </Breadcrumbs>\r\n        </Fragment>\r\n        :\r\n    role==Role.ADMIN\r\n        ?\r\n        <Fragment>\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n        <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        </Breadcrumbs>\r\n        </Fragment>\r\n        :\r\n        <Fragment>\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        </Breadcrumbs>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React ,{Component,Fragment, useState, PropsWithChildren, ReactElement}from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs,Chip  } from '@material-ui/core'\r\nimport { emphasize, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {LockOpen,Person,Loyalty,Subject} from '@material-ui/icons'\r\nimport PropTypes from 'prop-types';\r\nimport { Routes } from \"./Routes\";\r\nimport client from './Client'\r\nimport Login from './component/signup/Login'\r\nimport ProgramList from './component/programs/ProgramList'\r\nimport './App.css';\r\nimport CourseList from './component/courses/CourseList';\r\nimport FacultyList from './component/faculties/FacultyList';\r\nimport StudentList from './component/students/StudentList';\r\n\r\nimport { Role } from './component/Interfaces';\r\nimport Nav from './component/Nav';\r\n\r\ninterface AppProps {\r\n  history: any;\r\n}\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root:{textDecoration:'none'},\r\n  avtive: {\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n    textDecoration:'none'\r\n  }\r\n});\r\n\r\nfunction App(props:AppProps): ReactElement<AppProps> {\r\n  const classes = useStyles();\r\n  const [isAuthenticated,setIsAuth]=useState(localStorage.getItem(\"role\")?true:false)\r\n  const [isAuthenticating,setIsAuth2]=useState(false)\r\n  const [value,setValue]=useState(0)\r\n\r\n\r\n  // async componentDidMount() {\r\n    // try {\r\n    //   if (await Auth.currentSession()) {\r\n    //     this.userHasAuthenticated(true);\r\n    //   }\r\n    // }\r\n    // catch(e) {\r\n    //   if (e !== 'No current user') {\r\n    //     alert(e);\r\n    //   }\r\n    // }\r\n  \r\n  //   setIsAuth2(false);\r\n  // }\r\n  const userHasAuthenticated = (authenticated: boolean) => {\r\n    setIsAuth(authenticated);\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    // await Auth.signOut();\r\n  \r\n    userHasAuthenticated(false);\r\n    props.history.push(\"/login\");\r\n  }\r\n\r\n  const handleChange = (event:React.ChangeEvent<{}>, newValue:number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  const showLoggedInBar = () => {\r\n    const role=localStorage.getItem(\"role\");\r\n    console.log(\"role:\"+role)\r\n    if(role==Role.SUPERADMIN)\r\n    {\r\n      return <Fragment>\r\n\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/program\">Add Program</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/faculty\">Add Faculty</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n      </Breadcrumbs>\r\n    </Fragment>\r\n    }\r\n    else if(role==Role.ADMIN)\r\n    {\r\n      return <Fragment>\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n      <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n      </Breadcrumbs>\r\n    </Fragment>\r\n    }\r\n    \r\n  };\r\n\r\n\r\n  const showLoggedOutBar = () => (\r\n    <Fragment>\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink to=\"/\">Home</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n    </Breadcrumbs>\r\n\r\n      \r\n    </Fragment>\r\n  );\r\n\r\n  \r\n\r\n\r\n  const childProps = {\r\n    isAuthenticated: isAuthenticated,\r\n    userHasAuthenticated: userHasAuthenticated\r\n  };\r\n\r\n  \r\n\r\n    \r\n  return (\r\n    <div>\r\n    <ApolloProvider client={client}>\r\n    <div>\r\n      {isAuthenticated ? \r\n        <Nav history={props.history} isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/> : \r\n        <Login isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>}\r\n      <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n    </div>\r\n    </ApolloProvider>\r\n    </div>\r\n  );\r\n  \r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={'/client'}>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}