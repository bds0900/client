{"version":3,"sources":["component/signup/Home.tsx","component/Query.ts","component/signup/Login.tsx","component/common/SelectProgram.tsx","component/signup/Signup.tsx","component/programs/Program.tsx","component/programs/ProgramList.tsx","component/programs/UpdateProgram.tsx","component/programs/ProgramDetail.tsx","component/courses/CourseList.tsx","component/courses/CreateClass.tsx","component/courses/UpdateCourse.tsx","component/courses/Course.tsx","component/students/StudentList.tsx","component/common/SelectCourses.tsx","component/enrollment/CreateEnrollment.tsx","component/students/UpdateStudent.tsx","component/students/Student.tsx","component/programs/CreateProgram.tsx","component/courses/CreateCourse.tsx","component/faculties/FacultyList.tsx","component/instructing/CreateInstructing.tsx","component/faculties/UpdateFaculty.tsx","component/faculties/Faculty.tsx","component/faculties/CreateFaculty.tsx","Routes.tsx","component/Interfaces.ts","Client.js","component/Nav.tsx","App.tsx","index.js"],"names":["Home","props","GET_STUDENTS","gql","GET_STUDENT","CREATE_STUDENT","UPDATE_STUDENT","GET_ATTENDANCE","GET_PROGRAMS","GET_PROGRAMS_BY_FAULTY_ID","GET_PROGRAM","CREATE_PROGRAM","UPDATE_PROGRAM","CREATE_COURSE","GET_COURSES","GET_COURSES_BY_PROGRAM_ID","GET_COURSES_BY_FACULTY_ID","GET_COURSE","UPDATE_COURSE","CREATE_ENROLLMENT","GET_FACULTIES","GET_FACULTY","CREATE_FACULTY","LOGIN","CREATE_INSTRUCTING","UPDATE_FACULTY","CREATE_CLASS","emailRegex","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","useState","email","setEmail","password","setPassword","emailValid","setEmailValid","passwordValid","setPasswrodValid","classes","useMutation","variables","login","data","error","token","userHasAuthenticated","localStorage","setItem","Faculty","status","id","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","to","TextField","required","fullWidth","name","autoComplete","autoFocus","placeholder","label","value","onChange","event","target","test","toLowerCase","type","length","Button","color","onClick","catch","e","alert","disabled","SelectProgram","programs","program","setProgram","InputLabel","Select","onProgramClick","map","MenuItem","key","nameRegex","Signup","firstName","setFirstName","lastName","setLastName","setID","firstNameValid","setFirstNameValid","lastNameValid","setLastNameValid","result","useQuery","program_id","saveStudent","genID","min","max","user_id","String","Math","floor","random","console","log","genEmail","substring","message","createStudent","gutterBottom","LastName","createStyles","root","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Program","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","List","courses","course","ListItem","ProgramList","role","getItem","QERUY","loading","UpdateProgram","setName","saveProgram","updateProgram","update","setUpdate","match","params","faculties","faculty","students","student","CourseList","CreateClass","course_id","room","setRoom","start","setStart","end","setEnd","saveClass","class","UpdateCourse","numOfStudent","NOS","setNOS","addClass","setClass","saveCourse","updateCourse","Number","Course","coure_id","enrollments","enrollment","clas","startTime","endTime","StudentList","SelectCourses","setCourse","React","onCourseClick","CreateEnrollment","student_id","saveEnrollment","addCourse","updateStudent","Student","refetch","useSubscription","open","setOpen","button","Collapse","in","timeout","unmountOnExit","attendances","att","time","CreateProgram","createProgram","createCourse","FacultyList","CreateInstructing","faculty_id","saveInstructing","insctructing","undefined","saveFaculty","updateFaculty","instructings","instructing","CreateFaculty","createFaculty","MutationType","Role","Routes","childProps","path","exact","render","CreateCourse","ProgramDetail","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","authLink","setContext","_","headers","authorization","link","split","query","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","credentials","request","a","fetchOptions","textDecoration","avtive","background","border","borderRadius","boxShadow","height","padding","toolbar","paddingRight","toolbarIcon","justifyContent","marginLeft","mixins","appBarShift","drawerWidth","transition","transitions","create","easing","sharp","duration","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","fixedHeight","sidebarIcon","Nav","SUPERADMIN","NavLink","ListItemIcon","ListItemText","primary","ADMIN","appBar","zIndex","drawer","leavingScreen","drawerPaperClose","overflowX","breakpoints","up","App","isAuthenticated","setIsAuth","clsx","authenticated","handleLogout","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Icon","Drawer","Divider","history","ReactDOM","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39ad674c.chunk.js","sourcesContent":["import React, { Fragment, ReactElement } from 'react'\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from '../Interfaces';\r\nimport Nav from '../Nav'\r\ninterface Props {\r\n    isAuthenticated: boolean;\r\n    userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nconst Home = (props: Props):ReactElement => {\r\n\r\n    return (\r\n        <Fragment>\r\n        \r\n        home\r\n        </Fragment>\r\n    )\r\n    \r\n}\r\n\r\nexport default Home\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_STUDENTS = gql`\r\n{\r\n  students{\r\n    id\r\n    firstName\r\n    LastName\r\n  }\r\n}\r\n`;\r\nexport const GET_STUDENT=gql`\r\n    query GET_STUDENT($student_id:ID){\r\n    student(where:{id:$student_id}){\r\n        id\r\n        firstName\r\n        LastName\r\n        email\r\n        status\r\n        program{\r\n            id\r\n            name\r\n        }\r\n        enrollments{\r\n            id\r\n            course{\r\n                id\r\n                name\r\n                attendances{\r\n                    time\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n  }\r\n`;\r\nexport const CREATE_STUDENT=gql`\r\n    mutation CREATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createStudent(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"full-time\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const UPDATE_STUDENT=gql`\r\n    mutation UPDATE_STUDENT(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateStudent(\r\n            where:{id:$id},\r\n            data:{\r\n                firstName:$firstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"full-time\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nexport const GET_ATTENDANCE=gql`\r\n    subscription GET_ATTENDANCE{\r\n        attendance{\r\n            mutation\r\n            node{\r\n                time\r\n                student{\r\n                    id\r\n                    firstName\r\n                    enrollments{\r\n                        course{\r\n                            attendances{\r\n                                time\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n`;\r\n\r\n\r\nexport const GET_PROGRAMS = gql`\r\n{\r\n  programs(orderBy:name_ASC) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\nexport const GET_PROGRAMS_BY_FAULTY_ID = gql`\r\nquery GET_PROGRAMS_BY_FAULTY_ID($id:ID){\r\n  programs(orderBy:name_ASC\r\n  where:{\r\n      faculties_every:{\r\n          id:$id\r\n      }\r\n  }) {\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_PROGRAM = gql`\r\nquery GET_PROGRAM($id:ID){\r\n  program(where:{id:$id}){\r\n    id\r\n    name\r\n    courses{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATE_PROGRAM=gql`\r\n    mutation CREATE_PROGRAM($id:ID!,$name:String!){\r\n        createProgram(data:{\r\n            id:$id\r\n            name:$name\r\n        }){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_PROGRAM=gql`\r\n    mutation UPDATE_PROGRAM($id:ID!,$name:String!){\r\n        updateProgram(where:{id:$id},\r\n            data:{name:$name}\r\n        ){\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nexport const CREATE_COURSE=gql`\r\n    mutation CREATE_COURSE($id:ID!,$name:String!,$NOS:Int!,$program_id:ID){\r\n        createCourse(data:{\r\n            id:$id\r\n            name:$name\r\n            numOfStudent:$NOS\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            name\r\n            numOfStudent\r\n            program{\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const GET_COURSES = gql`\r\n  {\r\n    courses {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COURSES_BY_PROGRAM_ID = gql`\r\n  query GET_COURSES_BY_PROGRAM_ID($program_id:ID)\r\n  {\r\n    courses(where:{\r\n        program:{\r\n            id:$program_id\r\n        }\r\n    }){\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\nexport const GET_COURSES_BY_FACULTY_ID = gql`\r\n  query GET_COURSES_BY_FACULTY_ID($_id: ID) {\r\n    courses(where: {\r\n        instructings_every:{\r\n            faculty:{\r\n                id:$id\r\n            }\r\n        }}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          firstName\r\n          LastName\r\n        }\r\n      }\r\n      class{\r\n          id\r\n          room\r\n          startTime\r\n          endTime\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\nexport const GET_COURSE = gql`\r\n  query Get_COURSE($coure_id: ID!) {\r\n    course(where: {id:$coure_id}) {\r\n      id\r\n      name\r\n      numOfStudent\r\n      program{\r\n        name\r\n      }\r\n      enrollments{\r\n        student{\r\n          id\r\n          firstName\r\n          LastName\r\n        }\r\n      }\r\n      class{\r\n          id\r\n          room\r\n          startTime\r\n          endTime\r\n      }\r\n\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const UPDATE_COURSE=gql`\r\n    mutation UPDATE_COURSE($id:ID!,$name:String!,$NOS:Int,$program:ID){\r\n        updateCourse(where:{id:$id},\r\n            data:{\r\n                name:$name\r\n                numOfStudent:$NOS\r\n                program:{\r\n                    connect:{\r\n                        id:$program\r\n                    }\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            name\r\n            numOfStudent\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_ENROLLMENT=gql`\r\n    mutation CREATE_ENROLLMENT($student_id:ID,$course_id:ID){\r\n        createEnrollment(data:{\r\n            student:{\r\n                connect:{\r\n                    id:$student_id\r\n                }\r\n            }\r\n            course:{\r\n                connect:{\r\n                    id:$course_id\r\n                }\r\n            }\r\n        }){\r\n            student{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n`;\r\n\r\n\r\nexport const GET_FACULTIES=gql`\r\n    query{\r\n        faculties{\r\n            id\r\n            firstName\r\n            LastName\r\n        }\r\n    }\r\n`;\r\nexport const  GET_FACULTY=gql`\r\n    query($faculty_id:ID){\r\n        faculty(where:{id:$faculty_id}){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            status\r\n            instructings{\r\n                id\r\n                course{\r\n                    name\r\n                    attendances{\r\n                        time\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_FACULTY=gql`\r\n    mutation CREATE_FACULTY(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $email:String!,$program_id:ID){\r\n        createFaculty(data:{\r\n            id:$id\r\n            firstName:$firstName\r\n            LastName:$lastName\r\n            email:$email\r\n            password:$password\r\n            status:\"USER\"\r\n            program:{\r\n                connect:{id:$program_id}\r\n            }\r\n        }){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n            program{\r\n                name\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\nexport const LOGIN=gql`\r\n    mutation LOGIN($email:String!,$password: String!){\r\n        login(data:{\r\n            email: $email\r\n            password: $password\r\n        }){\r\n            Faculty{\r\n                id,\r\n                firstName,\r\n                LastName,\r\n                email\r\n                status\r\n            },\r\n            token\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_INSTRUCTING=gql`\r\n    mutation CREATE_INSTRUCTING($faculty_id:ID,$course_id:ID){\r\n        createInstructing(data:{\r\n            faculty:{\r\n                connect:{id:$faculty_id}\r\n            }\r\n            course:{\r\n                connect:{id:$course_id}\r\n            }\r\n        }){\r\n            faculty{\r\n                id\r\n            }\r\n            course{\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\nexport const UPDATE_FACULTY=gql`\r\n    mutation UPDATE_FACULTY(\r\n        $id:ID!,$firstName:String!,$lastName:String!,$password:String!,\r\n        $program_id:ID){\r\n        updateFaculty(\r\n            where:{id:$id},\r\n            data:{\r\n                firstName:$firstName\r\n                LastName:$lastName\r\n                password:$password\r\n                status:\"USER\"\r\n                program:{\r\n                    connect:{id:$program_id}\r\n                }\r\n            }\r\n        ){\r\n            id\r\n            firstName\r\n            LastName\r\n            email\r\n\r\n        }\r\n    }\r\n\r\n`;\r\nexport const CREATE_CLASS=gql`\r\n    mutation CREATE_CLASS($course_id:ID,$room:String!,$start:String!,$end:String!){\r\n        createClass(data:{\r\n            room:$room\r\n            startTime:$start\r\n            endTime:$end\r\n            course:{\r\n                connect:{id:$course_id}\r\n            }\r\n        }){\r\n            id\r\n        }\r\n    }\r\n`;","\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport { Redirect } from 'react-router-dom';\r\n// import { FormGroup, FormControl, ControlLabel, Button, Glyphicon } from \"react-bootstrap\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport React, { ReactElement, ReactComponentElement, useState } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { LOGIN } from '../Query';\r\nimport { FacultyType } from '../Interfaces';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\n\r\ninterface LoginProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\ninterface LoginState {\r\n  loading: boolean;\r\n  redirect: boolean;\r\n  email: string;\r\n  password: string;\r\n  emailValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n  passwordValid: \"success\" | \"error\" | \"warning\" | undefined;\r\n}\r\ninterface LoginVars {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface authPayloadType {\r\n  Faculty: FacultyType;\r\n  token: string;\r\n}\r\ninterface LoginData{\r\n  login: authPayloadType\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login(props:LoginProps): ReactElement <LoginProps>  {\r\n\r\n    const [loading,setLoading]=useState(false);\r\n    const [redirect, setReirect] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [emailValid, setEmailValid] = useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    \r\n    // for material ui\r\n    const classes = useStyles();\r\n\r\n  const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setEmail(target.value)\r\n    setEmailValid(emailRegex.test(target.value.toLowerCase()) ? 'success' : 'error')\r\n  }\r\n\r\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target as HTMLInputElement;\r\n    setPassword(target.value);\r\n    setPasswrodValid(target.value.length < 8 ? 'error' : 'success')\r\n    \r\n  }\r\n\r\n  const onLogin = async (event: React.MouseEvent<HTMLButtonElement,MouseEvent>) => {\r\n    event.preventDefault();\r\n    setLoading( true );\r\n\r\n    // try {\r\n    //   await Auth.signIn(email, password);\r\n    //   props.userHasAuthenticated(true);\r\n    //   setReirect(true )\r\n    // } catch (e) {\r\n    //   alert(e.message);\r\n    //   setLoading(false);\r\n    // }\r\n  }\r\n  const [login, { error, data }] = useMutation<LoginData, LoginVars>(\r\n    LOGIN,\r\n    {variables:{email: email, password: password}}\r\n  )\r\n  //if get the data then save it\r\n  if(data && data.login.token!==\"Unable to login\")\r\n  {\r\n    props.userHasAuthenticated(true);\r\n    localStorage.setItem('token',data.login.token)\r\n    localStorage.setItem('role',data.login.Faculty.status)\r\n    localStorage.setItem('id',data.login.Faculty.id)\r\n  }\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log In\r\n          </Typography>\r\n          {data && data.login.token!==\"Unable to login\"\r\n            ?\r\n            <Redirect to='/home' />\r\n            :\r\n          <div className=\"Login\">\r\n            <div className={ classes.form }>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                placeholder=\"Enter your email\"\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={onEmailChange}\r\n              />\r\n              <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your Password\"\r\n                  label=\"Password\"\r\n                  value={password}\r\n                  onChange={onPasswordChange}\r\n              />\r\n\r\n                <Button\r\n                  //type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick={()=>login().catch((e) => {\r\n                    alert(\"Login Failed.\")\r\n                    setPassword(\"\")\r\n                  })}\r\n                  disabled={passwordValid !== 'success' || emailValid !== 'success' }\r\n                >\r\n                  Log in\r\n                </Button>\r\n            </div>\r\n          </div>\r\n          }\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </Container>\r\n    );\r\n  \r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { Select, MenuItem, InputLabel } from '@material-ui/core'\r\nimport { ProgramType } from '../Interfaces'\r\n\r\ninterface Props {\r\n    programs:ProgramType[]|undefined\r\n    onProgramClick:any\r\n}\r\n\r\nexport default function SelectProgram(props: Props): ReactElement {\r\n\r\n    const programs=props.programs;\r\n    const [program,setProgram]=useState<string>();\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n        <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={e=>{\r\n            setProgram(e.target.value as string)\r\n            props.onProgramClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            programs?.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_STUDENT } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    createStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\nexport default function Signup({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [firstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        CREATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"999\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        \r\n        setID(user_id)\r\n        console.log(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                id.substring(3)+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n        console.log(email)\r\n        return email\r\n    }\r\n    return (\r\n        <div>\r\n        <h3>Sign Up</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createStudent \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.createStudent.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student name: {data && data.createStudent.firstName} {data.createStudent.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student Email: {data && data.createStudent.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.createStudent.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\"\r\n                disabled={passwordValid !== 'success' || firstNameValid !== 'success' || lastNameValid !== 'success' }\r\n                onClick={() => id && firstName && lastName && email && program && saveStudent()}>\r\n                    Sign Up\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  }),\r\n);\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={props.program.id}\r\n      >\r\n        <Typography className={classes.heading}>{props.program.name}</Typography>\r\n        <NavLink to={\"/program/\"+props.program.id}>detail</NavLink>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        \r\n        {props.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n        \r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport Program from './Program'\r\nimport {List,ListItem,Collapse,Typography} from '@material-ui/core';\r\nimport {ProgramType} from '../Interfaces'\r\nimport './programList.css'\r\nimport {GET_PROGRAMS, GET_PROGRAMS_BY_FAULTY_ID} from '../Query'\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface Props {\r\n    \r\n}\r\nexport default function ProgramList({}: Props): ReactElement {\r\n\r\n    const role=localStorage.getItem('role')\r\n    const id=localStorage.getItem('id')\r\n    const QERUY=role=='USER'?GET_PROGRAMS_BY_FAULTY_ID:GET_PROGRAMS\r\n    console.log(QERUY)\r\n    const { loading, data } = useQuery<ProgramListData,ProgramListVars>(QERUY,{variables:{id:id}});\r\n\r\n    return (\r\n        <Fragment>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            <List>\r\n            {data && data.programs.map(program => (\r\n                <ListItem key={program.id} className=\"program-list\"> <Program program={program}/> </ListItem>\r\n\r\n            ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {UPDATE_PROGRAM}from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\n\r\n\r\ninterface ProgramData {\r\n    updateProgram: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\ninterface Props {\r\n    program:ProgramType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateProgram(props: Props): ReactElement {\r\n\r\n  \r\n  const [name, setName] = useState(props.program.name)\r\n  const [id, setID] = useState(props.program.id)\r\n\r\n  const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n    UPDATE_PROGRAM,\r\n    {variables:{id:id,name:name}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Program</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.updateProgram ? \r\n            <p>Saved!</p> : \r\n\r\n\r\n    <div className=\"CreateProgram\">\r\n    <TextField\r\n    placeholder=\"Enter the Program name\"\r\n    label=\"Program Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter program ID\"\r\n    label=\"Program ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n        Update Program\r\n    </Button>\r\n    </div>\r\n\r\n\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType} from '../Interfaces'\r\nimport {GET_PROGRAM} from '../Query'\r\nimport './programList.css'\r\nimport Course from '../courses/Course';\r\nimport UpdateProgram from './UpdateProgram';\r\n\r\n\r\ninterface ProgramData {\r\n    program: ProgramType;\r\n}\r\n  \r\ninterface ProgramVars {\r\n    id: string;\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function Program(props: Props): ReactElement {\r\n  \r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [update, setUpdate] = useState(false);\r\n  const { loading, data } = useQuery<ProgramData, ProgramVars>(\r\n    GET_PROGRAM,\r\n    { variables: { id: props.match.params.id } }\r\n  );\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    {update?\r\n      <div>\r\n      {data&&<UpdateProgram program={data.program}/>}\r\n      </div>:\r\n    \r\n    \r\n      <div>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program ID: {data && data?.program.id}\r\n    </Typography>\r\n    <Typography variant=\"h5\" gutterBottom>\r\n    Program name: {data && data?.program.name}\r\n    </Typography>\r\n\r\n    <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Course List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.courses?.map(course=>(\r\n          <ListItem key={course.id}>\r\n            <NavLink to={\"/course/\"+course.id}>\r\n            <Typography>{course.name}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel2a-content\"\r\n        id=\"panel2a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Faculty List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.faculties?.map(faculty=>(\r\n          <ListItem key={faculty.id}>\r\n            <NavLink to={\"/faculty/\"+faculty.id}>\r\n            <Typography>{faculty.firstName} {faculty.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel3a-content\"\r\n        id=\"panel3a-header\"\r\n      >\r\n        <Typography >{data?.program.name} Student List</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n      <List>\r\n        {data?.program.students?.map(student=>(\r\n          <ListItem key={student.id}>\r\n            <NavLink to={\"/student/\"+student.id}>\r\n            <Typography>{student.firstName} {student.LastName}</Typography>\r\n            </NavLink> \r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n    \r\n    </div>\r\n    }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { CourseType } from '../Interfaces'\r\nimport gql from 'graphql-tag';\r\nimport Course from './Course';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem} from '@material-ui/core';\r\nimport {GET_COURSES, GET_COURSES_BY_FACULTY_ID } from '../Query'\r\ninterface CourseListData {\r\n    courses: CourseType[];\r\n}\r\n  \r\ninterface CourseListVars {\r\n\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function CourseList(props: Props): ReactElement {\r\n    const role=localStorage.getItem('role')\r\n    const id=localStorage.getItem('id')\r\n    const QERUY=role=='USER'?GET_COURSES_BY_FACULTY_ID:GET_COURSES\r\n    console.log(QERUY)\r\n    const{loading,data}= useQuery<CourseListData,CourseListVars>(QERUY,{variables:{id:id}});\r\n    return (\r\n        <div>\r\n        {loading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Fragment>\r\n            course list\r\n            <List>\r\n              {data && data.courses.map(course => (\r\n                <ListItem key={course.id} className=\"course-list\"> \r\n                  <NavLink to={\"/course/\"+course.id}> {course.name}</NavLink>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType, InstructingType,ClassType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS, CREATE_INSTRUCTING,CREATE_CLASS} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    course_id:string\r\n}\r\ninterface ClassData{\r\n    class:ClassType\r\n}\r\ninterface ClassVars{\r\n\r\n}\r\n\r\nexport default function CreateClass(props: Props): ReactElement {\r\n\r\n\r\n    const [id, setID] = useState(props.course_id)\r\n    const [room, setRoom] = useState(\"\")\r\n    const [start, setStart] = useState(\"\")\r\n    const [end, setEnd] = useState(\"\")\r\n\r\n\r\n    console.log(props.course_id)\r\n    console.log(room)\r\n    console.log(start)\r\n    console.log(end)\r\n    const [saveClass, { error, data }]=useMutation<ClassData,ClassVars>(\r\n        CREATE_CLASS,\r\n        {\r\n            variables:{\r\n                course_id:props.course_id,\r\n                room:room,\r\n                start:start,\r\n                end:end\r\n            }\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Class</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.class \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        \r\n        <div className=\"CreateClass\">\r\n        <TextField\r\n        placeholder=\"Enter the Room name\"\r\n        label=\"Room Name\"\r\n        value={room}\r\n        onChange={e=>setRoom(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter the start time\"\r\n        label=\"Start Time\"\r\n        value={start}\r\n        onChange={e=>setStart(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter the end time\"\r\n        label=\"End Time\"\r\n        value={end}\r\n        onChange={e=>setEnd(e.target.value)}\r\n        />\r\n        <br/>\r\n\r\n\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            room && start && end && saveClass() }>\r\n            Add Class\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment,useState } from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery ,useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, TextField, Button, InputLabel, MenuItem, Select} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {ProgramType, CourseType} from '../Interfaces'\r\nimport {UPDATE_COURSE, GET_PROGRAMS}from '../Query'\r\nimport Course from '../courses/Course';\r\nimport CreateClass from './CreateClass';\r\n\r\n\r\ninterface CourseData {\r\n    updateCourse: CourseType;\r\n}\r\n  \r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    numOfStudent:number\r\n    program:string\r\n}\r\ninterface ProgramData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramVars {\r\n\r\n}\r\ninterface Props {\r\n    course:CourseType;\r\n}\r\n\r\n\r\n//this component get program type as props and display program infomation\r\nexport default function UpdateCourse(props: Props): ReactElement {\r\n\r\n  const course=props.course\r\n  const [name, setName] = useState(course.name)\r\n  const [id, setID] = useState(course.id)\r\n  const [program,setProgram]=useState(course.program.name)\r\n  const [NOS, setNOS] = useState(course.numOfStudent)\r\n  const [addClass, setClass] = useState(false)\r\n  \r\n\r\n  const result=useQuery<ProgramData,ProgramVars>(GET_PROGRAMS)\r\n  const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n    UPDATE_COURSE,\r\n    {variables:{id:id,name:name,numOfStudent:NOS, program:program}}\r\n  )\r\n\r\n  return (\r\n    <div>\r\n    <h3>Update a Course</h3>\r\n    {addClass?<CreateClass course_id={id}/>:\r\n    <div>\r\n    {error ? <p>Oh no! {error.message}</p> : null}\r\n    {data && data.updateCourse \r\n        ? \r\n    <p>Saved!</p> \r\n        : \r\n\r\n\r\n    \r\n    <div className=\"UpdateCourse\">\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n        setClass(true) }>\r\n        Add Class\r\n    </Button>\r\n    <br/>\r\n    <TextField\r\n    placeholder=\"Enter the Course name\"\r\n    label=\"Course Name\"\r\n    value={name}\r\n    onChange={e=>setName(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField disabled\r\n    placeholder=\"Enter Course ID\"\r\n    label=\"Course ID\"\r\n    value={id}\r\n    onChange={e=>setID(e.target.value)}\r\n    />\r\n    <br/>\r\n    <TextField \r\n    placeholder=\"Enter Number of Student\"\r\n    label=\"Number of Student\"\r\n    value={NOS}\r\n    onChange={e=>setNOS(Number(e.target.value))}\r\n    />\r\n    <br/>\r\n    Current program is {props.course.program.name}\r\n\r\n    <InputLabel >Program</InputLabel>\r\n        <Select value={program} onChange={(e)=>setProgram(e.target.value as string)}>\r\n        {result.loading?(\r\n                <MenuItem  disabled>loading....</MenuItem >\r\n        ):(\r\n            result.data?.programs.map(program=>(\r\n                <MenuItem  key={program.id} value={program.id}>\r\n                    {program.name}\r\n                </MenuItem >\r\n            ))\r\n        )}\r\n        </Select>\r\n\r\n\r\n    <br/>\r\n    <Button color=\"primary\" variant=\"text\" onClick={() => id && name && NOS && program && saveCourse()}>\r\n        Update Course\r\n    </Button>\r\n    </div>\r\n\r\n    }\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { CourseType } from '../Interfaces';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {ExpansionPanel ,ExpansionPanelSummary ,ExpansionPanelDetails ,Typography ,List,ListItem, Button} from '@material-ui/core';\r\nimport {GET_COURSE} from '../Query'\r\nimport UpdateCourse from './UpdateCourse';\r\n\r\n\r\ninterface CourseData{\r\n    course:CourseType\r\n}\r\ninterface CourseVars{\r\n    coure_id:string\r\n}\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\n\r\nexport default function Course(props: Props): ReactElement {\r\n  \r\n    const [update, setUpdate] = useState(false);\r\n    const { loading, data } = useQuery<CourseData, CourseVars>(\r\n        GET_COURSE,\r\n        { variables: { coure_id: props.match.params.id } }\r\n      );\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        {update ? (\r\n          data && <UpdateCourse course={data.course}></UpdateCourse>\r\n        ) : (\r\n          <Fragment>\r\n          \r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course ID: {data && data.course.id}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Program name: {data && data.course.program.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Course name: {data && data.course.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Students: {data && data.course.numOfStudent}\r\n          </Typography>\r\n          \r\n          Student List\r\n          <List>\r\n          {data && data.course.enrollments && data.course.enrollments.map(enrollment=>(\r\n            <NavLink to={\"/student/\"+enrollment.student.id}>\r\n            <ListItem key={enrollment.student.id}>\r\n              {enrollment.student.firstName} {enrollment.student.LastName}\r\n            </ListItem>\r\n            </NavLink>\r\n          ))} \r\n          </List>\r\n\r\n          Class List\r\n          <List>\r\n          {data && data.course.class && data.course.class.map(clas=>(\r\n\r\n            <ListItem key={clas.id}>\r\n              Room: {clas.room}   start: {clas.startTime}   end:{clas.endTime}\r\n            </ListItem>\r\n\r\n          ))} \r\n          </List>\r\n\r\n          <Button onClick={()=>setUpdate(!update)}>update</Button>\r\n          </Fragment>\r\n\r\n        )}\r\n        \r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType } from '../Interfaces';\r\nimport { GET_STUDENTS } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface StudentListData {\r\n    students: StudentType[];\r\n}\r\n  \r\ninterface StudentListVars {\r\n    student_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function StudentList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<StudentListData,StudentListVars>(\r\n        GET_STUDENTS\r\n    );\r\n    return (\r\n        <div>\r\n            Student list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.students.map(student => (\r\n                    <List key={student.id} className=\"student-list\"> \r\n                    <NavLink to={\"/student/\"+student.id}> {student.firstName} {student.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, ChangeEvent } from 'react'\r\nimport { Select, MenuItem, InputLabel, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport {  CourseType, ProgramType } from '../Interfaces'\r\nimport SelectProgram from './SelectProgram';\r\nimport { GET_PROGRAMS, GET_COURSES_BY_PROGRAM_ID } from '../Query';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\ninterface Props {\r\n    onProgramClick:any\r\n    onCourseClick:any\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface CourseData{\r\n    courses:CourseType[]|undefined\r\n}\r\ninterface CourseVars{\r\n    program_id:string\r\n}\r\ninterface ProgramListVars {\r\n\r\n}\r\nexport default function SelectCourses(props: Props): ReactElement {\r\n\r\n    const [program_id,setProgram]=useState<string>(\"\");\r\n    const [course,setCourse]=useState<string>();\r\n    \r\n\r\n    const {loading,data} = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n\r\n    const result = useQuery<CourseData,CourseVars>(\r\n        GET_COURSES_BY_PROGRAM_ID,\r\n        {variables:{program_id:program_id}}\r\n    );\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n        props.onProgramClick(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n        props.onCourseClick(course_id)\r\n    }\r\n\r\n    const [state, setState] = React.useState({});\r\n    const handleChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n\r\n        let selected:string[]=[];\r\n    \r\n        for (let [key, value] of Object.entries(state)) {\r\n            console.log(key, value);\r\n            if(value) selected.push(key)\r\n        }\r\n        props.onCourseClick(selected)\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {loading\r\n            ?\r\n        <div>loading....</div>\r\n            :\r\n        <SelectProgram programs={data?.programs} onProgramClick={onProgramClick}/>\r\n        }\r\n        \r\n\r\n        <br/>\r\n        <Select value={course} onChange={e=>{\r\n            setCourse(e.target.value as string)\r\n            props.onCourseClick(e.target.value as string)\r\n        }}>\r\n        {\r\n            result.data?.courses?.map(course=>(\r\n                <MenuItem  key={course.id} value={course.id}>\r\n                    {course.name}\r\n                </MenuItem >\r\n            ))\r\n        }\r\n        </Select>\r\n        </div>\r\n    )\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS, CREATE_ENROLLMENT} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    student_id:string\r\n\r\n}\r\n\r\n\r\ninterface EnrollmentData{\r\n    enrollment:EnrollmentType\r\n}\r\ninterface EnrollmentVars{\r\n\r\n}\r\n\r\nexport default function CreateEnrollment(props: Props): ReactElement {\r\n\r\n\r\n\r\n    const [id, setID] = useState(props.student_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n    {console.log(id)}\r\n\r\n    const [saveEnrollment, { error, data }]=useMutation<EnrollmentData,EnrollmentVars>(\r\n        CREATE_ENROLLMENT,\r\n        {\r\n            variables:{student_id:props.student_id,course_id:course}\r\n        }\r\n    )\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.enrollment \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveEnrollment() }>\r\n            Update User\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_STUDENT , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\n\r\ninterface Props {\r\n    student:StudentType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface StudentData {\r\n    updateStudent: StudentType;\r\n}\r\n  \r\ninterface StudentVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const student=props.student\r\n    const [firstName, setFirstName] = useState(student.firstName)\r\n    const [lastName, setLastName] = useState(student.LastName)\r\n    const [program, setProgram] = useState(student.program.id)\r\n    const [password, setPassword] = useState(student.password)\r\n    const [id, setID] = useState(student.id)\r\n    const [email, setEmail] = useState(student.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveStudent, { error, data }]=  \r\n    useMutation<StudentData,StudentVars>(\r\n        UPDATE_STUDENT,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateEnrollment student_id={id}></CreateEnrollment>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateStudent \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateStudent.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateStudent.firstName} {data.updateStudent.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateStudent.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateStudent.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                \r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveStudent() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateStudent from './UpdateStudent'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_STUDENT } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface StudentData{\r\n    student:StudentType;\r\n}\r\ninterface StudentVars{\r\n    student_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Student(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<StudentData,StudentVars>(\r\n        GET_STUDENT,\r\n        {variables:{student_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n    const role = localStorage.getItem('role')\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateStudent student={data.student}></UpdateStudent>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Student ID: {data && data.student.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n               Name: {data && data.student.firstName} {data && data.student.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Email: {data && data.student.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Status: {data && data.student.status}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Program: {data && data.student.program.name}\r\n            </Typography>\r\n\r\n            {role!=='USER'? \r\n                <div>\r\n                Enrolled Course List\r\n                {data && data.student.enrollments.map(enrollment=>(\r\n                    \r\n                    <List>\r\n                        <ListItem button onClick={()=>(setOpen(!open))} >\r\n                            {enrollment.course.name}\r\n                        </ListItem>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <List>\r\n                            {enrollment.course.attendances.map(att=>(\r\n                                <ListItem >{att.time}</ListItem>\r\n                            ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </List>\r\n                    \r\n                ))}\r\n                <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n                </div>\r\n\r\n                :\r\n                \r\n                <div/>\r\n            }\r\n                \r\n            \r\n\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation  } from '@apollo/react-hooks';\r\n\r\nimport {ProgramType} from '../Interfaces'\r\nimport {CREATE_PROGRAM} from '../Query'\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramData{\r\n    createProgram:ProgramType\r\n}\r\ninterface ProgramVars {\r\n    id: string;\r\n    name:string;\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n\r\n    \r\n\r\n    const [saveProgram, { error, data }]=  useMutation<ProgramData,ProgramVars>(\r\n        CREATE_PROGRAM,\r\n        {variables:{id:id,name:name}}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Program</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createProgram ? \r\n            <p>Saved!</p> : \r\n         \r\n            <div className=\"CreateProgram\">\r\n            <TextField\r\n            placeholder=\"Enter the Program name\"\r\n            label=\"Program Name\"\r\n            value={name}\r\n            onChange={e=>setName(e.target.value)}\r\n            />\r\n            <br/>\r\n            <TextField\r\n            placeholder=\"Enter program ID\"\r\n            label=\"Program ID\"\r\n            value={id}\r\n            onChange={e=>setID(e.target.value)}\r\n            />\r\n            <br/>\r\n            <Button color=\"primary\" variant=\"text\" onClick={() => id && name &&  saveProgram()}>\r\n                Create Program\r\n            </Button>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\n\r\ninterface CourseData{\r\n    createCourse:CourseType\r\n}\r\ninterface CourseVars {\r\n    id: string;\r\n    name:string;\r\n    NOS:number;\r\n    program_id:string\r\n}\r\n\r\nexport default function CreateProgram({}: Props): ReactElement {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [numOfStudent, setNOS] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    \r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    const [saveCourse, { error, data }]=  useMutation<CourseData,CourseVars>(\r\n        CREATE_COURSE,\r\n        {variables:{id:id,name:name,NOS:Number(numOfStudent),program_id:program}}\r\n    )\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.createCourse \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <form>\r\n        <div className=\"CreateCourse\">\r\n        <TextField\r\n        placeholder=\"Enter the course name\"\r\n        label=\"Course Name\"\r\n        value={name}\r\n        onChange={e=>setName(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter course ID\"\r\n        label=\"Course ID\"\r\n        value={id}\r\n        onChange={e=>setID(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField\r\n        placeholder=\"Enter number of student\"\r\n        label=\"Number of student\"\r\n        value={numOfStudent}\r\n        onChange={e=>setNOS(e.target.value)}\r\n        />\r\n        <br/>\r\n       \r\n        <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n \r\n        <br/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => id && name && numOfStudent && program && saveCourse()}>\r\n            Create Course\r\n        </Button>\r\n        </div>\r\n        </form>\r\n        \r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, Fragment } from 'react'\r\nimport { useQuery} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_FACULTIES } from '../Query';\r\nimport { List } from '@material-ui/core';\r\n\r\ninterface FacultyListData {\r\n    faculties: FacultyType[];\r\n}\r\n  \r\ninterface FacultyListVars {\r\n    faculty_id:string;\r\n}\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function FacultyList(props: Props): ReactElement {\r\n    const{loading,data}= useQuery<FacultyListData,FacultyListVars>(\r\n        GET_FACULTIES\r\n    );\r\n    return (\r\n        <div>\r\n            Faculty list\r\n            {loading ? (\r\n                <p>Loading ...</p>\r\n              ) : (\r\n                <Fragment>\r\n                {data && data.faculties.map(faculty => (\r\n                    <List key={faculty.id} className=\"student-list\"> \r\n                    <NavLink to={\"/faculty/\"+faculty.id}> {faculty.firstName} {faculty.LastName}</NavLink>\r\n                    </List>\r\n                ))}\r\n                </Fragment>\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport {TextField,Button,FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery  } from '@apollo/react-hooks';\r\n\r\nimport {CourseType,ProgramType, EnrollmentType, InstructingType} from '../Interfaces'\r\nimport {CREATE_COURSE,GET_PROGRAMS, CREATE_INSTRUCTING} from '../Query'\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\ninterface Props {\r\n    faculty_id:string\r\n}\r\ninterface InstructingData{\r\n    insctructing:InstructingType\r\n}\r\ninterface InstructingVars{\r\n\r\n}\r\n\r\nexport default function CreateInstructing(props: Props): ReactElement {\r\n\r\n\r\n    const [id, setID] = useState(props.faculty_id)\r\n    const [program, setProgram] = useState(\"\")\r\n    const [course, setCourse] = useState(\"\")\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    function onCourseClick(course_id:string):any{\r\n        setCourse(course_id)\r\n    }\r\n\r\n    const [saveInstructing, { error, data }]=useMutation<InstructingData,InstructingVars>(\r\n        CREATE_INSTRUCTING,\r\n        {\r\n            variables:{faculty_id:props.faculty_id,course_id:course}\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add a Course</h3>\r\n        {error ? <p>Oh no! {error.message}</p> : null}\r\n        {data && data.insctructing \r\n            ? \r\n        <p>Saved!</p> \r\n            : \r\n        <div>\r\n        <SelectCourses onProgramClick={onProgramClick} onCourseClick={onCourseClick}/>\r\n        <Button color=\"primary\" variant=\"text\" onClick={() => \r\n            id && course  && saveInstructing() }>\r\n            Add Course\r\n        </Button>\r\n        </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, EnrollmentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, UPDATE_FACULTY , CREATE_ENROLLMENT} from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\nimport SelectCourses from '../common/SelectCourses';\r\nimport CreateEnrollment from '../enrollment/CreateEnrollment';\r\nimport CreateInstructing from '../instructing/CreateInstructing';\r\n\r\ninterface Props {\r\n    faculty:FacultyType\r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    updateFaculty: FacultyType;\r\n}\r\n  \r\ninterface FacultyVars {\r\n\r\n}\r\n\r\ninterface EnrollmentData {\r\n    enrollment:EnrollmentType;\r\n}\r\n  \r\ninterface EnrollmentVars {\r\n\r\n}\r\n\r\nexport default function Signup(props: Props): ReactElement {\r\n    const faculty=props.faculty\r\n    const [firstName, setFirstName] = useState(faculty.firstName)\r\n    const [lastName, setLastName] = useState(faculty.LastName)\r\n    const [program, setProgram] = useState<string|undefined>(faculty.program?faculty.program.id:undefined)\r\n    const [password, setPassword] = useState(faculty.password)\r\n    const [id, setID] = useState(faculty.id)\r\n    const [email, setEmail] = useState(faculty.email)\r\n    const [addCourse,setCourse]=useState(false)\r\n\r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData,FacultyVars>(\r\n        UPDATE_FACULTY,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h3>Update User</h3>\r\n            {addCourse?<CreateInstructing faculty_id={id}></CreateInstructing>:\r\n            <div>\r\n                {error ? <p>Oh no! {error.message}</p> : null}\r\n                {data && data.updateFaculty \r\n                    ? \r\n                <div>\r\n                <p>Saved!</p> \r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student ID: {data && data.updateFaculty.id}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student name: {data && data.updateFaculty.firstName} {data.updateFaculty.LastName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Student Email: {data && data.updateFaculty.email}\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                    Status: {data && data.updateFaculty.status}\r\n                </Typography>\r\n                </div>\r\n                    : \r\n                <div>\r\n                <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                    setCourse(true) }>\r\n                    Add courese\r\n                </Button>\r\n                <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your ID\"\r\n                    label=\"ID\"\r\n                    value={id}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n\r\n                        }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your last name\"\r\n                    label=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={e=>{\r\n                        setLastName(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={e=>{\r\n                        setPassword(e.target.value)\r\n\r\n                    }}\r\n                    />\r\n                    <br/>\r\n                    <TextField\r\n                    disabled\r\n                    placeholder=\"Enter your email\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    />\r\n                    <br/>\r\n                    \r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => \r\n                        id && firstName && lastName && password && program && saveFaculty() }>\r\n                        Update User\r\n                    </Button>\r\n                </div>\r\n                \r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { ReactElement, Fragment, useState } from 'react'\r\nimport { StudentType,AttendanceSubscriptionPayload, FacultyType } from '../Interfaces'\r\nimport { useQuery,useSubscription } from '@apollo/react-hooks'\r\nimport  gql  from 'graphql-tag';\r\n\r\nimport {List,ListItem,Collapse,Typography, Button} from '@material-ui/core';\r\nimport UpdateFaculty from './UpdateFaculty'\r\n\r\nimport Attendance from '../attendances/Attendance';\r\nimport { GET_ATTENDANCE, GET_FACULTY } from '../Query';\r\n\r\ninterface CheckIn{\r\n    attendance:AttendanceSubscriptionPayload\r\n}\r\n\r\ninterface FacultyData{\r\n    faculty:FacultyType;\r\n}\r\ninterface FacultyVars{\r\n    faculty_id:string\r\n}\r\n\r\ninterface Props {\r\n    match:any\r\n}\r\n\r\nexport default function Faculty(props: Props): ReactElement {\r\n    console.log(props.match.params.id)\r\n    const{loading,data,refetch}=useQuery<FacultyData,FacultyVars>(\r\n        GET_FACULTY,\r\n        {variables:{faculty_id:props.match.params.id}}\r\n    )\r\n    const sub=useSubscription<CheckIn>(GET_ATTENDANCE);\r\n    if(!sub.loading) refetch()\r\n    const [open, setOpen] = useState(true);\r\n    const [update,setUpdate]=useState(false);\r\n\r\n    return (\r\n        <div>\r\n        {\r\n        update \r\n            ? \r\n        (data && <UpdateFaculty faculty={data.faculty}></UpdateFaculty>) \r\n            : \r\n        (\r\n            <Fragment>\r\n            {console.log(data)}\r\n            <Typography variant=\"h5\" gutterBottom>\r\n               Faculty ID: {data && data.faculty && data.faculty.id} \r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n               Faculty Name: {data && data.faculty && data.faculty.firstName} {data && data.faculty && data.faculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Eamil: {data && data.faculty && data.faculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Status: {data && data.faculty && data.faculty.status}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Program: {data && data.faculty.program && data.faculty.program.name}\r\n            </Typography>\r\n            \r\n            {data && data.faculty && data.faculty.instructings && data.faculty.instructings.map(instructing=>(\r\n                \r\n                <List>\r\n                    <ListItem button onClick={()=>(setOpen(!open))} >\r\n                        {instructing.course.name}\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List>\r\n                        {instructing.course.attendances.map(att=>(\r\n                            <ListItem >{att.time}</ListItem>\r\n                        ))}\r\n                        </List>\r\n                    </Collapse>\r\n                </List>\r\n                \r\n            ))}\r\n\r\n            \r\n            <Button onClick={()=>setUpdate(!update)}>Update</Button>\r\n            </Fragment>\r\n          )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport { TextField, Button, InputLabel, Select, MenuItem, Typography } from '@material-ui/core'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { ProgramType, StudentType, FacultyType } from '../Interfaces';\r\nimport { GET_PROGRAMS, CREATE_FACULTY } from '../Query';\r\nimport SelectProgram from '../common/SelectProgram';\r\n\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst nameRegex= /(?!^.*[A-Z]{2,}.*$)^[A-Za-z]*$/;\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface ProgramListData {\r\n    programs: ProgramType[];\r\n}\r\n  \r\ninterface ProgramListVars {\r\n\r\n}\r\ninterface FacultyData {\r\n    createFaculty: FacultyType;\r\n}\r\n  \r\n\r\n\r\nexport default function CreateFaculty({}: Props): ReactElement {\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [program, setProgram] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [id, setID] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [firstNameValid,setFirstNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [lastNameValid,setLastNameValid]=useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n    const [passwordValid,setPasswrodValid] =useState<\"success\" | \"error\" | \"warning\" | undefined>();\r\n\r\n    function onProgramClick(program_id:string):any{\r\n        setProgram(program_id)\r\n    }\r\n    \r\n    const result = useQuery<ProgramListData,ProgramListVars>(GET_PROGRAMS);\r\n\r\n    const [saveFaculty, { error, data }]=  \r\n    useMutation<FacultyData>(\r\n        CREATE_FACULTY,\r\n        {variables:{\r\n            id:id,\r\n            firstName:firstName,\r\n            lastName:lastName,\r\n            password:password,\r\n            email:email,\r\n            program_id:program\r\n        }}\r\n    )\r\n\r\n    const genID=(min:number,max:number)=>{\r\n        const user_id=\"888\"+String(Math.floor(Math.random() * (max - min)) + min);\r\n        setID(user_id)\r\n        return user_id\r\n    }\r\n    \r\n    const genEmail=(firstName:string,lastName:string,id:string)=>{\r\n        \r\n        const email= firstName[0]+\r\n                lastName+\r\n                \"@conestogac.on.ca\";\r\n        setEmail(email)\r\n\r\n        return email\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <h3>Add Faculty</h3>\r\n            {error ? <p>Oh no! {error.message}</p> : null}\r\n            {data && data.createFaculty \r\n                ? \r\n            <div>\r\n            <p>Saved!</p> \r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty ID: {data && data.createFaculty.id}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty name: {data && data.createFaculty.firstName} {data.createFaculty.LastName}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty Email: {data && data.createFaculty.email}\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Faculty: {data && data.createFaculty.status}\r\n            </Typography>\r\n            </div>\r\n                : \r\n            <div>\r\n                <form>\r\n                <TextField\r\n                    placeholder=\"Enter your first name\"\r\n                    label=\"First Name\"\r\n                    value={firstName}\r\n                    onChange={e=>{\r\n                        setFirstName(e.target.value)\r\n                        setFirstNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                        genEmail(firstName,lastName,genID(1111,9999))\r\n                        }}\r\n                    />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your last name\"\r\n                label=\"Last Name\"\r\n                value={lastName}\r\n                onChange={e=>{\r\n                    setLastName(e.target.value)\r\n                    setLastNameValid(nameRegex.test(e.target.value.toLowerCase()) ? 'success' : 'error')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <TextField\r\n                placeholder=\"Enter your password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                onChange={e=>{\r\n                    setPassword(e.target.value)\r\n                    setPasswrodValid(e.target.value.length < 8 ? 'error' : 'success')\r\n                    genEmail(firstName,lastName,genID(1111,9999))\r\n                }}\r\n                />\r\n                <br/>\r\n                <SelectProgram programs={result.data?.programs} onProgramClick={onProgramClick}/>\r\n                <br/>\r\n                <Button color=\"primary\" variant=\"text\" \r\n                disabled={passwordValid !== 'success' || firstNameValid !== 'success' || lastNameValid !== 'success' }    \r\n                onClick={() =>id && firstName && lastName && email &&password && saveFaculty()}>\r\n                    Add\r\n                </Button>\r\n            </form>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./component/signup/Home\";\r\nimport Login from \"./component/signup/Login\";\r\nimport Signup from \"./component/signup/Signup\";\r\nimport ProgramList from \"./component/programs/ProgramList\";\r\nimport ProgramDetail from \"./component/programs/ProgramDetail\";\r\nimport CourseList from \"./component/courses/CourseList\";\r\nimport Course from \"./component/courses/Course\";\r\nimport StudentList from \"./component/students/StudentList\";\r\nimport Student from \"./component/students/Student\";\r\nimport CreateProgram from \"./component/programs/CreateProgram\";\r\nimport CreateCourse from \"./component/courses/CreateCourse\";\r\nimport UpdateProgram from \"./component/programs/UpdateProgram\";\r\nimport Enrollment from \"./component/enrollment/Enrollment\";\r\nimport FacultyList from \"./component/faculties/FacultyList\";\r\nimport Faculty from \"./component/faculties/Faculty\";\r\nimport CreateFaculty from \"./component/faculties/CreateFaculty\";\r\ninterface RouteProps {\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\nexport const Routes: React.FunctionComponent<RouteProps> = (childProps) =>\r\n  <Switch>\r\n    <Route path=\"/home\" exact render={(props) => <Home {...props} {...childProps} />}/>\r\n    <Route path='/signup' exact render={(props) => <Signup {...props} {...childProps} />}/>\r\n    <Route path='/login' exact render={(props) => <Login {...props} {...childProps} />}/>\r\n\r\n    <Route path=\"/create/program\" exact component={CreateProgram} />\r\n    <Route path=\"/create/course\" exact component={CreateCourse} />\r\n    <Route path=\"/create/faculty\" exact component={CreateFaculty} />\r\n    <Route path=\"/create/student\" exact component={Signup} />\r\n\r\n    <Route path=\"/programs\" exact component={ProgramList} />\r\n    <Route path=\"/courses\" exact component={CourseList} />\r\n    <Route path=\"/faculties\" exact component={FacultyList} />\r\n    <Route path=\"/students\" exact component={StudentList} />\r\n\r\n    <Route path=\"/program/:id\" exact component={ProgramDetail} />\r\n    <Route path=\"/course/:id\" exact component={Course} />\r\n    <Route path=\"/faculty/:id\" exact component={Faculty} />\r\n    <Route path=\"/student/:id\" exact component={Student} />\r\n\r\n    <Route path=\"/\" >Not Found</Route>\r\n  </Switch>;","import React, { Component } from 'react'\r\n\r\n\r\nexport interface ProgramType {\r\n    id: string;\r\n    name: string;\r\n    courses: CourseType[];\r\n    faculties: FacultyType[];\r\n    students: StudentType[];   \r\n}\r\n\r\nexport interface CourseType{\r\n    id: string;\r\n    name: string;\r\n    numOfStudent: number;\r\n    program: ProgramType;\r\n    enrollments: EnrollmentType[];\r\n    instructings:InstructingType[];\r\n    attendances:Array<AttendanceType>;// same with Attendance[]\r\n    class:ClassType[];\r\n}\r\n\r\nexport interface StudentType{\r\n    id: string\r\n    firstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    enrollments: EnrollmentType[]\r\n    attendances: AttendanceType[]\r\n}\r\n\r\nexport interface FacultyType{\r\n    id: string\r\n    firstName: string\r\n    LastName: string\r\n    email: string\r\n    password: string\r\n    status: string\r\n    program: ProgramType\r\n    instructings: InstructingType[]\r\n\r\n}\r\n\r\nexport interface ClassType{\r\n    id: string\r\n    course: CourseType\r\n    room: string\r\n    startTime: string\r\n    endTime: string\r\n}\r\n\r\nexport interface EnrollmentType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n}\r\n\r\nexport interface InstructingType{\r\n    id: string\r\n    course: CourseType\r\n    faculty: FacultyType\r\n}\r\n\r\nexport interface AttendanceType{\r\n    id: string\r\n    course: CourseType\r\n    student: StudentType\r\n    time: string\r\n    class:ClassType\r\n}\r\n\r\nexport const type = {\r\n    program: \"Program\",\r\n    course: \"Course\",\r\n    student: \"Student\",\r\n    faculty: \"Faculty\",\r\n    enrollment: \"Enrollment\",\r\n    instructing: \"Instructing\",\r\n    attendance: \"Attendance\",\r\n}\r\n\r\n\r\n\r\nexport interface AttendanceSubscriptionPayload {\r\n    mutation: MutationType\r\n    node: AttendanceType\r\n    updatedFields: string[]\r\n    previousValues: AttendancePreviousValues\r\n}\r\n\r\nexport enum  MutationType {\r\n    CREATED,\r\n    UPDATED,\r\n    DELETED,\r\n}\r\nexport interface AttendancePreviousValues{\r\n    id: string\r\n    time: string\r\n}\r\n\r\nexport enum Role {\r\n    SUPERADMIN=\"SUPERADMIN\", \r\n    ADMIN=\"ADMIN\",\r\n    USER=\"USER\"\r\n}","import { split } from 'apollo-link';\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink,createHttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { setContext } from 'apollo-link-context';\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://murmuring-fortress-24950.herokuapp.com/'\r\n});\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://murmuring-fortress-24950.herokuapp.com/',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('token');\r\n  console.log(\"in header:\"+token)\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n}); \r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n);\r\n  \r\n\r\nconst client=new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache(),\r\n    credentials: 'include',\r\n    request: async operation => {\r\n      operation.setContext({\r\n        fetchOptions: {\r\n          credentials: 'same-origin'\r\n        }\r\n      })\r\n    },\r\n    fetchOptions: {\r\n      credentials: 'include'\r\n   }\r\n  })\r\n\r\nexport default client","import React, { Fragment, ReactElement } from 'react'\r\nimport { AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs,Chip, Button, Icon } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Role } from './Interfaces';\r\n\r\n\r\nimport {  } from '@material-ui/core'\r\nimport LibraryBooksOutlinedIcon from '@material-ui/icons/LibraryBooksOutlined';\r\nimport QueueOutlinedIcon from '@material-ui/icons/QueueOutlined';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PeopleAltTwoToneIcon from '@material-ui/icons/PeopleAltTwoTone';\r\nimport GroupAddTwoToneIcon from '@material-ui/icons/GroupAddTwoTone';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\n\r\ninterface Props {\r\n  history:any\r\n  isAuthenticated: boolean;\r\n  userHasAuthenticated: (authenticated: boolean) => void;\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root:{\r\n    textDecoration:'none',\r\n    display: 'flex',\r\n  },\r\n  avtive: {\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '0 30px',\r\n    textDecoration:'none'\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0',\r\n    marginLeft: '5px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  sidebarIcon: {\r\n    height: 24,\r\n  }\r\n}));\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst Nav = (props: Props):ReactElement => {\r\n    const classes = useStyles();\r\n    const role=localStorage.getItem(\"role\");\r\n    console.log(\"role:\"+role)\r\n\r\n    const handleLogout =  () => {\r\n      props.userHasAuthenticated(false);\r\n\r\n      localStorage.clear()\r\n    }\r\n\r\n    return (\r\n    role==Role.SUPERADMIN\r\n        ?\r\n        <div>\r\n          <ListItem button component={NavLink} to=\"/home\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <HomeOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/programs\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Programs\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/program\">\r\n            <ListItemIcon>\r\n              <AddBoxOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Program\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/courses\"> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Courses\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/course\">  \r\n            <ListItemIcon>\r\n              <QueueOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Course\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/students\">     \r\n            <ListItemIcon>\r\n              <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/student\">  \r\n            <ListItemIcon>\r\n              <GroupAddIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/faculties\">  \r\n            <ListItemIcon>\r\n              <PeopleAltTwoToneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Faculty\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/faculty\">\r\n            <ListItemIcon>\r\n              <GroupAddTwoToneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Faculty\" />\r\n          </ListItem>\r\n        </div>\r\n        // <Fragment>\r\n        // {/* <Breadcrumbs aria-label=\"breadcrumb\">\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/program\">Add Program</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/faculty\">Add Faculty</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n        // <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        // </Breadcrumbs> */} </Fragment>\r\n        :\r\n    role==Role.ADMIN\r\n        ?\r\n        <div>\r\n          <ListItem button component={NavLink} to=\"/home\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <HomeOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/programs\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Programs\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/courses\"> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Courses\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/course\">  \r\n            <ListItemIcon>\r\n              <QueueOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Course\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/students\">     \r\n            <ListItemIcon>\r\n              <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/create/student\">  \r\n            <ListItemIcon>\r\n              <GroupAddIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Add Student\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/faculties\">  \r\n            <ListItemIcon>\r\n              <PeopleAltTwoToneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Faculty\" />\r\n          </ListItem>\r\n        </div>\r\n        // <Fragment>\r\n        // <Breadcrumbs aria-label=\"breadcrumb\">\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/students\">Students</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/faculties\">Faculties</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/course\">Add Course</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/create/student\">Add Student</NavLink>\r\n        // <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        // </Breadcrumbs>\r\n        // </Fragment>\r\n        :\r\n        <div>\r\n          <ListItem button component={NavLink} to=\"/home\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <HomeOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/programs\">        \r\n            <ListItemIcon className={classes.sidebarIcon}>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Programs\" />\r\n          </ListItem>\r\n          <ListItem button component={NavLink} to=\"/courses\"> \r\n            <ListItemIcon>\r\n              <LibraryBooksOutlinedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Courses\" />\r\n          </ListItem>\r\n        </div>\r\n        // <Fragment>\r\n        // <Breadcrumbs aria-label=\"breadcrumb\">\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/home\">Home</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/programs\">Programs</NavLink>\r\n        // <NavLink activeClassName={classes.avtive} className={classes.root} to=\"/courses\">Courses</NavLink>\r\n        // <NavLink to=\"/\" onClick={handleLogout}>Log out</NavLink>\r\n        // </Breadcrumbs>\r\n        // </Fragment>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React ,{Component,Fragment, useState, PropsWithChildren, ReactElement}from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { NavLink, withRouter, Route } from \"react-router-dom\";\r\nimport {AppBar, Tabs, Tab, Box,Typography,makeStyles,Breadcrumbs,Chip, Button, Icon  } from '@material-ui/core'\r\nimport { emphasize, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {LockOpen,Person,Loyalty,Subject} from '@material-ui/icons'\r\nimport PropTypes from 'prop-types';\r\nimport { Routes } from \"./Routes\";\r\nimport client from './Client'\r\nimport Login from './component/signup/Login'\r\nimport ProgramList from './component/programs/ProgramList'\r\nimport './App.css';\r\nimport CourseList from './component/courses/CourseList';\r\nimport FacultyList from './component/faculties/FacultyList';\r\nimport StudentList from './component/students/StudentList';\r\n\r\nimport { Role } from './component/Interfaces';\r\nimport Nav from './component/Nav';\r\n\r\nimport clsx from 'clsx'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\ninterface AppProps {\r\n  history: any;\r\n}\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0',\r\n    marginLeft: '5px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  sidebarIcon: {\r\n    height: 24,\r\n  }\r\n}));\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\n\r\n\r\nfunction App(props:AppProps): ReactElement<AppProps> {\r\n  const classes = useStyles();\r\n  const [isAuthenticated,setIsAuth]=useState(localStorage.getItem(\"role\")?true:false)\r\n  const [isAuthenticating,setIsAuth2]=useState(false)\r\n  const [value,setValue]=useState(0)\r\n\r\n  // for material ui\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n\r\n  // async componentDidMount() {\r\n    // try {\r\n    //   if (await Auth.currentSession()) {\r\n    //     this.userHasAuthenticated(true);\r\n    //   }\r\n    // }\r\n    // catch(e) {\r\n    //   if (e !== 'No current user') {\r\n    //     alert(e);\r\n    //   }\r\n    // }\r\n  \r\n  //   setIsAuth2(false);\r\n  // }\r\n  const userHasAuthenticated = (authenticated: boolean) => {\r\n    setIsAuth(authenticated);\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    // await Auth.signOut();\r\n  \r\n    userHasAuthenticated(false);\r\n    //props.history.push(\"/login\");\r\n  }\r\n\r\n  const handleChange = (event:React.ChangeEvent<{}>, newValue:number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  const showLoggedInBar = () => {\r\n    \r\n    \r\n  };\r\n\r\n\r\n  const showLoggedOutBar = () => (\r\n    <Fragment>\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <NavLink to=\"/\">Home</NavLink>\r\n      <NavLink to=\"/login\">Login</NavLink>\r\n    </Breadcrumbs>\r\n\r\n      \r\n    </Fragment>\r\n  );\r\n\r\n  \r\n\r\n\r\n  const childProps = {\r\n    isAuthenticated: isAuthenticated,\r\n    userHasAuthenticated: userHasAuthenticated\r\n  };\r\n\r\n  \r\n\r\n    \r\n  return (\r\n    <div>\r\n    <ApolloProvider client={client}>\r\n      {isAuthenticated ? \r\n        <div className={classes.root}>\r\n          <CssBaseline />\r\n          <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n            <Toolbar className={classes.toolbar}>\r\n              <IconButton\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={handleDrawerOpen}\r\n                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                Pi-Porject\r\n              </Typography>\r\n              <Button color=\"inherit\" component={NavLink} to=\"/\" onClick={handleLogout}>\r\n                    Log Out\r\n                    <Icon className={classes.toolbarIcon}>\r\n                      <ExitToAppIcon/>\r\n                    </Icon>\r\n              </Button>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Drawer\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n            }}\r\n            open={open}\r\n          >\r\n            <div className={classes.toolbarIcon}>\r\n              <IconButton onClick={handleDrawerClose}>\r\n                <ChevronLeftIcon />\r\n              </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n              <Nav history={props.history} isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>\r\n            </List>\r\n          </Drawer>\r\n          <main className={classes.content}>\r\n            <div className={classes.appBarSpacer} />\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n            </Container>\r\n          </main>\r\n        </div>\r\n        :\r\n        <Login isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>\r\n      }\r\n{/* \r\n    <div>\r\n      {isAuthenticated ? \r\n        <Nav history={props.history} isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/> : \r\n        <Login isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated}/>}\r\n      <Routes isAuthenticated={childProps.isAuthenticated} userHasAuthenticated={childProps.userHasAuthenticated} />\r\n    </div> */}\r\n    </ApolloProvider>\r\n    </div>\r\n  );\r\n  \r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={'/client'}>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}